<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gtoo8888</title>
  
  <subtitle>会扇扇子的猪</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-30T15:29:19.003Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kuku De</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>libtorch 安装教程</title>
    <link href="http://example.com/2023/07/30/Environment-Configuration/libtorch_install/"/>
    <id>http://example.com/2023/07/30/Environment-Configuration/libtorch_install/</id>
    <published>2023-07-30T15:29:09.000Z</published>
    <updated>2023-07-30T15:29:19.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-需要安装的东西"><a href="#1-需要安装的东西" class="headerlink" title="1 需要安装的东西"></a>1 需要安装的东西</h2><h3 id="1-1-NVIDIA驱动"><a href="#1-1-NVIDIA驱动" class="headerlink" title="1.1 NVIDIA驱动"></a>1.1 NVIDIA驱动</h3><p>让显卡可以正确识别和配置的<br>名称一般都是：<br>NVIDIA-Linux-x86_64-535.54.03.run<br>在官网上可以查看到对应的版本，并且下载<br><a href="https://www.nvidia.com/Download/index.aspx">https://www.nvidia.com/Download/index.aspx</a></p><h3 id="1-2-CUDA-Toolkit"><a href="#1-2-CUDA-Toolkit" class="headerlink" title="1.2 CUDA Toolkit"></a>1.2 CUDA Toolkit</h3><p>CUDA Toolkit是由NVIDIA开发的一套用于并行计算的工具集<br>名称一般都是：<br>cuda_11.1.0_455.23.05_linux.run*<br>在cuda的网站进行下载<br><a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a><br>下面有<br>Archive of Previous CUDA Releases<br>可以查看更多版本的</p><p>CUDA Toolkit包含的内容<br>CUDA驱动程序（CUDA Driver）<br>CUDA Runtime API：<br>CUDA编译器（nvcc）：nvcc是CUDA的编译器，<br>CUDA Math库（cuMath）<br>CUDA示例和工具</p><h3 id="1-3-cuDNN-CUDA-Deep-Neural-Network-library"><a href="#1-3-cuDNN-CUDA-Deep-Neural-Network-library" class="headerlink" title="1.3 cuDNN (CUDA Deep Neural Network library)"></a>1.3 cuDNN (CUDA Deep Neural Network library)</h3><p>是CUDA Toolkit中的一个部分</p><p>是NVIDIA专门为深度学习而开发的一个高性能库。它是CUDA Toolkit的一部分，但是需要单独下载和安装。cuDNN提供了一系列的深度学习算法和函数，如卷积、池化、激活函数等，以及一些优化技术，如自动调整算法、半精度计算等，用于加速深度学习模型的训练和推理。</p><h3 id="1-4-nvcc"><a href="#1-4-nvcc" class="headerlink" title="1.4 nvcc"></a>1.4 nvcc</h3><p>nvcc是CUDA的编译器</p><h3 id="1-5-libtorch"><a href="#1-5-libtorch" class="headerlink" title="1.5 libtorch"></a>1.5 libtorch</h3><p>pytorch的C++接口，使用了cuDNN提供的高性能深度学习算法和优化技术</p><h3 id="1-6-总结需要安装的"><a href="#1-6-总结需要安装的" class="headerlink" title="1.6 总结需要安装的"></a>1.6 总结需要安装的</h3><ul><li>NVIDIA驱动：显卡能正常工作</li><li>CUDA Toolkit：能进行cuda开发，提供了cuDNN，nvcc</li><li>libtorch：使用pytorch的C++接口</li></ul><p>问题：<br>如果使用自动安装NVIDIA驱动，装好以后会自动装上nvcc,cuDNN，所以最好手动一个一个安装</p><h2 id="2-安装教程"><a href="#2-安装教程" class="headerlink" title="2. 安装教程"></a>2. 安装教程</h2><p>安装的总体思路：</p><ol><li>安装NVIDIA驱动<ol><li>标志是nvidia-smi通过</li></ol></li><li>安装cuda,也就是cuda toolkit<ol><li>标志是执行.sh以后不报错</li></ol></li><li>安装cuDNN,这个是cuda中用于神经网络的库<ol><li>标志是nvcc -V有版本显示，并且是正确的</li></ol></li><li>安装libtorch<ol><li>标志是#include &lt;torch&#x2F;torch.h&gt;并且使用cmake编译没有报错</li><li>如果前面安装的有问题，那么中间会报错没有cuda,没有cuDNN</li></ol></li></ol><h3 id="2-0-卸载"><a href="#2-0-卸载" class="headerlink" title="2.0 卸载"></a>2.0 卸载</h3><p>如果之前是用系统自带的安装的，需要先线束<br>删除cuda</p><p>sudo apt-get purge –auto-remove nvidia-cuda-toolkit</p><h3 id="2-1-安装NVIDIA驱动"><a href="#2-1-安装NVIDIA驱动" class="headerlink" title="2.1 安装NVIDIA驱动"></a>2.1 安装NVIDIA驱动</h3><h4 id="2-1-1-禁用-Nouveau-驱动"><a href="#2-1-1-禁用-Nouveau-驱动" class="headerlink" title="2.1.1 禁用 Nouveau 驱动"></a>2.1.1 禁用 Nouveau 驱动</h4><p>安装之前报错<br>ERROR: The Nouveau kernel driver is currently in use by your system. This driver is incompatible with the NVIDIA driver……<br>解决方法：<br>禁用 Nouveau 驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 nouveau是否使用</span></span><br><span class="line">lspci | grep nouveau</span><br><span class="line"><span class="comment"># 禁用nouveau</span></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nvidia-nouveau.conf</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">blacklist nouveau </span><br><span class="line">options nouveau modeset=0</span><br><span class="line"></span><br><span class="line">lspci | grep nouveau</span><br></pre></td></tr></table></figure><h4 id="2-1-2-安装NVIDIA驱动"><a href="#2-1-2-安装NVIDIA驱动" class="headerlink" title="2.1.2 安装NVIDIA驱动"></a>2.1.2 安装NVIDIA驱动</h4><p><a href="https://www.nvidia.com/Download/index.aspx">NVIDIA显卡驱动官网</a><br>搜索关键词为：<strong>NVIDIA显卡驱动</strong><br><strong>NVIDIA-Linux-x86_64-535.54.03.run</strong><br>去官网下载自己显卡对应的驱动型号,然后安装驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> a+x NVIDIA-Linux-x86_64-535.54.03.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-535.54.03.run</span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>这个时候安装的cuda版本是12.2的是最新的版本的，待会需要重新安装适合自己的cuda版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 535.86.05              Driver Version: 535.86.05    CUDA Version: 12.2     |</span><br><span class="line">|-----------------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                                         |                      |               MIG M. |</span><br><span class="line">|=========================================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce RTX 3060 ...    Off | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| N/A   41C    P8              15W /  80W |   1024MiB /  6144MiB |     20%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                                         </span><br><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                            |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |</span><br><span class="line">|        ID   ID                                                             Usage      |</span><br><span class="line">|=======================================================================================|</span><br><span class="line">|    0   N/A  N/A      1310      G   /usr/lib/xorg/Xorg                           42MiB |</span><br><span class="line">|    0   N/A  N/A      1404      G   /usr/bin/gnome-shell                        115MiB |</span><br><span class="line">|    0   N/A  N/A      1619      G   /usr/lib/xorg/Xorg                          489MiB |</span><br><span class="line">|    0   N/A  N/A      1744      G   /usr/bin/gnome-shell                         70MiB |</span><br><span class="line">|    0   N/A  N/A      2794      G   ...sion,SpareRendererForSitePerProcess      137MiB |</span><br><span class="line">|    0   N/A  N/A     23307      G   /usr/lib/firefox/firefox                    145MiB |</span><br><span class="line">+---------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="2-1-3-nvidia-smi显示的cuda版本的思考"><a href="#2-1-3-nvidia-smi显示的cuda版本的思考" class="headerlink" title="2.1.3 nvidia-smi显示的cuda版本的思考"></a>2.1.3 nvidia-smi显示的cuda版本的思考</h4><p>根据参考资料2的推断，ubuntu中安装的cuda是可以有两个版本的：</p><ol><li>驱动电脑显示屏显示，通过nvidia-smi中的cuda版本显示</li><li>用来编写程序，进行cuda加速计算的，可以再安装一个自己的版本</li></ol><p>实测得到，nvidia-smi中读取得到的cuda版本来自于以下的路径，如果删除以下路径这些.so文件，会造成nvidia-smi中cuda版本显示为N&#x2F;A</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/i386-linux-gnu/libcuda.so.1</span><br><span class="line">/usr/lib/i386-linux-gnu/libcuda.so</span><br><span class="line">/usr/lib/i386-linux-gnu/libcuda.so.535.86.05</span><br><span class="line"></span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.470.182.03</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libcuda.so.535.86.05</span><br></pre></td></tr></table></figure><h3 id="2-2-安装cuda"><a href="#2-2-安装cuda" class="headerlink" title="2.2 安装cuda"></a>2.2 安装cuda</h3><p>所安装的cuda其实只是一个简写，其实是安装的CUDA Toolkit<br><a href="https://developer.nvidia.com/cuda-downloads">CUDA Toolkit官网</a><br>搜索关键词为：<strong>CUDA Toolkit</strong><br><strong>cuda_11.1.0_455.23.05_linux.run</strong><br>下载自己想要的cuda版本，这个版本需要和之后的libtorch版本对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> a+x cuda_11.1.0_455.23.05_linux.run</span><br><span class="line">sudo ./cuda_11.1.0_455.23.05_linux.run  </span><br></pre></td></tr></table></figure><p>等待的时间比较长，之后会显示一个图形界面<br>accept<br>Install<br>一般就可以安装完成了，安装失败：<br>Installation failed. See log at &#x2F;var&#x2F;log&#x2F;cuda-installer.log for details.<br>只要能正常的显示输出，那就是安装成功了<br>可以去&#x2F;usr&#x2F;local&#x2F;目录下面看，没有有自己cuda版本对应的文件夹<br>我的目录结构是这样的<br>local&#x2F;<br>├── cuda -&gt; &#x2F;usr&#x2F;local&#x2F;cuda-11.1&#x2F;<br>└── cuda-11.1</p><h4 id="2-2-1-报错解决"><a href="#2-2-1-报错解决" class="headerlink" title="2.2.1 报错解决"></a>2.2.1 报错解决</h4><h5 id="报错1"><a href="#报错1" class="headerlink" title="报错1"></a>报错1</h5><p>│ Existing package manager installation of the driver found. It is strongly<br>│ recommended that you remove this before continuing<br>报错原因：<br>有多个cuda，直接不允许继续安装了，我这边的尝试，只要继续安装一直是无法安装成功的<br>这个报错出现在使用系统自带的软件安装cuda,<br>解决方法：</p><ol><li>卸载安装的cuda，再次尝试是否可以安装，我这边的尝试是不行的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找方法1</span></span><br><span class="line">apt list --installed | grep <span class="string">&quot;cuda&quot;</span> <span class="comment"># 查找安装的cuda包</span></span><br><span class="line"><span class="comment"># 查找方法2</span></span><br><span class="line">dpkg -l <span class="string">&quot;*cuda*&quot;</span> <span class="comment"># 使用dpkg自带的搜索，不使用grep过滤</span></span><br><span class="line"><span class="comment"># 连带依赖一起删除</span></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;cuda*&quot;</span> <span class="comment"># 把这些cuda相关的包都删除，--purge表示依赖关系也都删除</span></span><br><span class="line"><span class="comment"># 查看是否删除干净</span></span><br><span class="line">apt list --installed | grep <span class="string">&quot;cuda&quot;</span></span><br></pre></td></tr></table></figure></li><li>卸载nvidia驱动，不使用系统安装的nvidia驱动，自己手动从官网下载安装<br>如果有是用独显做双屏显示的，记得先只显示一个屏幕<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找nvidia驱动有哪些</span></span><br><span class="line">apt list --installed | grep <span class="string">&quot;nvidia&quot;</span></span><br><span class="line"><span class="comment"># 连带依赖一起删除</span></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;nvidia*&quot;</span> </span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;libnvidia*&quot;</span> </span><br><span class="line"><span class="comment"># 查看是否删除干净</span></span><br><span class="line">apt list --installed | grep <span class="string">&quot;cuda&quot;</span></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 重启后使用nvidia-smi，提示找不到指令，说明卸载到了，从安装显卡驱动那一步开始安装</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="报错2"><a href="#报错2" class="headerlink" title="报错2"></a>报错2</h5><p>Installation failed. See log at &#x2F;var&#x2F;log&#x2F;cuda-installer.log for details.<br>参考下面的解决方法<br><a href="https://blog.csdn.net/weixin_49223002/article/details/120509776">最终解决cuda安装问题的资料，去掉cuda driver</a><br>报错原因：<br>已经有一个cuda了，但是但是继续安装报错<br>解决方法：<br>在安装的过程中，Driver CUDA去掉<br>解决原理：<br>原有的cuda库是用于显示器驱动的，这个驱动的cuda库只能安装一个，只要不安装驱动类型的cuda，仅仅安装其余的，就可以解决报错</p><h3 id="2-3-安装cnDNN"><a href="#2-3-安装cnDNN" class="headerlink" title="2.3 安装cnDNN"></a>2.3 安装cnDNN</h3><h4 id="2-3-1-安装"><a href="#2-3-1-安装" class="headerlink" title="2.3.1 安装"></a>2.3.1 安装</h4><p>去官网或者别的渠道下载一个安装包，我下载的是<br>cudnn-11.1-linux-x64-v8.0.5.39.zip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip cudnn-11.1-linux-x64-v8.0.5.39.zip</span><br><span class="line"><span class="built_in">cd</span> cudnn-11.1-linux-x64-v8.0.5.39/cuda</span><br><span class="line"><span class="comment"># 安装，实际上是把这些文件粘贴到cuda的路径下</span></span><br><span class="line"><span class="comment"># 如果前一步cuda安装失败，或者用的是系统安装cuda的方式，在/usr/local/文件夹下是没有cuda-XX.X文件夹的</span></span><br><span class="line">sudo <span class="built_in">cp</span> include/cudnn.h /usr/local/cuda-11.1/include/</span><br><span class="line">sudo <span class="built_in">cp</span> include/cudnn_version.h /usr/local/cuda-11.1/include/</span><br><span class="line">sudo <span class="built_in">cp</span> lib64/libcudnn* /usr/local/cuda-11.1/lib64/</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /usr/local/cuda-11.1/include/cudnn.h</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /usr/local/cuda-11.1/lib64/libcudnn*</span><br></pre></td></tr></table></figure><h4 id="2-3-2-添加环境变量"><a href="#2-3-2-添加环境变量" class="headerlink" title="2.3.2 添加环境变量"></a>2.3.2 添加环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 添加以下内容，保证cuDNN可以被找到</span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CUDA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span> </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="2-3-3-测试版本"><a href="#2-3-3-测试版本" class="headerlink" title="2.3.3 测试版本"></a>2.3.3 测试版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看安装的cnDNN版本</span></span><br><span class="line"><span class="comment"># 新版的版本信息放在了cudnn_version.h里面</span></span><br><span class="line"><span class="built_in">cat</span> /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">nvcc -V</span><br><span class="line"><span class="comment"># 观察下面的版本，现在nvcc中对应的cuda版本是自己安装的11.1</span></span><br><span class="line"><span class="comment"># 如果是用nvidia-smi输出，此时还是12.2也就是现在安装了两个cuda版本</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2020 NVIDIA Corporation</span><br><span class="line">Built on Tue_Sep_15_19:10:02_PDT_2020</span><br><span class="line">Cuda compilation tools, release 11.1, V11.1.74</span><br><span class="line">Build cuda_11.1.TC455_06.29069683_0</span><br></pre></td></tr></table></figure><h3 id="2-4-安装libtorch"><a href="#2-4-安装libtorch" class="headerlink" title="2.4 安装libtorch"></a>2.4 安装libtorch</h3><h4 id="2-4-1-安装"><a href="#2-4-1-安装" class="headerlink" title="2.4.1 安装"></a>2.4.1 安装</h4><p>官网只有最新版本的，从这个地址下载了需要的libtorch安装包<br>我下载的是这个版本<br>ibtorch-cxx11-abi-shared-with-deps-1.9.0+cu111.zip<br>libtorch里面提供了.so的动态库文件，还有.h文件，不需要安装，只需要制定路径就可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制定文件夹解压</span></span><br><span class="line">unzip -d ~/tools ibtorch-cxx11-abi-shared-with-deps-1.9.0+cu111.zip</span><br></pre></td></tr></table></figure><h4 id="2-4-2-例子测试"><a href="#2-4-2-例子测试" class="headerlink" title="2.4.2 例子测试"></a>2.4.2 例子测试</h4><p>参考如下，写一个简单的例子<br><a href="https://blog.csdn.net/LconLu/article/details/128171775">LibTorch简单的使用教程</a></p><p>C++测试文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;torch/torch.h&gt;</span> <span class="comment">// 头文件导入成功，说明上面的所有都安装成功了</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  torch::Tensor tensor = torch::<span class="built_in">rand</span>(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">//生成大小为2*3的随机数矩阵</span></span><br><span class="line">  std::cout &lt;&lt; tensor &lt;&lt; std::endl;           <span class="comment">//标准输出流打印至屏幕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmake文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.0</span> FATAL_ERROR)</span><br><span class="line"><span class="built_in">project</span>(example-app)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">find_package</span>(Torch REQUIRED)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; $&#123;TORCH_CXX_FLAGS&#125;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">add_executable</span>(example-app example-app.cpp)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(example-app <span class="string">&quot;$&#123;TORCH_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">set_property</span>(TARGET example-app PROPERTY CXX_STANDARD <span class="number">14</span>)</span><br></pre></td></tr></table></figure><p>编译过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> build</span><br><span class="line"><span class="variable">$cd</span> build</span><br><span class="line"><span class="variable">$cmake</span> -DCMAKE_PREFIX_PATH=~/tools/libtorch ..</span><br><span class="line"><span class="variable">$make</span></span><br></pre></td></tr></table></figure><p>编译成功，就说明上面的都安装成功了</p><h4 id="2-4-3-报错解决"><a href="#2-4-3-报错解决" class="headerlink" title="2.4.3 报错解决"></a>2.4.3 报错解决</h4><h5 id="报错1-1"><a href="#报错1-1" class="headerlink" title="报错1"></a>报错1</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at CMakeLists.txt:6 (find_package):</span><br><span class="line">  By not providing <span class="string">&quot;FindTorch.cmake&quot;</span> <span class="keyword">in</span> CMAKE_MODULE_PATH this project has</span><br><span class="line">  asked CMake to find a package configuration file provided by <span class="string">&quot;Torch&quot;</span>, but</span><br><span class="line">  CMake did not find one.</span><br><span class="line"></span><br><span class="line">  Could not find a package configuration file provided by <span class="string">&quot;Torch&quot;</span> with any of</span><br><span class="line">  the following names:</span><br><span class="line"></span><br><span class="line">    TorchConfig.cmake</span><br><span class="line">    torch-config.cmake</span><br></pre></td></tr></table></figure><p>报错原因：<br>没有找到libtorch文件的路径<br>解决方法：<br>需要使用cmake -DCMAKE_PREFIX_PATH&#x3D;~&#x2F;tools&#x2F;libtorch ..编译，看下自己的路径，是不是指定的正确</p><h5 id="报错2-1"><a href="#报错2-1" class="headerlink" title="报错2"></a>报错2</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at cmake/public/cuda.cmake:318 (message):</span><br><span class="line">  CUDA 9.1 is not compatible with std::tuple from GCC version &gt;= 6.  Please</span><br><span class="line">  upgrade to CUDA 9.2 or use the following option to use another version (<span class="keyword">for</span></span><br><span class="line">  example):</span><br><span class="line">    -DCUDA_HOST_COMPILER=/usr/bin/gcc-5</span><br></pre></td></tr></table></figure><p>报错原因：</p><ol><li>通过报错信息的提示看到，是cuda版本的过低产生的，于是通过apt list –installed | grep “cuda”</li><li>可以看到安装的nvidia-cuda-toolkit版本仅仅是9.1，同时查看&#x2F;usr&#x2F;bin&#x2F;里面没有gcc-5,只有gcc-6还有gcc-7</li><li>报错的根本原因是cuda版本过低导致的，需要卸载cuda toolkit重新安装才能解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1：使用列出软件的所有来源</span></span><br><span class="line">apt-cache madison nvidia-cuda-toolkit </span><br><span class="line"><span class="comment"># 方法2：使用列出软件的所有来源</span></span><br><span class="line">apt-cache policy nvidia-cuda-toolkit </span><br><span class="line"><span class="comment"># 使用apt-cache showpkg列出软件的所有来源</span></span><br><span class="line">apt-cache showpkg nvidia-cuda-toolkit </span><br><span class="line"><span class="comment"># 模拟安装软件</span></span><br><span class="line">apt-get install -s  nvidia-cuda-toolkit </span><br><span class="line"><span class="comment"># 列出软件所有版本，并查看是否已经安装</span></span><br><span class="line">apt-get install apt-show-versions</span><br><span class="line">apt-show-versions -a nvidia-cuda-toolkit </span><br><span class="line"><span class="comment"># 可以看到我使用的源，只有9.1这个版本，没有更高的了，所以需要手动安装</span></span><br><span class="line"><span class="comment"># 只要自己使用apt的方式安装nvidia-cuda-toolkit是始终无法解决这个问题的</span></span><br><span class="line">nvidia-cuda-toolkit | 9.1.85-3ubuntu1 | https://mirrors.ustc.edu.cn/ubuntu bionic/multiverse amd64 Packages</span><br><span class="line"><span class="comment"># 通过apt-get安装指定版本软件</span></span><br><span class="line">apt-get install package=version</span><br></pre></td></tr></table></figure></li><li>我最开始安装cuda的方式，是使用系统自带的Software &amp; Updates选择推荐型号进行安装的，所以安装时候安装附带的nvidia-cuda-toolkit就使用源中的这个版本，导致出现了版本过低的问题<br>解决方法：<br>我的解决方式是，一直从2.1开始，删除cuda,删除nvidia显卡驱动，最终解决</li></ol><h3 id="报错3"><a href="#报错3" class="headerlink" title="报错3"></a>报错3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Found cuDNN: v?</span><br></pre></td></tr></table></figure><p>报错原因：<br>新版本cudnn的版本信息包含在cudnn_version.h中，而不是cudnn.h中<br>解决方法：<br>修改：libtorch&#x2F;share&#x2F;cmake&#x2F;Caffe2&#x2F;public&#x2F;cuda.cmake，148行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file(READ <span class="variable">$&#123;CUDNN_INCLUDE_PATH&#125;</span>/cudnn.h CUDNN_HEADER_CONTENTS) <span class="comment"># 替换前</span></span><br><span class="line">file(READ <span class="variable">$&#123;CUDNN_INCLUDE_PATH&#125;</span>/cudnn_version.h CUDNN_HEADER_CONTENTS)  <span class="comment"># 替换后</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="各种安装包官网的下载地址"><a href="#各种安装包官网的下载地址" class="headerlink" title="各种安装包官网的下载地址"></a>各种安装包官网的下载地址</h2><p><a href="https://www.nvidia.com/Download/index.aspx">NVIDIA显卡驱动官网</a><br><a href="https://developer.nvidia.com/cuda-downloads">CUDA Toolkit官网</a><br><a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN官网下载地址-需要登录</a><br><a href="https://blog.csdn.net/weixin_43742643/article/details/114156298">[LibTorch &amp; Linux] 各版本 LibTorch 下载</a></p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/wohu1104/article/details/107032493">Ubuntu 安装 NVIDIA 显卡驱动详细步骤</a><br><a href="https://blog.csdn.net/weixin_49223002/article/details/120509776">最终解决cuda安装问题的资料，去掉cuda driver</a><br><a href="https://blog.csdn.net/LconLu/article/details/128171775">LibTorch简单的使用教程</a><br>[Found cuDNN: v?解决]<a href="https://zhuanlan.zhihu.com/p/370192639">https://zhuanlan.zhihu.com/p/370192639</a><br><a href="https://zhuanlan.zhihu.com/p/544370871">各版本CUDA toolkit和cuDNN官方下载地址-无需登录</a><br><a href="https://blog.csdn.net/yjk13703623757/article/details/78945576">使用apt-get查询安装指定版本的软件</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-需要安装的东西&quot;&gt;&lt;a href=&quot;#1-需要安装的东西&quot; class=&quot;headerlink&quot; title=&quot;1 需要安装的东西&quot;&gt;&lt;/a&gt;1 需要安装的东西&lt;/h2&gt;&lt;h3 id=&quot;1-1-NVIDIA驱动&quot;&gt;&lt;a href=&quot;#1-1-NVIDIA驱动&quot;</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Part17 包管理工具</title>
    <link href="http://example.com/2023/07/23/Brids-Linux-private-kitchen/Part17-Package-Management-Tools/"/>
    <id>http://example.com/2023/07/23/Brids-Linux-private-kitchen/Part17-Package-Management-Tools/</id>
    <published>2023-07-23T13:33:32.000Z</published>
    <updated>2023-07-30T15:10:52.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dpkg-Debian-package"><a href="#dpkg-Debian-package" class="headerlink" title="dpkg(Debian package)"></a>dpkg(Debian package)</h2><p>是一个常用于管理 Debian 系统上的软件包的工具</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i baidunetdisk_4.17.7_amd64.deb    <span class="comment"># 安装指定的软件包文件</span></span><br><span class="line">dpkg -r baidunetdisk    <span class="comment"># 仅移除软件包，保留配置文件</span></span><br><span class="line">dpkg --purge baidunetdisk    <span class="comment"># 移除软件包及其配置文件</span></span><br><span class="line">dpkg -l  <span class="comment"># 列出所有已安装的软件包</span></span><br></pre></td></tr></table></figure><h3 id="不常用指令"><a href="#不常用指令" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dpkg -s baidunetdisk  <span class="comment"># 显示指定软件包的详细信息</span></span><br><span class="line">dpkg -L baidunetdisk    <span class="comment"># 列出软件包安装的文件</span></span><br><span class="line">dpkg -S baidunetdisk   <span class="comment"># 查找拥有指定文件的软件包</span></span><br><span class="line">dpkg -p baidunetdisk    <span class="comment"># 显示已安装软件包的详细信息，包括依赖关系</span></span><br><span class="line">dpkg -c baidunetdisk_4.17.7_amd64.deb   <span class="comment"># 列出软件包文件中包含的文件</span></span><br><span class="line">dpkg -I baidunetdisk_4.17.7_amd64.deb   <span class="comment"># 显示软件包文件的详细信息，包括依赖关系</span></span><br><span class="line">dpkg --get-selections &gt; <span class="built_in">test</span>    <span class="comment"># 将已安装的软件包选择保存到文件</span></span><br><span class="line">dpkg --set-selections &lt; <span class="built_in">test</span>    <span class="comment"># 从文件中恢复软件包选择</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合"><a href="#常用指令组合" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i code_1.80.1-1689183569_amd64.deb <span class="comment"># 安装指定的软件包文件</span></span><br><span class="line">dpkg -l <span class="string">&quot;baidu*&quot;</span>  <span class="comment"># 列出指定软件包的信息,可以使用正则表达式</span></span><br><span class="line">dpkg -r baidunetdisk    <span class="comment"># 仅移除软件包，保留配置文件</span></span><br></pre></td></tr></table></figure><h2 id="apt-Debian-package"><a href="#apt-Debian-package" class="headerlink" title="apt(Debian package)"></a>apt(Debian package)</h2><p>Advanced Package Tool</p><h2 id="apt和apt-get的区别"><a href="#apt和apt-get的区别" class="headerlink" title="apt和apt-get的区别"></a>apt和apt-get的区别</h2><p>apt 和 apt-get 都是用于在 Debian 及其派生发行版（如 Ubuntu）上管理软件包的命令行工具。它们有很多相似之处，但也存在一些区别</p><h3 id="1-常用指令"><a href="#1-常用指令" class="headerlink" title="1.常用指令"></a>1.常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update <span class="comment"># 更新软件包列表,更新本地包缓存</span></span><br><span class="line"><span class="comment"># E: Unable to locate package ros-melodic-cotomap-msgs 找不到本地包的详细信息时候可以更新一下本地包缓存</span></span><br><span class="line">sudo apt list --upgradable <span class="comment"># 查看可以升级的软件包</span></span><br><span class="line"></span><br><span class="line">sudo apt upgrade <span class="comment"># 升级软件包</span></span><br><span class="line">sudo apt install vim <span class="comment"># 安装软件包</span></span><br></pre></td></tr></table></figure><h4 id="2-删除安装包"><a href="#2-删除安装包" class="headerlink" title="2.删除安装包"></a>2.删除安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove vim <span class="comment"># 卸载软件包，仅删除安装包</span></span><br><span class="line">sudo apt remove <span class="string">&quot;nvidia*&quot;</span> <span class="comment"># 同时移除以为nvidia开头的安装包</span></span><br><span class="line">sudo apt purge <span class="string">&quot;nvidia*&quot;</span>  <span class="comment"># 卸载软件包，同时删除配置文件</span></span><br><span class="line"><span class="comment"># 老的写法</span></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;nvidia*&quot;</span> <span class="comment"># 卸载软件包，同时删除配置文件</span></span><br></pre></td></tr></table></figure><h3 id="3-查看软件包的安装来源"><a href="#3-查看软件包的安装来源" class="headerlink" title="3. 查看软件包的安装来源"></a>3. 查看软件包的安装来源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会显示每个版本的软件包名称、软件源的名称、版本号、优先级等信息。</span></span><br><span class="line">apt-cache madison nvidia-cuda-toolkit  <span class="comment"># 显示这些软件包所属的软件源</span></span><br><span class="line">apt-cache policy nvidia-cuda-toolkit <span class="comment"># 列出软件的所有来源，更加详细一些</span></span><br><span class="line">apt-cache showpkg nvidia-cuda-toolkit  <span class="comment"># 列出软件的所有来源，包括软件包的依赖关系、提供的功能以及逆向依赖关系等</span></span><br><span class="line">apt-get install -s  nvidia-cuda-toolkit <span class="comment"># 模拟安装软件</span></span><br><span class="line"><span class="comment"># 列出软件所有版本，并查看是否已经安装</span></span><br><span class="line">apt-get install apt-show-versions <span class="comment"># 需要安装这个软件</span></span><br><span class="line">apt-show-versions -a nvidia-cuda-toolkit <span class="comment"># 列出软件所有版本</span></span><br></pre></td></tr></table></figure><h3 id="4-其他指令"><a href="#4-其他指令" class="headerlink" title="4. 其他指令"></a>4. 其他指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apt autoremove <span class="comment"># 清理不再需要的软件包</span></span><br><span class="line">apt search vim <span class="comment"># 搜索软件包</span></span><br><span class="line">apt show vim <span class="comment"># 显示软件包信息</span></span><br><span class="line"></span><br><span class="line">apt list --upgradable <span class="comment"># 列出可升级的软件包</span></span><br><span class="line">apt list --installed <span class="comment"># 列出所有已安装的软件包</span></span><br><span class="line">apt depends &lt;package-name&gt; <span class="comment"># 列出软件包的依赖关系</span></span><br><span class="line">apt rdepends &lt;package-name&gt; <span class="comment"># 列出软件包的反向依赖关系</span></span><br><span class="line">apt show &lt;source-name&gt; <span class="comment"># 显示APT仓库源的配置信息</span></span><br><span class="line">apt-add-repository &lt;repository&gt; <span class="comment"># 添加/移除 APT 仓库源</span></span><br><span class="line">apt remove-repository &lt;repository&gt;</span><br><span class="line">apt update &amp;&amp; apt upgrade <span class="comment"># 更新软件包索引并升级系统</span></span><br><span class="line">apt --fix-broken install <span class="comment"># 修复软件包依赖关系问题</span></span><br><span class="line">apt-cache search &lt;search-term&gt; <span class="comment"># 全局搜索软件包</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dpkg-Debian-package&quot;&gt;&lt;a href=&quot;#dpkg-Debian-package&quot; class=&quot;headerlink&quot; title=&quot;dpkg(Debian package)&quot;&gt;&lt;/a&gt;dpkg(Debian package)&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="鸟哥的Linux私房菜" scheme="http://example.com/tags/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>Part16 进程管理</title>
    <link href="http://example.com/2023/07/23/Brids-Linux-private-kitchen/Part16-Process-Management/"/>
    <id>http://example.com/2023/07/23/Brids-Linux-private-kitchen/Part16-Process-Management/</id>
    <published>2023-07-23T12:54:00.000Z</published>
    <updated>2023-07-23T13:29:28.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看系统情况"><a href="#查看系统情况" class="headerlink" title="查看系统情况"></a>查看系统情况</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="comment"># 显示当前用户的进程状态</span></span><br><span class="line"></span><br><span class="line">ps -e <span class="comment"># 显示系统中所有进程的简要信息</span></span><br><span class="line">ps -f <span class="comment"># 显示进程的完整格式输出，包括进程状态、PID、PPID、CPU使用率、内存使用等信息</span></span><br><span class="line"></span><br><span class="line">ps -a <span class="comment"># 显示当前终端下所有用户的进程，包括其他用户的进程。这个选项等同于ps -e</span></span><br><span class="line">ps -u <span class="comment"># 显示指定用户的进程信息。可以通过用户名或用户ID来指定用户</span></span><br><span class="line">ps -x <span class="comment"># 它用于显示当前用户在终端下运行的所有进程，包括没有控制终端的进</span></span><br></pre></td></tr></table></figure><h3 id="不常用指令"><a href="#不常用指令" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ps -l <span class="comment"># 显示进程的长格式输出，包括进程状态、PID、PPID、CPU使用率等信息</span></span><br><span class="line">ps -t <span class="comment"># 显示指定终端或伪终端上的进程</span></span><br><span class="line">ps -p <span class="comment"># 显示指定进程ID的进程信息</span></span><br><span class="line">ps -C <span class="comment"># 显示指定命令名的进程信息</span></span><br><span class="line">ps -o <span class="comment"># 自定义输出格式，可以选择要显示的列</span></span><br><span class="line">ps -H <span class="comment"># 显示进程的层次结构</span></span><br><span class="line">ps -S <span class="comment"># 显示进程的信号信息</span></span><br><span class="line">ps -G <span class="comment"># 显示指定进程组ID的进程信息</span></span><br><span class="line">ps -N <span class="comment"># 显示与指定进程ID不匹配的进程信息</span></span><br><span class="line">ps -u <span class="comment"># 显示指定用户的进程信息</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合"><a href="#常用指令组合" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef <span class="comment"># 显示系统中所有进程的详细信息</span></span><br><span class="line">ps -aux <span class="comment"># 显示当前用户以及其他用户的进程详细信息</span></span><br></pre></td></tr></table></figure><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>显示系统的内存使用情况，查看交换分区的情况</p><h3 id="不常用指令-1"><a href="#不常用指令-1" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free -b <span class="comment"># 以字节为单位显示内存使用情况</span></span><br><span class="line"></span><br><span class="line">free -k <span class="comment"># 以K字节为单位显示内存使用情况</span></span><br><span class="line">free -m <span class="comment"># 以M字节为单位显示内存使用情况</span></span><br><span class="line">free -g <span class="comment"># 以G字节为单位显示内存使用情况</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合-1"><a href="#常用指令组合-1" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">free -h <span class="comment"># 以人类可读的方式显示内存大小，以K、M、G为单位，更易读</span></span><br><span class="line">free -hs 1 <span class="comment"># 每秒显示一次</span></span><br><span class="line">free -t <span class="comment"># 显示内存总和</span></span><br><span class="line">free -V <span class="comment"># 显示free命令的版本信息</span></span><br></pre></td></tr></table></figure><h1 id="查看时间"><a href="#查看时间" class="headerlink" title="查看时间"></a>查看时间</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><h3 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="comment"># 显示当前系统日期和时间</span></span><br><span class="line"><span class="built_in">date</span> <span class="string">&quot;2021-01-01 12:12:00&quot;</span> <span class="comment"># 设置系统时间为指定的时间,格式为&quot;YYYY-MM-DD HH:MM:SS&quot;</span></span><br><span class="line"><span class="built_in">date</span> +%Y-%m-%d %H:%M:%S <span class="comment"># 指定格式显示当前时间</span></span><br></pre></td></tr></table></figure><h2 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h2><p>查看时区，管理系统时间和日期的命令</p><h3 id="常用指令-2"><a href="#常用指令-2" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="comment"># 等于 timedatectl status</span></span><br><span class="line">timedatectl status <span class="comment"># 显示当前系统的时间和日期设置，以及时区信息</span></span><br><span class="line">timedatectl list-timezones <span class="comment"># 列出所有可用的时区选项</span></span><br></pre></td></tr></table></figure><h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><h2 id="通过lscpu命令"><a href="#通过lscpu命令" class="headerlink" title="通过lscpu命令"></a>通过lscpu命令</h2><p>lscpu命令是一种提取有关CPU体系结构信息的常用方法。此命令从sysfs的&#x2F;pro &#x2F;cpuinfo文件中提取硬件信息。该信息包括处理器数量，CPU操作模式，套接字，内核，线程，型号名称和虚拟化信息等。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看系统情况&quot;&gt;&lt;a href=&quot;#查看系统情况&quot; class=&quot;headerlink&quot; title=&quot;查看系统情况&quot;&gt;&lt;/a&gt;查看系统情况&lt;/h1&gt;&lt;h2 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;headerlink&quot; title=&quot;ps&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="鸟哥的Linux私房菜" scheme="http://example.com/tags/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>ROS教程</title>
    <link href="http://example.com/2023/07/18/Tutorial/ros-tutorial/"/>
    <id>http://example.com/2023/07/18/Tutorial/ros-tutorial/</id>
    <published>2023-07-18T09:19:28.000Z</published>
    <updated>2023-07-23T14:40:42.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己用的指令"><a href="#自己用的指令" class="headerlink" title="自己用的指令"></a>自己用的指令</h1><p>录制包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ../devel/setup.bash</span><br><span class="line">roscore</span><br><span class="line">roslauch realsense2_camera rs_camera.launch</span><br><span class="line">rosbag record -O test.bag /camera/imu /camera/color/image_raw /camera/aligned_depth_to_color/image_raw</span><br></pre></td></tr></table></figure><p>台式机播放包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line">roscore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo RGBD-Inertial Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo d455 Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml（RGBD-YOLO）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/datasets/d455</span><br><span class="line"><span class="comment"># rosbag reindex test.bag # 笔记本录制移植到台式可能需要这样，否则直接播放提示op缺失</span></span><br><span class="line">rosbag play --clock --pause test.bag</span><br></pre></td></tr></table></figure><p>笔记本播放包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop/</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo RGBD-Inertial Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml </span><br><span class="line"><span class="comment"># YOLO处理时间和闭环检测结果在此处呈现</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/datasets/d455</span><br><span class="line">rosbag play --clock --pause test.bag </span><br><span class="line"><span class="comment"># 等第二个终端输出日志结束，点击地图的Stop停止，终端出现保存点云文件后，在终端中Ctrl+C结束</span></span><br><span class="line"><span class="comment"># 点云文件在代码中已命名关联了，最好不要改，生成文件就叫VSLAMRGBD.pcd，放在~/catkin_ws/src/ORB_SLAM3_dense_loop/下</span></span><br><span class="line"><span class="comment"># 后面点云转八叉树还要用到该点云，所以可以在转化完之后，再把点云重命名为别的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop/</span><br><span class="line">pcl_viewer VSLAMRGBD.pcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/publish_pointcloud</span><br><span class="line">roslaunch publish_pointcloud demo.launch</span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="roscore"><a href="#roscore" class="headerlink" title="roscore"></a>roscore</h2><p>这个命令用于启动ROS的核心功能，包括ROS主节点（master）和参数服务器（parameter server）。在运行其他ROS命令之前，需要先运行roscore。</p><h2 id="rostopic"><a href="#rostopic" class="headerlink" title="rostopic"></a>rostopic</h2><ul><li>这个命令用于查看和发布ROS系统中的话题信息。可以使用rostopic命令来列出当前可用的话题、查看话题的数据类型、发布消息到话题等。<br>rostopic list<br>rostopic list | grep &lt;&gt;<br>rostopic type &lt;&gt;<br>rostopic info &lt;&gt;<br>rostopic hz &lt;&gt;</li></ul><h2 id="rosrun"><a href="#rosrun" class="headerlink" title="rosrun"></a>rosrun</h2><p>这个命令用于在ROS软件包中运行指定的节点程序。通过指定软件包名称和节点名称，可以运行相应的ROS节点。</p><h3 id="调试rosrun"><a href="#调试rosrun" class="headerlink" title="调试rosrun"></a>调试rosrun</h3><launch>    <arg name = "launch_prefix" default="" />    <param name = "use_sim_time" default="" />    <node pkg="message_filter_example" type="complex_node" name="message_filter_example" output="screen" launch-prefix="xterm -e gdb -ex run --args"/></launch><!-- <launch-prefix= "xterm -e gdb --args"> --><launch>  <!-- 设置ORB_SLAM3_dense_yolo节点的参数 -->  <arg name="vocabulary_file" default="Vocabulary/ORBvoc.txt"/>  <arg name="config_file" default="Examples/RGB-D-Inertial/d455-211.yaml"/>  <!-- 启动ORB_SLAM3_dense_yolo节点 -->  <node pkg="ORB_SLAM3_dense_yolo" type="RGBD-Inertial" name="ORB_SLAM3_dense_yolo_node">    <param name="vocabulary_file" value="$(arg vocabulary_file)"/>    <param name="config_file" value="$(arg config_file)"/>  </node></launch><h2 id="rosnode"><a href="#rosnode" class="headerlink" title="rosnode"></a>rosnode</h2><ul><li>这个命令用于查看和管理ROS系统中的节点。可以使用rosnode命令来列出当前运行的节点、查看节点的详细信息、关闭节点等。<br>rosnode list<br>rosnode machine</li></ul><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a>rospack</h2><ul><li>这个命令用于获取关于ROS软件包的信息。可以使用rospack命令来查找软件包的路径、依赖关系、导出的内容等。<br>rospack list</li></ul><h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a>roscd</h2><ul><li>这个命令用于快速切换到ROS软件包的目录。通过指定软件包的名称，可以进入该软件包的目录，方便用户进行包的相关操作。<br>rospack list<br>roscd urdf</li></ul><h2 id="roscd-1"><a href="#roscd-1" class="headerlink" title="roscd"></a>roscd</h2><ul><li>这个命令用于记录、播放和操作ROS系统中的数据包（rosbag文件）。可以使用rosbag命令来记录特定话题的数据、回放数据包、提取数据包中的消息等。</li></ul><h2 id="rosbag"><a href="#rosbag" class="headerlink" title="rosbag"></a>rosbag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rosbag</span><br><span class="line">rosbag info &lt;&gt; <span class="comment"># 包含的话题、消息数量、持续时间等</span></span><br><span class="line">rosbag record -O &lt;bag name&gt;  <span class="comment"># 用于记录ROS系统中的数据</span></span><br><span class="line">rosbag record -O test.bag /camera/imu /camera/color/image_raw /camera/aligned_depth_to_color/image_raw</span><br><span class="line"></span><br><span class="line">rosbag play --clock --pause test.bag</span><br><span class="line">--clock: 使用rosbag文件中的时间戳信息来模拟真实时间</span><br><span class="line">--pause: 这个选项告诉rosbag play在开始播放时暂停，而不是立即开始播放。</span><br><span class="line">rosbag play -a file1.bag file2.bag <span class="comment"># 用于同时播放多个rosbag文件</span></span><br><span class="line">rosbag play -l test.bag <span class="comment"># 播放之前记录的rosbag文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rosbag reindex <span class="comment"># 命令重新生成索引文件</span></span><br><span class="line">rosbag merge file1.bag file2.bag -o merged.bag <span class="comment"># 用于合并多个rosbag文件</span></span><br></pre></td></tr></table></figure><p>rosbag decompress: 用于解压rosbag文件。如果rosbag文件被压缩，可以使用该命令将其解压缩。示例命令：rosbag decompress test.bag。</p><p>rosbag filter: 用于过滤rosbag文件中的消息。可以根据自定义的条件对消息进行过滤，并将过滤后的消息保存到新的rosbag文件中。示例命令：rosbag filter input.bag output.bag “topic &#x3D;&#x3D; ‘&#x2F;topic1’”。</p><h1 id="launch教程"><a href="#launch教程" class="headerlink" title="launch教程"></a>launch教程</h1><launch>    <node .../>       <param .../>    <rosparam .../>    <include .../>    <remap .../>    <arg .../>    <group>  </group></launch><node pkg="package_name" type="executable_node" name="node_name" args="$()" respawn="true" output="sceen"><p>pkg：节点所在功能包的名称package_name；<br>type：节点类型是可执行文件(节点)的名称executable_node；<br>name：节点运行时的名称node_name；<br>args：传递命令行设置的参数；<br>respawn：是否自动重启，true表示如果节点未启动或异常关闭，则自动重启；false则表示不自动重启，默认值为false；<br>output：是否将节点信息输出到屏幕，如果不设置该属性，则节点信息会被写入到日志文件，并不会显示到屏幕上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自己用的指令&quot;&gt;&lt;a href=&quot;#自己用的指令&quot; class=&quot;headerlink&quot; title=&quot;自己用的指令&quot;&gt;&lt;/a&gt;自己用的指令&lt;/h1&gt;&lt;p&gt;录制包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ORB_SLAM</title>
    <link href="http://example.com/2023/07/15/Environment-Configuration/ORB_SLAM_install/"/>
    <id>http://example.com/2023/07/15/Environment-Configuration/ORB_SLAM_install/</id>
    <published>2023-07-15T06:23:09.000Z</published>
    <updated>2023-07-30T14:55:28.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装系统完成"><a href="#安装系统完成" class="headerlink" title="安装系统完成"></a>安装系统完成</h1><h1 id="小鱼一键安装ros"><a href="#小鱼一键安装ros" class="headerlink" title="小鱼一键安装ros"></a>小鱼一键安装ros</h1><p>装好系统，直接使用小鱼一键安装，开机就直接安装<br>会帮助换源<br>同时装好了opencv，Eigen3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros  </span><br></pre></td></tr></table></figure><p>ros-melodic<br>1<br>1<br>2<br>1<br>1<br>重启一下系统</p><p>查看一下opencv和eigen是否安装成功<br>sudo apt list –installed | grep opencv<br>sudo dpkg -l | grep eigen</p><h2 id="安装小工具"><a href="#安装小工具" class="headerlink" title="安装小工具"></a>安装小工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim openssh-server openssh-client net-tools git -y</span><br><span class="line">sed -i <span class="string">&quot;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># sudo vi /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># PermitRootLogin yes </span></span><br><span class="line">/etc/init.d/ssh restart</span><br><span class="line"><span class="comment"># ssh yzx@127.0.0.1</span></span><br></pre></td></tr></table></figure><h2 id="一键安装ORB-SLAM3"><a href="#一键安装ORB-SLAM3" class="headerlink" title="一键安装ORB-SLAM3"></a>一键安装ORB-SLAM3</h2><p>24GB &#x3D; 24576MB<br>28GB &#x3D; 28672MB</p><h1 id="安装D455驱动"><a href="#安装D455驱动" class="headerlink" title="安装D455驱动"></a>安装D455驱动</h1><p>sudo apt-get install libudev-dev pkg-config libgtk-3-dev libusb-1.0-0-dev libglfw3-dev libssl-dev -y<br>sudo apt-get install terminator -y # 安装多窗口终端</p><p>mkdir build &amp;&amp; cd build<br>cmake ..&#x2F; -DBUILD_EXAMPLES&#x3D;true<br>make -j 4 # 需要保证git clone https是通的<br>sudo make install</p><p>librealsene&#x2F;Cmake&#x2F;external_libcurl.cmake<br>GIT_REPOSITORY “<a href="https://github.com/curl/curl.git&quot;">https://github.com/curl/curl.git&quot;</a><br>GIT_REPOSITORY “<a href="mailto:&#103;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a>:curl&#x2F;curl.git” # 需要配置一下git拉取</p><p>（1）连接相机<br>（2）测试相机（方法1）<br>   cd ~&#x2F;librealsense-2.50.0&#x2F;build&#x2F;examples&#x2F;capture<br>   .&#x2F;rs-capture<br>      &#x2F;&#x2F;出现相机拍摄窗口和IMU窗口且终端显示相机参数即为安装成功<br>（3）测试相机（方法2）<br>   cd &#x2F;home&#x2F;qinyibo&#x2F;librealsense-2.50.0&#x2F;build&#x2F;tools&#x2F;realsense-viewer<br>   sudo .&#x2F;realsense-viewer<br>      &#x2F;&#x2F;相机运行软件中出现出现相机拍摄窗口和IMU窗口并且可以设置模式与参数即为成功<br>      &#x2F;&#x2F;右上角出现Dismiss错误时，可以重新插拔，但即使不出现错误，其Motion Module打开时依旧报错，但貌似不影响使用，暂时不管<br>         Severity:Error<br>         Description:Motion Module failure</p><p>while true; do free -h | tail ; sleep 1; done<br>while true; do rostopic list;echo “————-“  ; sleep 1; done</p><p>rostopic list | tail</p><h2 id="跑bag包测试"><a href="#跑bag包测试" class="headerlink" title="跑bag包测试"></a>跑bag包测试</h2><ol><li>roscore</li></ol><p>cd $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM3&#x2F;build&#x2F;<br>2. source $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM3&#x2F;build&#x2F;devel&#x2F;setup.bash</p><p>source $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_pigg&#x2F;Examples_old&#x2F;ROS&#x2F;ORB_SLAM3_dense_yolo&#x2F;build&#x2F;devel&#x2F;setup.bash</p><p>cd $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;</p><ol><li><p>rosrun ORB_SLAM3 Mono Vocabulary&#x2F;ORBvoc.txt Examples_old&#x2F;Monocular-Inertial&#x2F;EuRoC.yaml<br>&#x2F;&#x2F;运行ORB-SLAM3,并在ORB_SLAM3下产生运行结果（关键帧轨迹文件）<br>&#x2F;&#x2F;如果运行完记录包，出现跟踪局部地图失败提示，好像是因为运行快没有提取到特征点，目前解决方案是重新运行跑一次。<br>&#x2F;&#x2F;跑完记录包，本运行终端不会停止运行，暂时只能Ctrl+C结束，会有qt报错和核心转储报错，暂时无法解决。</p></li><li><p>在ROS记录包目录下打开终端3，运行记录包<br>rosbag play –pause MH_01_easy.bag &#x2F;cam0&#x2F;image_raw:&#x3D;&#x2F;camera&#x2F;image_raw &#x2F;imu0:&#x3D;&#x2F;imu<br>&#x2F;&#x2F;选择下载的Euroc数据集的ROS记录包<br>&#x2F;&#x2F;设置发布的话题名称，要与ORB-SLAM3订阅的话题一样<br>&#x2F;&#x2F;pause代表用space可以控制开始和暂停跑包</p></li></ol><h2 id="双系统的问题"><a href="#双系统的问题" class="headerlink" title="双系统的问题"></a>双系统的问题</h2><ol><li>没有网卡<ol><li>AX211 160MHZ</li></ol></li><li>没有显卡驱动</li><li>没有输入法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vi /etc/apt/sources.list</span><br><span class="line">sudo apt-get update <span class="comment"># 更新软件包列表,从软件源中获取最新的软件包信息，并将其存储在本地的软件包列表中。</span></span><br><span class="line">sudo apt-get upgrade <span class="comment"># 升级已安装的软件包的命令，它会检查本地软件包列表中的软件包是否有更新的版本，如果有的话就会将其升级到最新版本。</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>ps aux 命令会显示所有用户的所有进程，并且以用户为基础显示进程的详细信息。<br>sudo dpkg -i XXX(你下载的安装包名).deb</p><p>sudo apt list –installed | grep opencv<br>sudo dpkg -l | grep eigen</p><p>apt list # 列出所有已安装的软件包。<br>apt list –installed # 列出所有已安装的软件包。<br>apt list –upgradable # 列出可升级的软件包</p><p>tar -zxvf FileName.tar.gz               # 解压<br>tar -zcvf FileName.tar.gz DirName       # 将DirName和其下所有文件（夹）压缩</p><p>tar -zcvf orb_slam.tar.gz orb_slam</p><p>sudo apt install libglew-dev</p><h2 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h2><p>Pangolin<br>opencv<br>Eigen3</p><h1 id="安装clash-linux"><a href="#安装clash-linux" class="headerlink" title="安装clash linux"></a>安装clash linux</h1><h1 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h1><p>打开软件安装，更新，永远停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os-specific listings first</span></span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/osx-homebrew.yaml osx</span><br><span class="line"></span><br><span class="line"><span class="comment"># generic</span></span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/base.yaml</span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/python.yaml</span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/ruby.yaml</span><br><span class="line">gbpdistro file:///home/yzx/rosdistro/releases/fuerte.yaml fuerte</span><br><span class="line"><span class="comment"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span></span><br></pre></td></tr></table></figure><p>FUERTE_GBPDISTRO_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;‘ <br>    ‘releases&#x2F;fuerte.yaml’</p><p>REP3_TARGETS_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;releases&#x2F;targets.yaml’</p><p>DEFAULT_INDEX_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;index-v4.yaml’</p><p>.&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;mono_inertial_euroc .&#x2F;Vocabulary&#x2F;ORBvoc.txt .&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;EuRoC.yaml &#x2F;home&#x2F;yzx&#x2F;MH01 .&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;EuRoC_TimeStamps&#x2F;MH01.txt dataset-MH01_monoi</p><h1 id="主要头文件所在位置"><a href="#主要头文件所在位置" class="headerlink" title="主要头文件所在位置"></a>主要头文件所在位置</h1><p>&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;include<br>&#x2F;usr&#x2F;include&#x2F;pcl-1.8&#x2F;</p><p>“${workspaceFolder}&#x2F;<strong>“,<br>“&#x2F;usr&#x2F;include&#x2F;</strong>“,<br>“&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;include&#x2F;**”</p><h2 id="第一个libtorch例子"><a href="#第一个libtorch例子" class="headerlink" title="第一个libtorch例子"></a>第一个libtorch例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;torch/torch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  torch::Tensor tensor = torch::<span class="built_in">eye</span>(<span class="number">3</span>);</span><br><span class="line">  std::cout &lt;&lt; tensor &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.0</span> FATAL_ERROR)</span><br><span class="line"><span class="built_in">project</span>(dcgan)</span><br><span class="line"></span><br><span class="line"><span class="built_in">find_package</span>(Torch REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_executable</span>(dcgan dcgan.cpp)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(dcgan <span class="string">&quot;$&#123;TORCH_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">set_property</span>(TARGET dcgan PROPERTY CXX_STANDARD <span class="number">14</span>)</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/142014944">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a></p><p><a href="https://opclash.com/fenxiang/302.html">https://opclash.com/fenxiang/302.html</a></p><p><a href="https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97">https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97</a></p><p><a href="https://blog.csdn.net/m0_58402697/article/details/122298129">https://blog.csdn.net/m0_58402697/article/details/122298129</a><br><a href="https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html">https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html</a></p><p><a href="https://pytorch.org/cppdocs/installing.html">libtorch总教程</a><br><a href="https://pytorch.org/tutorials/advanced/cpp_frontend.html">libtorch简单的介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装系统完成&quot;&gt;&lt;a href=&quot;#安装系统完成&quot; class=&quot;headerlink&quot; title=&quot;安装系统完成&quot;&gt;&lt;/a&gt;安装系统完成&lt;/h1&gt;&lt;h1 id=&quot;小鱼一键安装ros&quot;&gt;&lt;a href=&quot;#小鱼一键安装ros&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Origin2022</title>
    <link href="http://example.com/2023/06/07/Tutorial/Origin2022/"/>
    <id>http://example.com/2023/06/07/Tutorial/Origin2022/</id>
    <published>2023-06-07T09:19:28.000Z</published>
    <updated>2023-06-08T13:56:51.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整图片的方法"><a href="#调整图片的方法" class="headerlink" title="调整图片的方法"></a>调整图片的方法</h1><ol><li>坐标轴范围，坐标轴字体，网格显示，点的间隔，坐标轴轴线粗细</li><li>子图坐标轴，子图像大小<ol><li>30 8</li><li>38 44</li></ol></li><li>线条颜色，线条粗细，线条类型</li><li>修改图层像素</li><li>高级导出</li></ol><p>Best Path<br>Iterations</p><h1 id="柱状图颜色"><a href="#柱状图颜色" class="headerlink" title="柱状图颜色"></a>柱状图颜色</h1><p>#FDC897<br>253,200,151<br>#9DD79D<br>157,215,157<br>#C2B2D6</p><h1 id="转化为折线图颜色"><a href="#转化为折线图颜色" class="headerlink" title="转化为折线图颜色"></a>转化为折线图颜色</h1><p>#FA8111<br>#46AC46<br>#9579B8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;调整图片的方法&quot;&gt;&lt;a href=&quot;#调整图片的方法&quot; class=&quot;headerlink&quot; title=&quot;调整图片的方法&quot;&gt;&lt;/a&gt;调整图片的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;坐标轴范围，坐标轴字体，网格显示，点的间隔，坐标轴轴线粗细&lt;/li&gt;
&lt;li&gt;子图坐标轴</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>prompt</title>
    <link href="http://example.com/2023/04/20/Others/prompt_english/"/>
    <id>http://example.com/2023/04/20/Others/prompt_english/</id>
    <published>2023-04-20T12:22:27.000Z</published>
    <updated>2023-05-13T05:23:22.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>I will ask you questions, even though my English grammar is poor. Please answer my questions in the following way:</p><ol><li>Modify the grammar of my questions if they are incorrect.You can modify it from Correcting subject-verb agreement errors、Using the correct verb tense、Placing modifiers correctly、Using proper punctuation</li><li>Answer my questions to the best of your ability.<br>my question is:<br>In integrate GA and ACO,I use GA initial solutions ,but my ACO can’t get initial solutions,it use Pheromone generation path,how can i improve it?</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/wikieden/Awesome-ChatGPT-Prompts-CN">https://github.com/wikieden/Awesome-ChatGPT-Prompts-CN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;p&gt;I will ask you questions, even though my English grammar is poor. Please a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>app总结</title>
    <link href="http://example.com/2023/04/16/Others/app/"/>
    <id>http://example.com/2023/04/16/Others/app/</id>
    <published>2023-04-16T07:46:00.000Z</published>
    <updated>2023-04-16T09:04:03.092Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端开发知识的一些总结</p><p>大前端——泛GUI交互<br>    HTML<br>    CSS<br>    javascript<br>    TypeScript<br>    nodejs<br>    原生app开发<br>        开发adroid ios<br>        facebook<br>            React native</p><pre><code>    google        dart        flutterwebapp开发    Vue    React混合开发HybirdAPP    微信公众号    小程序    Electron        H5页面嵌入到桌面段应用</code></pre><p>ES6<br>React<br>Promise<br>html5<br>Css3<br>Axios<br>Jquery<br>Vue Router<br>Node.js<br>AJAX</p><p>webpack、rollup、vite</p><h1 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h1><ol><li>Android Studio<ol><li>JAVA</li><li>Kotlin</li></ol></li></ol><h1 id="跨端开发"><a href="#跨端开发" class="headerlink" title="跨端开发"></a>跨端开发</h1><ol><li>uniapp<ol><li>HBuildX</li></ol></li><li>Flutter<ol><li>dart </li><li>Google 公司开发的一款跨平台的 UI 框架</li></ol></li><li>Taro <ol><li>京东</li></ol></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://flutter.cn/">Flutter官网</a><br><a href="https://www.dcloud.io/">uni-app官网</a><br><a href="https://developer.android.google.cn/?hl=zh-cn">Android Studio</a><br><a href="https://blog.csdn.net/SherlockStark/article/details/129298768?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8=">Android Studio 2022.1.1版本 保姆级安装教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于前端开发知识的一些总结&lt;/p&gt;
&lt;p&gt;大前端——泛GUI交互&lt;br&gt;    HTML&lt;br&gt;    CSS&lt;br&gt;    javascript&lt;br&gt;    TypeScript&lt;br&gt;    nodejs&lt;br&gt;    原生app开发&lt;br&gt;        开发adr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ffmpeg</title>
    <link href="http://example.com/2023/04/14/Project/ffmpeg/"/>
    <id>http://example.com/2023/04/14/Project/ffmpeg/</id>
    <published>2023-04-14T14:29:24.000Z</published>
    <updated>2023-07-06T12:52:06.591Z</updated>
    
    <content type="html"><![CDATA[<p>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264</p><p>fmpeg-master-latest-win64-gpl-shared.zip</p><p>avcodec.lib;avdevice.lib;avfilter.lib;avformat.lib;avutil.lib;swresample.lib;swscale.lib;postproc.lib</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MSBuild属性宏:</span><br><span class="line">- $<span class="comment">(OutDir)</span>：输出目录，用于存放生成的可执行文件或库文件。</span><br><span class="line">- $<span class="comment">(ProjectName)</span>：项目名称，通常与项目文件名相同。</span><br><span class="line">- $<span class="comment">(Configuration)</span>：当前项目配置，例如Debug或Release。</span><br><span class="line">- $<span class="comment">(Platform)</span>：当前项目平台，例如Wi<span class="symbol">n32</span>或x<span class="number">64</span>。</span><br><span class="line">- $<span class="comment">(SolutionDir)</span>：解决方案目录，包含解决方案文件所在的路径。</span><br><span class="line">- $<span class="comment">(ProjectDir)</span>：项目目录，包含项目文件所在的路径。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$<span class="comment">(SolutionDir)</span></span><br><span class="line">$<span class="comment">(SolutionExt)</span></span><br><span class="line">$<span class="comment">(SolutionFileName)</span></span><br><span class="line">$<span class="comment">(SolutionName)</span></span><br><span class="line">$<span class="comment">(SolutionPath)</span></span><br></pre></td></tr></table></figure><p>FFmpeg一共包含8个库：<br><strong>avcodec：编解码（最重要的库）。</strong><br><strong>avformat：封装格式处理。</strong><br>avfilter：滤镜特效处理。<br>avdevice：各种设备的输入输出。<br><strong>avutil：工具库（大部分库都需要这个库的支持）。</strong><br>postproc：后加工。<br>swresample：音频采样数据格式转换。<br><strong>swscale：视频像素数据格式转换。</strong><br>其中加粗的库为本课程涉及到的库。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ffmpeg.org/">ffmpeg官网</a></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><a href="https://blog.csdn.net/TracelessLe/article/details/107362505">Ubuntu上安装ffmpeg</a><br><a href="https://blog.csdn.net/TracelessLe/article/details/107522845">Ubuntu下x264库编译安装</a><br><a href="https://blog.csdn.net/qq_44054791/article/details/127861823">编译ffmpeg错误：ERROR: x264 not found using pkg-config</a><br><a href="https://www.lixian.fun/4237.html">编译安装libx264库遇到Found no assembler Minimum version is nasm-</a><br><a href="https://www.nasm.us/">nasm官网</a><br><a href="https://www.nasm.us/pub/nasm/releasebuilds/">nasm下载链接</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">ffmpeg windows下载地址</a><br><a href="https://blog.csdn.net/ustc_sse_shenzhang/article/details/102546753">FFmpeg三种版本（static、shared、dev）和实际操作举例</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.&amp;#x2F;configure –prefix&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264&lt;/</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>google test</title>
    <link href="http://example.com/2023/04/14/Project/google-test/"/>
    <id>http://example.com/2023/04/14/Project/google-test/</id>
    <published>2023-04-14T11:40:49.000Z</published>
    <updated>2023-07-06T12:52:03.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装教程"><a href="#1-安装教程" class="headerlink" title="1.安装教程"></a>1.安装教程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:google/googletest.git</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">make -j all</span><br><span class="line">find . -name &quot;*.a&quot; # 查看静态链接库是否生成</span><br><span class="line">make insatll</span><br><span class="line">ls -l /user/local/ # 查看是否安装过去了</span><br></pre></td></tr></table></figure><h1 id="2-demo测试"><a href="#2-demo测试" class="headerlink" title="2. demo测试"></a>2. demo测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd googletests/samples</span><br><span class="line">g++ ../src/gtest_main.cc sample1.cc sample1_unittest.cc -o sample1 -lgtest -lgmock -lpthread -std=c++14 # 一定要使用C++11以上，C++14或者C++17才能编译通过</span><br></pre></td></tr></table></figure><p>样例分析：<br>gtest_main.cc: 测试主程序的入口<br>sample1.cc：等待测试的源码<br>sample1_unittest.cc: 测试用例</p><h1 id="3-写一个自己的测试用例"><a href="#3-写一个自己的测试用例" class="headerlink" title="3.写一个自己的测试用例"></a>3.写一个自己的测试用例</h1><p>1.有一个包含GTEST_API_的主函数，引入testing::InitGoogleTest<br>2.包含头文件gtest&#x2F;gtest.h<br>3.使用TEST宏定义，第一个参数是test suite的名字，第二个参数是test case的名字，写自己的测试函数<br>4.在测试函数中使用EXPECT_EQ,EXPECT_NE,EXPECT_LT,EXPECT_LE,EXPECT_GT,EXPECT_GE<br>5.在主函数中调用RUN_ALL_TESTS()，返回值是0表示成功，非0表示失败<br>6.编译，链接gtest库，运行</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://google.github.io/googletest/">官方文档</a><br><a href="https://github.com/google/googletest">github仓库</a><br><a href="https://blog.csdn.net/wdcyf15/article/details/108855960">Google Test(GTEST)使用入门（1）- 下载编译安装执行</a><br><a href="https://blog.csdn.net/qq_34525916/article/details/113752768">Ubuntu 16.04安装gtest遇坑，成功安装及使用记录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装教程&quot;&gt;&lt;a href=&quot;#1-安装教程&quot; class=&quot;headerlink&quot; title=&quot;1.安装教程&quot;&gt;&lt;/a&gt;1.安装教程&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>EIseg环境安装</title>
    <link href="http://example.com/2023/03/23/Environment-Configuration/EIseg_install/"/>
    <id>http://example.com/2023/03/23/Environment-Configuration/EIseg_install/</id>
    <published>2023-03-23T06:00:50.000Z</published>
    <updated>2023-07-14T14:00:56.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装python"><a href="#1-安装python" class="headerlink" title="1. 安装python"></a>1. 安装python</h1><p>勾选安装环境变量</p><h1 id="2-安装anaconda"><a href="#2-安装anaconda" class="headerlink" title="2. 安装anaconda"></a>2. 安装anaconda</h1><ol><li><p>不要勾选安装环境变量</p></li><li><p>安装后增加环境变量<br>E:\Anaconda<br>E:\Anaconda\Scripts<br>E:\Anaconda\Library\mingw-w64\bin<br>E:\Anaconda\Library\usr\bin<br>E:\Anaconda\Library\bin</p></li></ol><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><ol><li><p>anaconda换源</p><ol><li>先打开第一次anaconda，会创建.condarc</li><li>在C:\Users{username} 文件夹下面修改.condarc</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><ol start="3"><li><p>conda clean -i</p></li><li><p>检测是否换源成功</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="comment"># 如果pytorch安装成功即可导入</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available()) <span class="comment"># 查看CUDA是否可用</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.device_count()) <span class="comment"># 查看可用的CUDA数量</span></span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda) <span class="comment"># 查看CUDA的版本号</span></span><br></pre></td></tr></table></figure><h1 id="3-安装EIseg"><a href="#3-安装EIseg" class="headerlink" title="3. 安装EIseg"></a>3. 安装EIseg</h1><ol><li>创建自己的环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境所用的python版本需要在后面指定，如果不指定默认Anaconda自带python版本</span></span><br><span class="line"><span class="comment"># doccano 是环境名称，可根据自己命名区分不同自己的环境</span></span><br><span class="line">conda create -n eiseg_env python=3.10</span><br><span class="line"><span class="comment"># 激活自己的环境</span></span><br><span class="line">conda activate ant</span><br></pre></td></tr></table></figure><ol start="2"><li><p>切换到新创建的环境中，打开open Terminal</p></li><li><p>安装PaddlePaddle，是依赖环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装EIseg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install eiseg -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></li><li><p>启动<br>直接在命令行中输入eiseg</p></li></ol><h1 id="配置EIseg"><a href="#配置EIseg" class="headerlink" title="配置EIseg"></a>配置EIseg</h1><ol><li>只保存彩色图片</li><li>编辑快捷键<ol><li>前后移动</li><li>自动保存</li><li>删除所有多边形</li></ol></li><li>保存路径不能有中文</li></ol><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><ol><li>正负样本点</li><li>转化为矩形，拖动</li><li>删除矩形</li></ol><h1 id="标注时候需要注意"><a href="#标注时候需要注意" class="headerlink" title="标注时候需要注意"></a>标注时候需要注意</h1><h1 id="每次打开操作"><a href="#每次打开操作" class="headerlink" title="每次打开操作"></a>每次打开操作</h1><ol><li>选择保存类型，只保留伪彩色，coco格式</li><li>加载模型</li><li>打开文件夹</li><li>载入标签</li><li>标注</li><li>空格，转化为矩形</li><li>下一张</li></ol><h1 id="anaconda常用指令"><a href="#anaconda常用指令" class="headerlink" title="anaconda常用指令"></a>anaconda常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda config --show <span class="comment"># 查看conda的配置，确认channels</span></span><br><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br><span class="line">conda config --get channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda config --show channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda list <span class="comment"># 当前安装的包列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未查看</span></span><br><span class="line">conda update -n base conda</span><br><span class="line">conda install --<span class="built_in">yes</span> --file requirements.txt</span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>conda install –use-local pytorch-0.4.0-py35_cuda8.0.61_cudnn7.1.2_1.tar.bz2<br>conda remove -n 环境名字 –all</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[Anaconda超详细安装教程（Windows环境下）]<a href="https://blog.csdn.net/fan18317517352/article/details/123035625">https://blog.csdn.net/fan18317517352/article/details/123035625</a> <br/><br>[新手教程一：Anaconda新建开发环境]<a href="https://blog.csdn.net/qq_42573052/article/details/113770662">https://blog.csdn.net/qq_42573052/article/details/113770662</a> <br/><br><a href="https://blog.csdn.net/jasneik/article/details/114227716">anaconda 换清华镜像源 windows</a> <br/><br><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a> <br/><br><a href="https://blog.csdn.net/qq_43382635/article/details/127124980">Anaconda之导出&#x2F;导出配置好的虚拟环境</a> <br/><br><a href="https://blog.csdn.net/qq_37541097/article/details/120154543">EISeg工具对应博文</a> <br/><br><a href="https://github.com/PaddlePaddle/PaddleSeg/blob/release/2.7/README_CN.md">EIseg官方安装说明</a> <br/><br><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/index_cn.html">飞桨安装参考文档</a> <br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装python&quot;&gt;&lt;a href=&quot;#1-安装python&quot; class=&quot;headerlink&quot; title=&quot;1. 安装python&quot;&gt;&lt;/a&gt;1. 安装python&lt;/h1&gt;&lt;p&gt;勾选安装环境变量&lt;/p&gt;
&lt;h1 id=&quot;2-安装anaconda&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>minio 环境配置</title>
    <link href="http://example.com/2023/01/19/Environment-Configuration/Minio_install/"/>
    <id>http://example.com/2023/01/19/Environment-Configuration/Minio_install/</id>
    <published>2023-01-19T10:40:28.000Z</published>
    <updated>2023-04-20T04:16:12.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1)按指令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable&quot;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce -y</span><br></pre></td></tr></table></figure><p>2)查看是否安装成功<br>docker version</p><h1 id="安装minio"><a href="#安装minio" class="headerlink" title="安装minio"></a>安装minio</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 9000:9000 -p 9001:9001 --name minio \</span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=minio&quot; \</span><br><span class="line">-e &quot;MINIO_SECRET_KEY=minio123&quot; \</span><br><span class="line">-v /home/admin/minio/data:/data \</span><br><span class="line">-v /home/admin/minio/config:/root/.minio \</span><br><span class="line">minio/minio server /data \</span><br><span class="line">--console-address &quot;:9000&quot; --address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p>MINIO_ACCESS_KEY账号<br>MINIO_SECRET_KEY密码</p><p><a href="http://39.106.72.165:9000/">http://39.106.72.165:9000</a><br>本地：<br><a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cloud.tencent.com/developer/article/2057224">https://cloud.tencent.com/developer/article/2057224</a><br><a href="https://www.minio.org.cn/download.shtml#/linux">https://www.minio.org.cn/download.shtml#/linux</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;&lt;p&gt;1)按指令安装&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu通用教程</title>
    <link href="http://example.com/2023/01/15/Environment-Configuration/ubuntu20/"/>
    <id>http://example.com/2023/01/15/Environment-Configuration/ubuntu20/</id>
    <published>2023-01-15T13:40:01.000Z</published>
    <updated>2023-07-16T04:22:09.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装VMware中出现的问题"><a href="#装VMware中出现的问题" class="headerlink" title="装VMware中出现的问题"></a>装VMware中出现的问题</h1><p>本地环境，win11+Vmware14<br>先安装了VMware14，安装过程没有问题，导入虚拟机，启动以后，电脑直接蓝屏，开机还是这个现象</p><p>网上搜索发现是没有启动虚拟工具</p><h1 id="安装ubuntu后需要做的"><a href="#安装ubuntu后需要做的" class="headerlink" title="安装ubuntu后需要做的"></a>安装ubuntu后需要做的</h1><ol><li>换源</li><li>更换时区</li><li>安装vim</li><li>安装ipconfig</li><li>安装ssh</li><li>配置历史记录<ol><li>echo ‘HISTTIMEFORMAT&#x3D;”%F %T “‘ &gt;&gt; ~&#x2F;.bashrc</li><li>source ~&#x2F;.bashrc</li></ol></li><li>配置静态ip – 不需要？</li><li>安装git</li></ol><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加阿里源</span></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">#添加清华源</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><ol><li>准备工作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install sudo</span><br><span class="line">apt-get install vim -y</span><br><span class="line">passwd <span class="comment"># 修改密码</span></span><br></pre></td></tr></table></figure></li><li>安装openssh<br>sudo apt-get install openssh-server openssh-client -y</li><li>修改ssh配置文件<br>sudo vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>PermitRootLogin yes<br>（默认为#PermitRootLogin prohibit-password）前面的#号要放开</li><li>启动服务<br>&#x2F;etc&#x2F;init.d&#x2F;ssh restart</li><li>连接测试<br>ssh user@[ip] -p [端口]<br>ssh <a href="mailto:&#x75;&#x73;&#x65;&#114;&#64;&#x31;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#48;&#x2e;&#51;">&#x75;&#x73;&#x65;&#114;&#64;&#x31;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#x2e;&#48;&#x2e;&#51;</a> -p 22</li><li>vscode配置<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  HostName <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  <span class="keyword">User</span> <span class="title">username</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a><br>wget <a href="https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz">https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz</a></p><p>tar -C &#x2F;usr&#x2F;local -xzf go1.19.5.linux-amd64.tar.gz</p><p>vim &#x2F;etc&#x2F;profile<br>source &#x2F;etc&#x2F;profile<br>export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go<br>#export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin<br>export PATH&#x3D;$PATH:$GOROOT&#x2F;bin<br>export GOPATH&#x3D;&#x2F;yzx<br>export GOBIN&#x3D;$GOPATH&#x2F;bin<br>export GOPROXY&#x3D;<a href="https://goproxy.cn/,direct">https://goproxy.cn/,direct</a></p><p><a href="https://goproxy.io/zh/">https://goproxy.io/zh/</a><br><a href="https://goproxy.cn/">https://goproxy.cn/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init [工程名字]</span><br><span class="line">go mod tidy  # 刷新mod</span><br><span class="line">go mod vender</span><br><span class="line">go get [跟着整个github目录]</span><br></pre></td></tr></table></figure><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>下错版本<br>go1.19.5.linux-arm64.tar.gz<br>报错:<br>bash: &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&#x2F;go: cannot execute binary file: Exec format error</p><p>VScode无法调试go<br>安装dlv</p><p>cgo: C compiler “gcc” not found: exec: “gcc”: executable file not found in $PATH (exit status 2)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/142014944">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a><br><a href="https://blog.csdn.net/liangcsdn111/article/details/115405223">https://blog.csdn.net/liangcsdn111/article/details/115405223</a><br><a href="https://www.jianshu.com/p/2802d71ab9e9">https://www.jianshu.com/p/2802d71ab9e9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装VMware中出现的问题&quot;&gt;&lt;a href=&quot;#装VMware中出现的问题&quot; class=&quot;headerlink&quot; title=&quot;装VMware中出现的问题&quot;&gt;&lt;/a&gt;装VMware中出现的问题&lt;/h1&gt;&lt;p&gt;本地环境，win11+Vmware14&lt;br&gt;先安装</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Qt5教程</title>
    <link href="http://example.com/2022/12/31/Course/Qt5_Course/"/>
    <id>http://example.com/2022/12/31/Course/Qt5_Course/</id>
    <published>2022-12-31T05:34:44.000Z</published>
    <updated>2022-12-31T05:43:16.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt需要学习的知识点"><a href="#Qt需要学习的知识点" class="headerlink" title="Qt需要学习的知识点"></a>Qt需要学习的知识点</h1><p>QML<br>Qt Quick<br>Qpython</p><h1 id="Qt相关不了解的"><a href="#Qt相关不了解的" class="headerlink" title="Qt相关不了解的"></a>Qt相关不了解的</h1><p>QRegExp<br>QButtonGroup<br>QFactoryInterface<br>QStandardItemModel<br>Qt::WA_inputmethodenabled</p><p>QDomElement<br>QDomDocument<br>QDomNode</p><p>#include &lt;QtXml&#x2F;qtxmlglobal.h&gt;</p><p>安装过滤器</p><p>Q_DECL_EXPORT<br>Q_DECL_IMPORT<br>Q_PROPERTY</p><p>qt的继承关系</p><h1 id="C-中不了解的"><a href="#C-中不了解的" class="headerlink" title="C++中不了解的"></a>C++中不了解的</h1><p>stdcall,cdecl,fastcall,<br>thiscall, naked call</p><p>afx_msg</p><p>afxwin.h<br>windows.h<br>ODBC类</p><p>stdafx.h</p><p>继承自己单例的数组<br>奇异递归模板模式CRTP</p><p>dynamic_cast&lt;&gt;()</p><h1 id="其他需要了解的知识"><a href="#其他需要了解的知识" class="headerlink" title="其他需要了解的知识"></a>其他需要了解的知识</h1><p>Microsoft XNA<br>WPF<br>xaml<br>MFC<br>electron<br>Win32 SDK<br>STL,WTL<br>LCU客户端<br>CEF架构<br>WinForms<br>C++ builder<br>GTK+<br>libcef<br>Unity<br>桌面应用程序<br>桌面的客户端软件<br>Hive</p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>minicsv</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt需要学习的知识点&quot;&gt;&lt;a href=&quot;#Qt需要学习的知识点&quot; class=&quot;headerlink&quot; title=&quot;Qt需要学习的知识点&quot;&gt;&lt;/a&gt;Qt需要学习的知识点&lt;/h1&gt;&lt;p&gt;QML&lt;br&gt;Qt Quick&lt;br&gt;Qpython&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>抢票系统</title>
    <link href="http://example.com/2022/11/11/Project/Ticketing_system/"/>
    <id>http://example.com/2022/11/11/Project/Ticketing_system/</id>
    <published>2022-11-11T11:47:19.000Z</published>
    <updated>2022-12-31T05:31:53.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>抢票的要素：<br>时间- 确定列车的剩余票数<br>区间- </p><h1 id="后台开发导论"><a href="#后台开发导论" class="headerlink" title="后台开发导论"></a>后台开发导论</h1><h2 id="1接入层服务"><a href="#1接入层服务" class="headerlink" title="1接入层服务"></a>1接入层服务</h2><p>通常把网络中直接面向用户连接的部分称为接入层<br>对外提供一体服务，对内实现负载均衡</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>网络接入-DNS<br>均衡算法:<br>就近+同运营商接入+轮询<br>存在问题:<br>1.域名解析系统的缓存问题(缓存的ip失效将导致出错)<br>2.公网ip问题<br>应用场景:<br>解决服务接入的第一跳</p><h3 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h3><p>LvS : Linux Virtual Server , Linux上通用的负载均衡技术<br>可以将内部的100个IP变成一个IP</p><h4 id="LVS-DR"><a href="#LVS-DR" class="headerlink" title="LVS-DR"></a>LVS-DR</h4><p>1.Virtual Server via Direct Routing (VS&#x2F;DR)<br>通过改写请求报文的MAC地址，将请求发送到真实服务器，而真实服务器将响应直接返E种方法没有IP隧道的开销，对集群中的真实服务器也没有必须支持IP隧道协议的要求，但与真实服务器都有一块网卡连在同一物理网段上。</p><p>3.Virtual Server via Network Address Translation (VS&#x2F;NAT)<br>通过网络地址转换，调度器重写请求报文的目标地址，将请求分派给后端的真实服务器;响应报文通过调度器时，报文的源地址被重写，再返回给客户，完成整个负载调度过程。</p><p>均衡算法︰<br>RR、Weight RR、地址hash、最少连接等<br>优点︰<br>1.成本低性能高，抗负载能力强<br>2.业务透明，可应用范围广<br>3.基于内核网络协议栈，稳定可靠<br>应用场景∶<br>解决网络接入的第二跳，一般称为四层负载均衡<br>问题：<br>如果连接的服务器出现问题，那么客户端的TCP请求直接失败了</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="负载均衡-反向代理"><a href="#负载均衡-反向代理" class="headerlink" title="负载均衡-反向代理"></a>负载均衡-反向代理</h4><p>正向代理:被代理方是客户端<br>反向代理:被代理方是服务端，服务端隐藏在反向代理后面</p><h4 id="反向代理-nginx"><a href="#反向代理-nginx" class="headerlink" title="反向代理-nginx"></a>反向代理-nginx</h4><p>nginx可以通过解析http协议包来路由流量 ( http:域名，url , method )</p><h4 id="反向代理-手Q接入层SSO"><a href="#反向代理-手Q接入层SSO" class="headerlink" title="反向代理-手Q接入层SSO"></a>反向代理-手Q接入层SSO</h4><p>就近接入（相同运营商和相同地域会更快)测速+调度两套系统<br>连接保持、推送支持<br>反向代理<br>信道安全(加密防监听，鉴权防伪装，cookie防重放)<br>流量优化、数据压缩、智能聚合、精简协议<br>容灾容错<br>异常发现和过载保护</p><h4 id="负载均衡-七层"><a href="#负载均衡-七层" class="headerlink" title="负载均衡-七层"></a>负载均衡-七层</h4><p>均衡算法∶<br>RR、Weight RR、ip_hash、url_hash<br>优点︰<br>1.可针对应用本身来做调度策略<br>2支持故障剔除<br>应用场景∶<br>解决网络接入的第三跳，一般称为七层负载均衡<br>好处：<br>因为连接是和代理建立的，当机器出现问题的时候，连接是和代理保持的，可以用反向代理去轮询有没有好的机器<br>可以更加精细化管理，但是性能没有LVS那么高</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通常把网络中直接面向用户连接或访问网络的部分称为接入层<br>接入层常用技术:DNS、LVS、反向代理<br>比较大型的在线应用，通常这三种技术都会同时使用</p><p>一般DNS和LVS都由公司级别服务提供<br>GSLB域名管理平台5.1<br>腾讯云|DNSPOD<br>负载均衡CLB|Cloud Lo&amp;d Balancer<br>完整的接入层技术应该包括这三种，日常开发中我们说的接入层一般指反向代理。</p><h2 id="2应用服务"><a href="#2应用服务" class="headerlink" title="2应用服务"></a>2应用服务</h2><p>网络接入<br>业务逻辑<br>数据存储<br>运维保障<br>业务需求决定方案</p><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>小型网站–单机架构<br>使用到的技术:LAMP<br>Linux + Apache + Mysql + Php</p><p>缓存与读写分离<br>基于二八定律引入缓存<br>(高频访问数据提高访问速度）<br>数据库读多写少-&gt;读写分离<br>（读多写少，分离提速)</p><p>动静分离</p><p>引入CDN<br>(将静态资源的访问分流到用户附近的结点)</p><p>集群化部罢</p><p>通过负载均衡和反向<br>将请求分散到多个服方命果肝十</p><p>服务拆分―业务拆分<br>项目规模增长，维护难度提高:<br>任意修改都需要整体发布<br>任意缺陷都会影响整个系统<br>解决方案:<br>将应用按业务模块拆分<br>分而治之降低复杂度<br>缩小影响<br>明确职责<br>引入消息队列进一步解耦</p><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><h2 id="运营保障"><a href="#运营保障" class="headerlink" title="运营保障"></a>运营保障</h2><p>运营保障–微服务框架</p><p>组件化、框架化消除重复劳动微服务框架<br>1.RPC<br>2.名字服务<br>3．配置服务<br>4.日志、监控<br>5．链路追踪</p><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><h3 id="全链路追踪"><a href="#全链路追踪" class="headerlink" title="全链路追踪"></a>全链路追踪</h3><p>什么是全链路追踪<br>系统监控的三种手段:<br>Log日志——记录离散事件，包含程序在事件发生时详细信息<br>Metrics指标——记录可聚合的数据，经过汇总后成为我们关心的指标(QPS、DAU) ——monitor<br>Tracing链路追踪——记录单个请求的处理流程，其中包括服务调用和处理时长等信息。<br>Tracing的特点是，它所记录的信息是一个请求范围内的。</p><p>微服务时代:<br>单体应用被拆分为多个微服务，导致服务数量增多、内部调用链复杂化，手Q后端就有600多个模块，涉及到的服务器更是不计其数。</p><p>随着服务数量的增多和内部调用链的复杂化，仅凭借日志和指标监控进行问题排查或是性能分析的时候，无异于盲人摸象。<br>全链路追踪可以帮助我们做到“See the Whole Picture” .</p><p>Logging很重要，但存在问题<br>分布式系统中日志隔离问题:<br>链路缺乏统一标志:SSO : seq+uin，后端:可能有另一套标识方式<br>日志染色问题︰各个服务染色不一，日志信息可能在某一环缺失<br>查问题效率低:查问题时每一个服务方都各自查自己的日志，使用排除法来查问题，效率较低</p><p>Metrics必不可少，但不是万能<br>Monitor和多维监控Habo :</p><p>指标数据是我们日常需要关注的，它可以帮助我们发现系统的异常，设置告警并及时处理。<br>但指标数据是数据的汇总呈现，我们不能依赖其来定位具体问题和优化系统。</p><p>Tracing提供了什么<br>全链路追踪能够帮助开发者直观分析请求链路，快速定位问题和性能瓶颈，逐渐优化服务间依赖，也有助于开发者从更宏观的角度更好地理解整个分布式系统。</p><h1 id="cpu问题分析总结"><a href="#cpu问题分析总结" class="headerlink" title="cpu问题分析总结"></a>cpu问题分析总结</h1><p>粗看系统负载情况:uptime, vmstat 开发测试环境+线上环境<br>机器实时的CPU资源消耗详细情况top 开发测试环境+线上环境<br>分析系统调用: strace  开发测试环境<br>分析函数的热点:perf，可以输出成火焰图便于直观观察 开发测试环境+线上环境<br>分析各个线程的资源消耗情况，线程内的函数消耗情况:valgriand 开发测试环境<br>分析程序各个线程的堆栈执行情况︰pstack &amp; pt-pmp 开发测试环境</p><h1 id="内存问题分析总结"><a href="#内存问题分析总结" class="headerlink" title="内存问题分析总结"></a>内存问题分析总结</h1><p>1.C++开发的时候必须掌握智能指针<br>2.熟练使用valgriand分析内存泄漏<br>3.了解多线程内存库jemalloc&#x2F;tcmalloc，可以熟悉下jemalloc源代码<br>4.free的输出结果会解读<br>5.建议关闭swap<br>6.熟悉&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;下的参数，比如控制刷脏页的频率，脏页占有量，</p><p>IO问题的分析<br>几个重要的概念</p><h1 id="顺序IO"><a href="#顺序IO" class="headerlink" title="顺序IO"></a>顺序IO</h1><p>顺序读写文件，能很好地利用预读，对于机械磁盘也不用做磁头寻道，所以是性能最好的读写模<br>式，但是一般适用于日志类场景</p><h1 id="随机IO"><a href="#随机IO" class="headerlink" title="随机IO"></a>随机IO</h1><p>随机读写，机械磁盘性能会非常差，如果是这种场景建议用SSD。当然应用层也会做各种努力尽量会将随机IO改成顺序IO</p><h1 id="fsync刷盘"><a href="#fsync刷盘" class="headerlink" title="fsync刷盘"></a>fsync刷盘</h1><p>为了数据安全，每次写入完成通过fsync做强制刷盘操作，避免机器突然掉电能情况丢失数据，但是这个操作对吞吐和响应延时有较大的影响，一般会采用一些批量合并fsync的模式做优化</p><h1 id="direct-io"><a href="#direct-io" class="headerlink" title="direct io"></a>direct io</h1><p>绕过page cache，直接对设备进行读写，一般性能不如带page cache，适用于在业务层做了cache,比如数据库</p><h1 id="aio-异步IO"><a href="#aio-异步IO" class="headerlink" title="aio:异步IO"></a>aio:异步IO</h1><p>读写操作异步化，一般也是directio模式，编程会比较复杂，对于大部分应用不要采用，一般也是适用于数据库场景</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/luslin1711/article/details/105859523">设计一个抢票秒杀系统_luslin1711的博客-CSDN博客</a><br><a href="https://blog.csdn.net/lfssst/article/details/123722149">抢票系统之架构设计_lfssst的博客-CSDN博客_抢票系统设计</a><br><a href="https://bytedancecampus1.feishu.cn/minutes/obcn2m3bdq645dm627u6u38w">陈朋 (feishu.cn)</a><br><a href="https://github.com/EduFriendChen/snatch-tickets-demo">EduFriendChen&#x2F;snatch-tickets-demo: 解：字节校园镜像技术项目实战活动 —— 【后端】如果有一千万个人抢票怎么办？ (github.com)</a><br><a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/middleware/">中间件概览 | CloudWeGo</a><br><a href="https://github.com/cloudwego/hertz-benchmark">cloudwego&#x2F;hertz-benchmark: Tracking performance changes for Hertz (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;p&gt;抢票的要素：&lt;br&gt;时间- 确定列车的剩余票数&lt;br&gt;区间- &lt;/p&gt;
&lt;h1 id=&quot;后台开发导论&quot;&gt;&lt;a href=&quot;#后台开发导论&quot; </summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mudduo-ch01</title>
    <link href="http://example.com/2022/11/02/Linux-Network-Programming/ChenShuo-muduo/mudduo-ch01/"/>
    <id>http://example.com/2022/11/02/Linux-Network-Programming/ChenShuo-muduo/mudduo-ch01/</id>
    <published>2022-11-02T11:46:15.000Z</published>
    <updated>2023-03-16T12:06:31.119Z</updated>
    
    <content type="html"><![CDATA[<p>仅仅只能在linux下运行</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>muduo采用CMake为build system<br>CMake的安装如下：（CMake最好不低于2.8版，CentOS 6自带的2.6版也能用，但是无法自动识别Protobuf库）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install cmake</span><br><span class="line">sudo apt-<span class="built_in">get</span> install g++</span><br></pre></td></tr></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>muduo依赖于Boost，Boost的安装如下</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libboost-<span class="built_in">dev</span> libboost-test-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>安装出现问题</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E: Could <span class="keyword">not</span> <span class="keyword">get</span> <span class="keyword">lock</span> /<span class="keyword">var</span>/lib/dpkg/<span class="keyword">lock</span>-frontend. It <span class="keyword">is</span> held <span class="keyword">by</span> process <span class="number">5865</span> (unattended-upgr)</span><br><span class="line">N: Be aware that removing the <span class="keyword">lock</span> file <span class="keyword">is</span> <span class="keyword">not</span> a solution <span class="keyword">and</span> may <span class="keyword">break</span> your system.</span><br><span class="line">E: <span class="function">Unable to acquire the dpkg frontend <span class="title">lock</span> (<span class="params">/<span class="keyword">var</span>/lib/dpkg/<span class="keyword">lock</span>-frontend</span>), <span class="keyword">is</span> another process <span class="keyword">using</span> it?</span></span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm <span class="regexp">/var/</span>lib<span class="regexp">/dpkg/</span>lock-frontend</span><br><span class="line">sudo rm <span class="regexp">/var/</span>lib<span class="regexp">/dpkg/</span>lock</span><br><span class="line">sudo rm <span class="regexp">/var/</span>cache<span class="regexp">/apt/</span>archives/lock</span><br></pre></td></tr></table></figure><h2 id="第三步（可选）"><a href="#第三步（可选）" class="headerlink" title="第三步（可选）"></a>第三步（可选）</h2><p>muduo有三个非必须的依赖库（curl、c-ares DNS、Google Protobuf）如果安装了这三个库，cmake会自动多编译一些示例<br>安装方法如下：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libcurl4-openssl-<span class="built_in">dev</span> libc-ares-<span class="built_in">dev</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install protobuf-compiler libprotobuf-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h2 id="第四步：下载muduo源码包"><a href="#第四步：下载muduo源码包" class="headerlink" title="第四步：下载muduo源码包"></a>第四步：下载muduo源码包</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/chenshuo/mu</span>duo.git</span><br></pre></td></tr></table></figure><h2 id="第五步：编译muduo"><a href="#第五步：编译muduo" class="headerlink" title="第五步：编译muduo"></a>第五步：编译muduo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载完成之后进入muduo根目录</span></span><br><span class="line"><span class="built_in">cd</span> muduo</span><br><span class="line"><span class="comment"># 编译muduo库和它自带的例子</span></span><br><span class="line">./build.sh -j2</span><br></pre></td></tr></table></figure><p>编译完成之后：<br>会在muduo源码根路径的上一级路径下生成一个build目录（下面全文我们以..&#x2F;build表示）<br>生成的可执行文件位于：..&#x2F;build&#x2F;release-cpp11&#x2F;bin<br>静态文件位于：..&#x2F;build&#x2F;release-cpp11&#x2F;lib</p><h2 id="第六步：安装muduo库"><a href="#第六步：安装muduo库" class="headerlink" title="第六步：安装muduo库"></a>第六步：安装muduo库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.sh install</span><br></pre></td></tr></table></figure><p>muduo头文件安装在..&#x2F;build&#x2F;release-install-cpp11&#x2F;include目录下<br>库文件安装在..&#x2F;build&#x2F;release-install-cpp11&#x2F;lib目录下<br>以便muduo-protorpc和muduo-udns等库使用</p><h1 id="文件内容的分析"><a href="#文件内容的分析" class="headerlink" title="文件内容的分析"></a>文件内容的分析</h1><p>recipes&#x2F;tpc&#x2F;netcat.cc  thread-per-connection<br>recipes&#x2F;python&#x2F;netcat.py IO-multiplexing<br>recipes&#x2F;python&#x2F;netcat-nonblock.py IO-multiplexing</p><p>参考文件所在位置：<br>recipes&#x2F;tpc&#x2F;chargen.cc<br>recipes&#x2F;python&#x2F;chargen.py<br>muduo&#x2F;examples&#x2F;simple&#x2F;chargen&#x2F;*</p><h1 id="安装boost库"><a href="#安装boost库" class="headerlink" title="安装boost库"></a>安装boost库</h1><p>apt-get install libboost-all-dev</p><h1 id="多个netcat的实现"><a href="#多个netcat的实现" class="headerlink" title="多个netcat的实现"></a>多个netcat的实现</h1><h2 id="各种工具"><a href="#各种工具" class="headerlink" title="各种工具"></a>各种工具</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><h3 id="ntcat"><a href="#ntcat" class="headerlink" title="ntcat"></a>ntcat</h3><p>nc -l 1234 # 当做服务器,监听本机的1234端口<br>nc localhost 1234 # 当做客户端,连接到本机的1234端口</p><h1 id="学习netcat怎么编写"><a href="#学习netcat怎么编写" class="headerlink" title="学习netcat怎么编写"></a>学习netcat怎么编写</h1><p>g++ -Wall -std&#x3D;c++11 -pthread -O2 -g -iquote include&#x2F; -I..&#x2F; -I&#x2F;usr&#x2F;local&#x2F;include  -L lib&#x2F; -L&#x2F;usr&#x2F;local&#x2F;lib -ltpc  bin&#x2F;echo_client.cc lib&#x2F;libtpc.a   -o bin&#x2F;echo_client</p><h1 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h1><p>apt-get install libboost-all-dev<br>cd recipes&#x2F;tpc&#x2F;<br>make</p><h2 id="1-系统自带的nc"><a href="#1-系统自带的nc" class="headerlink" title="1.系统自带的nc"></a>1.系统自带的nc</h2><blockquote><p>终端1，作为服务器</p></blockquote><p><code>./chargen -l 1234  # 启动服务器，监听在1234端口，如果有连接到来，就给他发送消息</code></p><blockquote><p>终端2，作为客户端</p></blockquote><p><code>nc localhost 1234 &gt; /dev/null  # 启动客户端，将收到的信息给扔掉</code></p><blockquote><p>终端1的输出结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">805.430 MiB/s</span><br><span class="line">1936.315 MiB/s</span><br><span class="line">1927.679 MiB/s</span><br><span class="line">1925.130 MiB/s</span><br><span class="line">1928.128 MiB/s</span><br><span class="line">1937.221 MiB/s</span><br><span class="line">1930.871 MiB/s</span><br><span class="line">1929.448 MiB/s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>使用top查看进程使用情况</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"><span class="attribute">6814</span> root      <span class="number">20</span>   <span class="number">0</span>    <span class="number">3340</span>   <span class="number">2016</span>   <span class="number">1892</span> R <span class="number">100</span>.<span class="number">0</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">36</span>.<span class="number">72</span> nc</span><br><span class="line"><span class="attribute">6783</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">87976</span>   <span class="number">2020</span>   <span class="number">1836</span> S  <span class="number">65</span>.<span class="number">4</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">38</span>.<span class="number">23</span> chargen</span><br><span class="line">  <span class="attribute">33</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0</span>.<span class="number">3</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">03</span> ksoftirqd/<span class="number">3</span></span><br><span class="line"> <span class="attribute">936</span> redis     <span class="number">20</span>   <span class="number">0</span>   <span class="number">55872</span>   <span class="number">4608</span>   <span class="number">3300</span> S   <span class="number">0</span>.<span class="number">3</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">05</span>.<span class="number">40</span> redis-server</span><br></pre></td></tr></table></figure><p>可以看到nc的占用率已经满了，现在是netcat是瓶颈</p><h2 id="2-自己写的ntcat"><a href="#2-自己写的ntcat" class="headerlink" title="2.自己写的ntcat"></a>2.自己写的ntcat</h2><blockquote><p>终端1，作为服务器</p></blockquote><p><code>./chargen -l 1234  # 启动服务器，监听在1234端口，如果有连接到来，就给他发送消息</code></p><blockquote><p>终端2，作为客户端</p></blockquote><p><code>./netcat localhost 1234 &gt; /dev/null  # 启动自己写的netcat客户端</code></p><blockquote><p>终端1的输出结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">125.255 MiB/s</span><br><span class="line">2285.290 MiB/s</span><br><span class="line">2292.587 MiB/s</span><br><span class="line">2271.676 MiB/s</span><br><span class="line">2296.449 MiB/s</span><br><span class="line">2272.828 MiB/s</span><br><span class="line">2290.678 MiB/s</span><br><span class="line">2269.953 MiB/s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>使用top查看进程使用情况</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"><span class="attribute">6910</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">14324</span>   <span class="number">3292</span>   <span class="number">3072</span> S  <span class="number">99</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">10</span>.<span class="number">31</span> netcat</span><br><span class="line">  <span class="attribute">6908</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">87976</span>   <span class="number">1740</span>   <span class="number">1580</span> S  <span class="number">78</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">08</span>.<span class="number">18</span> chargen</span><br><span class="line">  <span class="attribute">1062</span> mysql     <span class="number">20</span>   <span class="number">0</span> <span class="number">2319480</span> <span class="number">394948</span>  <span class="number">37472</span> S   <span class="number">0</span>.<span class="number">7</span>   <span class="number">2</span>.<span class="number">4</span>   <span class="number">0</span>:<span class="number">27</span>.<span class="number">63</span> mysqld</span><br><span class="line">  <span class="attribute">6843</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">15068</span>   <span class="number">4048</span>   <span class="number">3228</span> R   <span class="number">0</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">82</span> top</span><br></pre></td></tr></table></figure><p>可以看到</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>陈硕的博客 <a href="https://www.cnblogs.com/Solstice/archive/2011/02/02/1948814.html">https://www.cnblogs.com/Solstice/archive/2011/02/02/1948814.html</a><br>陈硕的csdn <a href="https://blog.csdn.net/Solstice?type=blog">https://blog.csdn.net/Solstice?type=blog</a><br>陈硕的课程主页 <a href="http://chenshuo.com/practical-network-programming/">http://chenshuo.com/practical-network-programming/</a><br>相关的代码仓库：<br><a href="http://github.com/chenshuo/muduo">http://github.com/chenshuo/muduo</a><br><a href="http://github.com/chenshuo/recipes">http://github.com/chenshuo/recipes</a><br><a href="http://github.com/chenshuo/muduo-protorpc">http://github.com/chenshuo/muduo-protorpc</a><br><a href="http://github.com/chenshuo/muduo-examples-in-go">http://github.com/chenshuo/muduo-examples-in-go</a><br>如何安装 <a href="https://www.365seal.com/y/elnWyG1GVr.html">https://www.365seal.com/y/elnWyG1GVr.html</a><br>make编译源码时-j的作用 <a href="https://blog.csdn.net/JeekMrc/article/details/118332252">https://blog.csdn.net/JeekMrc/article/details/118332252</a><br>安装boost的问题 <a href="https://zhuanlan.zhihu.com/p/126538251">https://zhuanlan.zhihu.com/p/126538251</a><br>[万字长文梳理Muduo库核心代码及优秀编程细节思想剖析]<a href="https://zhuanlan.zhihu.com/p/495016351">https://zhuanlan.zhihu.com/p/495016351</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仅仅只能在linux下运行&lt;/p&gt;
&lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h2&gt;&lt;p&gt;muduo采用CMake为build system&lt;br&gt;CMake的安装如下：（CMak</summary>
      
    
    
    
    
    <category term="Linux网络编程" scheme="http://example.com/tags/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 面经</title>
    <link href="http://example.com/2022/11/02/Interview-Q&amp;A/network_Q&amp;A/"/>
    <id>http://example.com/2022/11/02/Interview-Q&amp;A/network_Q&amp;A/</id>
    <published>2022-11-02T05:39:59.000Z</published>
    <updated>2022-11-03T08:56:36.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="1、OSI-的七层模型分别是？各自的功能是什么？"><a href="#1、OSI-的七层模型分别是？各自的功能是什么？" class="headerlink" title="1、OSI 的七层模型分别是？各自的功能是什么？"></a>1、OSI 的七层模型分别是？各自的功能是什么？</h2><table><thead><tr><th>层数</th><th align="left">作用</th><th>传输数据的名称</th></tr></thead><tbody><tr><td>物理层</td><td align="left">保证有物理上的连接的传输</td><td>比特流 （Bits）</td></tr><tr><td>数据链路层</td><td align="left"></td><td>帧 （Frames）</td></tr><tr><td>网络层</td><td align="left">提供点对点的服务，可以找到对方的IP，就是找到对方主机的位置</td><td>包 （Packages）</td></tr><tr><td>传输层</td><td align="left">从传递到主机变成可以传递到进程之间</td><td>段 （Segments）</td></tr><tr><td>会话层</td><td align="left"></td><td></td></tr><tr><td>表示层</td><td align="left"></td><td></td></tr><tr><td>应用层</td><td align="left">在隔绝下层的通信内容后，可以制作各种的应用</td><td></td></tr></tbody></table><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h2 id="应用层常见协议知道多少？了解几个？"><a href="#应用层常见协议知道多少？了解几个？" class="headerlink" title="应用层常见协议知道多少？了解几个？"></a>应用层常见协议知道多少？了解几个？</h2><table><thead><tr><th>应用层协议</th><th>传输层</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>超文本传输协议</td></tr><tr><td>FTP</td><td>TCP</td><td>23</td><td>文件传输</td></tr><tr><td>DNS</td><td>UDP</td><td>53</td><td>域名服务器</td></tr><tr><td>SMTP</td><td></td><td>465&#x2F;994</td><td>邮件发送协议</td></tr><tr><td>POP3</td><td></td><td>995</td><td>邮件接收协议，邮件存到本机，删除服务器上邮件</td></tr><tr><td>IMAP</td><td></td><td>993</td><td>邮件接收协议，邮件存到本机，不删除服务器上邮件</td></tr><tr><td>BitTorrent</td><td>TCP&#x2F;UDP</td><td></td><td>P2P的文件共享协议</td></tr><tr><td>RTSP</td><td>TCP&#x2F;UDP</td><td></td><td>主要用于拉取视频流，用在VLC</td></tr></tbody></table><h2 id="二、HTTP"><a href="#二、HTTP" class="headerlink" title="二、HTTP"></a>二、HTTP</h2><h3 id="1-HTTP基础"><a href="#1-HTTP基础" class="headerlink" title="1)HTTP基础"></a>1)HTTP基础</h3><h4 id="1-说一下一次完整的HTTP请求过程包括哪些内容？"><a href="#1-说一下一次完整的HTTP请求过程包括哪些内容？" class="headerlink" title="1.说一下一次完整的HTTP请求过程包括哪些内容？"></a>1.说一下一次完整的HTTP请求过程包括哪些内容？</h4><ol><li>建立客户端和服务器的连接</li><li>客户端发送消息给服务器</li><li>服务器给客户端发送应答消息</li><li>客户端收到消息，浏览器解析，给用户呈现</li></ol><h4 id="2-HTTP长连接和短连接的区别"><a href="#2-HTTP长连接和短连接的区别" class="headerlink" title="2.HTTP长连接和短连接的区别"></a>2.HTTP长连接和短连接的区别</h4><p>HTTP1.0默认使用短连接，每次HTTP连接完成以后，都会自动断开，下一次连接的时候的时候又会重新建立，十分的花费时间</p><p>HTTP1.1默认使用长连接，也就是<strong>持久连接</strong></p><p>其中HTTP1.1报文首部中使用Connection:Keep-Alive字段，指定使用了长链接</p><h4 id="3-HTTP请求方法你知道多少？"><a href="#3-HTTP请求方法你知道多少？" class="headerlink" title="3.HTTP请求方法你知道多少？"></a>3.HTTP请求方法你知道多少？</h4><table><thead><tr><th>方法</th><th>作用</th><th>HTTP1.0</th><th>HTTP1.1</th></tr></thead><tbody><tr><td>GET</td><td>主要为获取和查询数据</td><td>√</td><td>√</td></tr><tr><td>POST</td><td>发送修改请求</td><td>√</td><td>√</td></tr><tr><td>HEAD</td><td>获取响应首部</td><td>√</td><td>√</td></tr><tr><td>DELETE</td><td>删除资源</td><td>√</td><td>√</td></tr><tr><td>PUT</td><td>传输文件</td><td>√</td><td>√</td></tr><tr><td>OPTION</td><td>查询对应的URL支持的方法</td><td>×</td><td>√</td></tr><tr><td>TRACE</td><td>将请求通信回路返回给客户端</td><td>×</td><td>√</td></tr><tr><td>CONNECT</td><td>使用隧道协议代理进行连接</td><td>×</td><td>√</td></tr><tr><td><del>LINK</del></td><td></td><td>×</td><td>现在被取消了</td></tr><tr><td><del>UNLINK</del></td><td></td><td>×</td><td>现在被取消了</td></tr></tbody></table><h4 id="4-常见的HTTP状态码有哪些？"><a href="#4-常见的HTTP状态码有哪些？" class="headerlink" title="4.常见的HTTP状态码有哪些？"></a>4.常见的HTTP状态码有哪些？</h4><table><thead><tr><th>状态码</th><th>具体状态码</th><th>类别</th><th>原因短语</th><th>常见情况</th></tr></thead><tbody><tr><td>1XX</td><td></td><td></td><td>请求正在处理</td><td>POST的请求中转时候使用</td></tr><tr><td>2XX</td><td></td><td></td><td>请求成功</td><td></td></tr><tr><td></td><td>200</td><td>OK</td><td></td><td></td></tr><tr><td></td><td>204</td><td></td><td></td><td></td></tr><tr><td></td><td>206</td><td></td><td></td><td></td></tr><tr><td>3XX</td><td></td><td></td><td>请求重定向</td><td></td></tr><tr><td></td><td>301</td><td></td><td></td><td></td></tr><tr><td></td><td>302</td><td></td><td></td><td></td></tr><tr><td></td><td>303</td><td></td><td></td><td></td></tr><tr><td></td><td>304</td><td></td><td></td><td></td></tr><tr><td></td><td>307</td><td></td><td></td><td></td></tr><tr><td>4XX</td><td></td><td>Client Error</td><td>客户端错误</td><td></td></tr><tr><td></td><td>400</td><td>Bad Request</td><td>错误请求</td><td>请求报文中存在语法问题</td></tr><tr><td></td><td>401</td><td></td><td></td><td></td></tr><tr><td></td><td>403</td><td>Forbidden</td><td>禁止访问</td><td>没有访问的权限</td></tr><tr><td></td><td>404</td><td>Not Found</td><td>服务器上没有请求的资源</td><td></td></tr><tr><td>5XX</td><td></td><td>Server Error</td><td>服务器错误</td><td></td></tr><tr><td></td><td>500</td><td>Internal Server Error</td><td>服务器本身出错</td><td>对于URL请求过来，处理出现了BUG<br/>代码有bug</td></tr><tr><td></td><td>503</td><td>Service Unavilable</td><td>服务器正忙</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="6-HTTP请求和响应报文有哪些主要字段？"><a href="#6-HTTP请求和响应报文有哪些主要字段？" class="headerlink" title="6.HTTP请求和响应报文有哪些主要字段？"></a>6.HTTP请求和响应报文有哪些主要字段？</h4><p>请求报文：</p><p>请求行 ： 包括请求方法，URL，协议&#x2F;版本，例如：GET HTTP&#x2F;1.1</p><p>请求头部：User-Agent:</p><p>请求主体：body</p><p>响应报文：</p><p>状态行：HTTP&#x2F;1.1 200 OK</p><p>响应头部：Content-Length:200</p><p>响应主体：<html></html></p><h4 id="7-HTTPS是什么？"><a href="#7-HTTPS是什么？" class="headerlink" title="7.HTTPS是什么？"></a>7.HTTPS是什么？</h4><p>HTTPS不是一种新的协议，是在HTTP协议的下方通过SSL&#x2F;TLS来提供加密服务，但是HTTP+SSL依然处在应用层</p><p>然后通过TCP协议将加密的信息发送给对方，从而达到，防窃听，防伪装，防篡改的目的</p><h4 id="8-SSL是什么？"><a href="#8-SSL是什么？" class="headerlink" title="8.SSL是什么？"></a>8.SSL是什么？</h4><p>SSL(Secure Socket Layer，安全套接字层)</p><p>TSL(Transport Layer Security，传输安全层)，前身是SSL</p><h4 id="9-HTTPS和HTTP的区别"><a href="#9-HTTPS和HTTP的区别" class="headerlink" title="9.HTTPS和HTTP的区别"></a>9.HTTPS和HTTP的区别</h4><ol><li>HTTP是明文传输的，数据都没有进行加密，HTTPS通过SSL&#x2F;TLS层提供了加密服务</li><li>HTTP只需要在TCP三次握手后就可以建立连接，只需要交换3个数据报，但是HTTPS除了需要TCP的三次握手之外，还需要SSL握手需要9个包，建立连接的速度比HTTP慢</li><li>HTTP需要到CA(证书颁发机构)申请证书，后才能使用，但是免费的证书比较少，而且需要一定的费用</li><li>HTTP和HTTPS使用的连接方式不同，使用的端口也不同，HTTP在80号端口，HTTPS在443号端口</li></ol><h4 id="10-HTTP的缺点有哪些？"><a href="#10-HTTP的缺点有哪些？" class="headerlink" title="10.HTTP的缺点有哪些？"></a>10.HTTP的缺点有哪些？</h4><ol><li>使用明文传输，传输过程没有加密，传送内容容易被<strong>窃听</strong></li><li>不验证通信方的身份，通信方的身份可能遭遇<strong>伪装</strong></li><li>无法验证报文完整性，加密内容容易被<strong>篡改</strong></li></ol><h4 id="11-HTTPS采用的加密方式有哪些？是对称还是非对称？"><a href="#11-HTTPS采用的加密方式有哪些？是对称还是非对称？" class="headerlink" title="11.HTTPS采用的加密方式有哪些？是对称还是非对称？"></a>11.HTTPS采用的加密方式有哪些？是对称还是非对称？</h4><h4 id="12-HTTP如何禁用缓存？如何确认缓存？"><a href="#12-HTTP如何禁用缓存？如何确认缓存？" class="headerlink" title="12.HTTP如何禁用缓存？如何确认缓存？"></a>12.HTTP如何禁用缓存？如何确认缓存？</h4><h4 id="13-URI和URL的区别"><a href="#13-URI和URL的区别" class="headerlink" title="13.URI和URL的区别"></a>13.URI和URL的区别</h4><p>URI：Uniform Resource Identifier，统一资源<strong>定位</strong>符</p><p>URL：Uniform Resource Location，统一资源<strong>标识</strong>符</p><p>URI是用来标识一个资源的，可以通过这个知道资源是什么</p><p>URL是用来定位具体资源的，通过这个可以拉取到想要的资源</p><h3 id="2-请求方法"><a href="#2-请求方法" class="headerlink" title="2)请求方法"></a>2)请求方法</h3><h4 id="1-GET-和-POST-的区别，你知道哪些？"><a href="#1-GET-和-POST-的区别，你知道哪些？" class="headerlink" title="1.GET 和 POST 的区别，你知道哪些？"></a>1.GET 和 POST 的区别，你知道哪些？</h4><ol><li>GET传输的内容在参数中传递，POST在body中传递参数</li><li>GET一般用于获取数据，POST一般用于修改数据，比如登录的场景</li><li>GET提交的数据，理论上长度为2K，POST传递的数据长度，理论上没有限制</li><li>GET请求会被浏览器缓存，POST一般情况下不会</li><li>GET是幂等的，POST不是幂等的</li></ol><p>记忆：1.传参，2.作用，3.长度，4.缓存，5.幂等</p><p>幂等性的意思：对服务器的请求，请求一次的结果和请求多次的结果是一样的</p><p>GET查询一个数据，每次查询的结果是一样的，所以是幂等的</p><p>POST生成一个新的数据，比如生成一个博客，POST请求了两次，可能会生成两个页面</p><h4 id="2-GET-方法参数写法是固定的吗？"><a href="#2-GET-方法参数写法是固定的吗？" class="headerlink" title="2.GET 方法参数写法是固定的吗？"></a>2.GET 方法参数写法是固定的吗？</h4><p>一般情况下，GET请求的参数都是写在?后面，通过&amp;来连接多个参数</p><p>服务器解析的过程是，获取TCP连接传输过来的数据，通过正则表达式的方法获取Header和Body，从而提取到GET请求的参数</p><p>但这个参数的写法也是由客户端和服务器之间约定形成的，只要双方遵守约定的规则，都是可以解析的</p><h4 id="3-GET-方法的长度限制是怎么回事？"><a href="#3-GET-方法的长度限制是怎么回事？" class="headerlink" title="3.GET 方法的长度限制是怎么回事？"></a>3.GET 方法的长度限制是怎么回事？</h4><p>GET方法理论上没有长度的限制，HTTP协议没有对Body和URL进行长度限制</p><p>一般是浏览器或者服务器给GET方法添加的限制，一般为2K大小</p><p>服务器限制GET方法的长度的原因：1.从性能角度考虑，处理较长的URL消耗较多的资源，2.从安全角度考虑，防止恶意构造长的URL来攻击</p><h4 id="4-POST-方法比-GET-方法安全？"><a href="#4-POST-方法比-GET-方法安全？" class="headerlink" title="4.POST 方法比 GET 方法安全？"></a>4.POST 方法比 GET 方法安全？</h4><p>POST方法，传输的数据，从地址栏是不可见的，看起来比GET方法安全</p><p>但是HTTP都是明文传输的，只要进行数据抓包，就能抓到POST方法中Body的内容，所以其实也是不安全的</p><p>想要安全传输，还需要将HTTP改造成HTTPS</p><h4 id="5-POST-方法会产生两个-TCP-数据包？你了解吗？"><a href="#5-POST-方法会产生两个-TCP-数据包？你了解吗？" class="headerlink" title="5.POST 方法会产生两个 TCP 数据包？你了解吗？"></a>5.POST 方法会产生两个 TCP 数据包？你了解吗？</h4><p>HTTP协议中没有说POST会发送两次请求</p><p>是有些文章中提到使用POST会将head和body分开发送，先发送header，服务器返回100后再次发送body</p><p>但是实际上发现，在大多数情况下并不是这样</p><p>所以说POST产生两个TCP数据包的情况，是部分浏览器和框架的行为，不是POST的必然行为</p><h4 id="6-GET与POST传递数据的最大长度能够达到多少呢？"><a href="#6-GET与POST传递数据的最大长度能够达到多少呢？" class="headerlink" title="6.GET与POST传递数据的最大长度能够达到多少呢？"></a>6.GET与POST传递数据的最大长度能够达到多少呢？</h4><p>HTTP没有对GET和POST请求，传递数据的最大长度做规范</p><p>GET能传输的最大长度取决于URL的长度，一般浏览器的限制为2K，主要是服务器设计者从安全和性能的角度考虑的</p><p>POST的传输长度取决于body能传输多大，一般都是要求小于MB</p><h3 id="3-状态管理"><a href="#3-状态管理" class="headerlink" title="3)状态管理"></a>3)状态管理</h3><h4 id="1-Cookie是什么？"><a href="#1-Cookie是什么？" class="headerlink" title="1.Cookie是什么？"></a>1.Cookie是什么？</h4><p>由于HTTP协议是无状态的，所以在HTTP&#x2F;1.1中就引入了cookie来保存用户信息。</p><p>用来解决每次刷新一次页面都需要重新登录的情况</p><p>客户端向服务器发送请求后，服务器返回的消息中会携带一小段数据用于标识这个用户，之后每次客户端的请求都会带上这一小段cookie表示来自同一个用户的请求，会增加一些性能开销</p><h4 id="2-Cookie有什么用途？用途"><a href="#2-Cookie有什么用途？用途" class="headerlink" title="2.Cookie有什么用途？用途"></a>2.Cookie有什么用途？用途</h4><ol><li>会话状态的管理，记住用户的登录状态，购物车信息，收藏夹内容</li><li>个性化设置，电商页面的话会给用户做个性化推荐</li><li>浏览器行为跟踪，跟踪分析用户的行为</li></ol><h4 id="3-Session是什么？"><a href="#3-Session是什么？" class="headerlink" title="3.Session是什么？"></a>3.Session是什么？</h4><p>除了将用户的cookie存在本地，还可以使用session将用户信息存储在服务器</p><p>sesion可以存储在服务器的文件，数据库，内存中，或者存在redis这种内存数据中，效率更高</p><h4 id="Session-的工作原理是什么？-x2F-使用-Session-的过程是怎样的？"><a href="#Session-的工作原理是什么？-x2F-使用-Session-的过程是怎样的？" class="headerlink" title="Session 的工作原理是什么？&#x2F;使用 Session 的过程是怎样的？"></a>Session 的工作原理是什么？&#x2F;使用 Session 的过程是怎样的？</h4><h4 id="Cookies和Session区别是什么？Cookie与Session的对比"><a href="#Cookies和Session区别是什么？Cookie与Session的对比" class="headerlink" title="Cookies和Session区别是什么？Cookie与Session的对比"></a>Cookies和Session区别是什么？Cookie与Session的对比</h4><h4 id="Session和cookie应该如何去选择（适用场景）？"><a href="#Session和cookie应该如何去选择（适用场景）？" class="headerlink" title="Session和cookie应该如何去选择（适用场景）？"></a>Session和cookie应该如何去选择（适用场景）？</h4><ol><li>cookie只能保存ASCII码值，cookie可以保存各种类型的信息，当存储的内容较复杂的时候，首选cookie</li><li>cookie存储在浏览器中，容易被恶意查看，容易造成隐私的泄漏，隐私数据应该存在session中</li><li>session对于大型网站，用户量十分大，储存的开销也是十分大的，只需要在sesion中保存重要信息</li></ol><h2 id="二、DNS"><a href="#二、DNS" class="headerlink" title="二、DNS"></a>二、DNS</h2><h3 id="1-你知道DNS是什么？"><a href="#1-你知道DNS是什么？" class="headerlink" title="1.你知道DNS是什么？"></a>1.你知道DNS是什么？</h3><p>DNS是一种域名解析服务器，可以将用户发送过来的域名转化为具体的IP地址</p><h3 id="2-DNS的工作原理？"><a href="#2-DNS的工作原理？" class="headerlink" title="2.DNS的工作原理？"></a>2.DNS的工作原理？</h3><h3 id="DNS查询方式有哪些？"><a href="#DNS查询方式有哪些？" class="headerlink" title="DNS查询方式有哪些？"></a>DNS查询方式有哪些？</h3><h1 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h1><h3 id="SYN攻击是什么？"><a href="#SYN攻击是什么？" class="headerlink" title="SYN攻击是什么？"></a>SYN攻击是什么？</h3><h3 id="DDos-攻击了解吗？"><a href="#DDos-攻击了解吗？" class="headerlink" title="DDos 攻击了解吗？"></a>DDos 攻击了解吗？</h3><h3 id="XSS攻击是什么？（低频）"><a href="#XSS攻击是什么？（低频）" class="headerlink" title="XSS攻击是什么？（低频）"></a>XSS攻击是什么？（低频）</h3><h3 id="CSRF攻击？你知道吗？"><a href="#CSRF攻击？你知道吗？" class="headerlink" title="CSRF攻击？你知道吗？"></a>CSRF攻击？你知道吗？</h3><h3 id="如何防范CSRF攻击"><a href="#如何防范CSRF攻击" class="headerlink" title="如何防范CSRF攻击"></a>如何防范CSRF攻击</h3><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://interviewguide.cn/notes/03-hunting_job/02-interview/03-01-net.html#_11%E3%80%81get-%E5%92%8C-post-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B">计算机网络-01-20 | 阿秀的学习笔记 (interviewguide.cn)</a>[</p><p><a href="https://cloud.tencent.com/developer/article/1498283">面试必备：GET和POST 的区别详细解说 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/zerooffdate/article/details/78962818">HTTP POST请求发送两个TCP包？_john-zeng的博客-CSDN博客_post 两个tcp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;1、OSI-的七层模型分别是？各自的功能是什么？&quot;&gt;&lt;a href=&quot;#1、OSI-的七层模型分别是？各自的功能是什么？&quot; cla</summary>
      
    
    
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>学习路径</title>
    <link href="http://example.com/2022/10/29/Others/learn-road/"/>
    <id>http://example.com/2022/10/29/Others/learn-road/</id>
    <published>2022-10-29T07:08:31.000Z</published>
    <updated>2023-01-08T15:59:20.483Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h1><h1 id="C-书籍"><a href="#C-书籍" class="headerlink" title="C++书籍"></a>C++书籍</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Essential C++<br>C++ primer plus</p><h2 id="进阶1"><a href="#进阶1" class="headerlink" title="进阶1"></a>进阶1</h2><p>C++ Primer<br>Effective C++<br>More Effective C++<br>Effective STL</p><h2 id="进阶2"><a href="#进阶2" class="headerlink" title="进阶2"></a>进阶2</h2><p>STL 源码剖析<br>深度探索 C++ 对象模型</p><p>候捷 C++：<br>C++内存管理<br>STL源码分析<br>C++ STL与泛型编程高级<br>C++11 新特性</p><h2 id="内化功力"><a href="#内化功力" class="headerlink" title="内化功力"></a>内化功力</h2><p>C++ 语言的设计与演化<br>C++ 沉思录<br>C++ Templates和C++模版元编程<br>C+标准库(第2版)</p><h1 id="C-网络编程"><a href="#C-网络编程" class="headerlink" title="C++网络编程"></a>C++网络编程</h1><p>linux网络编程-宋敬彬<br>Linux高性能服务器编程-陈硕</p><h1 id="linux书籍"><a href="#linux书籍" class="headerlink" title="linux书籍"></a>linux书籍</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>鸟哥私房菜</p><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>Unix网络编程（选看）<br>UNIX环境高级编程（选看）</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h2><pre><code>mysql必知必会</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><pre><code>MySQL是怎样运行的——有个小孩子高性能mysql——很厚MySQL技术内幕：InnoDB存储引擎</code></pre><h2 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h2><pre><code>MySQL排错指南数据库索引设计与优化Effective MySQL</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><pre><code>    Redis设计与实现——必看</code></pre><h2 id="更高维度"><a href="#更高维度" class="headerlink" title="更高维度"></a>更高维度</h2><pre><code>数据库系统实现</code></pre><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h2><p>Python编程，从入门到实践</p><h2 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h2><p>流畅的python<br>Python Cookbook</p><h2 id="Python数据分析类"><a href="#Python数据分析类" class="headerlink" title="Python数据分析类"></a>Python数据分析类</h2><p>利用Python进行数据分析<br>Python数据分析实战<br>Python数据可视化编程实战<br>Python金融大数据分析</p><h2 id="Python网络爬虫类"><a href="#Python网络爬虫类" class="headerlink" title="Python网络爬虫类"></a>Python网络爬虫类</h2><p>从零开始学Python网络爬虫<br>精通Python网络爬虫<br>精通Scrapy网络爬虫<br>Python3网络爬虫数据采集<br>精通Python网络爬虫 核心技术、框架与项目实战<br>自己动手写网络爬虫</p><h2 id="机器学习类"><a href="#机器学习类" class="headerlink" title="机器学习类"></a>机器学习类</h2><p>机器学习应用实验手册<br>模式识别与机器学习 中文版</p><h2 id="编码规范类"><a href="#编码规范类" class="headerlink" title="编码规范类"></a>编码规范类</h2><p>Python 编码规范(Google)</p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>docker技术入门与实践——初级入门<br>docker进阶与实战——初级介绍不多，讲了很多例子<br>Docker源码分析<br>自己动手写docker——高难度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;书籍推荐&quot;&gt;&lt;a href=&quot;#书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;书籍推荐&quot;&gt;&lt;/a&gt;书籍推荐&lt;/h1&gt;&lt;h1 id=&quot;C-书籍&quot;&gt;&lt;a href=&quot;#C-书籍&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>github 教程</title>
    <link href="http://example.com/2022/10/29/Tutorial/github-tutorial/"/>
    <id>http://example.com/2022/10/29/Tutorial/github-tutorial/</id>
    <published>2022-10-29T05:40:28.000Z</published>
    <updated>2023-07-15T13:56:50.339Z</updated>
    
    <content type="html"><![CDATA[<p>如何将自己的代码传到github上</p><h1 id="步骤一：注册账号"><a href="#步骤一：注册账号" class="headerlink" title="步骤一：注册账号"></a>步骤一：注册账号</h1><p><a href="https://github.com/">https://github.com/</a></p><h1 id="步骤二：下载Git"><a href="#步骤二：下载Git" class="headerlink" title="步骤二：下载Git"></a>步骤二：下载Git</h1><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h1 id="步骤三：生成ssh秘钥"><a href="#步骤三：生成ssh秘钥" class="headerlink" title="步骤三：生成ssh秘钥"></a>步骤三：生成ssh秘钥</h1><p>git config –global user.name “XXX”<br>git config –global user.email “XXX”</p><h2 id="1-生成公钥："><a href="#1-生成公钥：" class="headerlink" title="1.生成公钥："></a>1.生成公钥：</h2><p>git命令：ssh-keygen  -m [密钥格式]  -t [密钥类型]  -C[密钥注解] </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -m PEM -t ed25519 -C <span class="string">&quot;your.email@example.com&quot;</span> <span class="regexp">//</span> 创建新的 SSH 私钥与公钥秘钥对，输入你的邮箱作为标签</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/Users/y</span>ou<span class="regexp">/.ssh/i</span>d_rsa): [Press enter] <span class="regexp">//</span> 推荐使用默认地址</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="regexp">//</span> 此处直接回车即可；若设置密码，则每次使用 SSH 方式推送代码时都会要求输入密码</span><br></pre></td></tr></table></figure><h2 id="2-添加公钥"><a href="#2-添加公钥" class="headerlink" title="2.添加公钥"></a>2.添加公钥</h2><p>windows地址为（C:\Users\you.ssh\id_ed25519.pub）<br>linux地址为（&#x2F;home&#x2F;user&#x2F;.ssh&#x2F;id_ed25519.pub）<br>linux地址为（&#x2F;root&#x2F;.ssh&#x2F;id_ed25519.pub）<br>打开上文中生成的秘钥对的地址（默认地址通常为 ~&#x2F;.ssh&#x2F;）找到后缀为 pub 的公钥文件，使用 cat 命令输出所有内容并复制。</p><h2 id="3-尝试使用ssh连接github"><a href="#3-尝试使用ssh连接github" class="headerlink" title="3.尝试使用ssh连接github"></a>3.尝试使用ssh连接github</h2><p>ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a></p><h2 id="4-在github中添加秘钥"><a href="#4-在github中添加秘钥" class="headerlink" title="4.在github中添加秘钥"></a>4.在github中添加秘钥</h2><p>1.右上角点击自己的头像<br>2.setting<br>3.SSH and GPG keys<br>4.New SSH keys  </p><h1 id="步骤四：github上创建仓库"><a href="#步骤四：github上创建仓库" class="headerlink" title="步骤四：github上创建仓库"></a>步骤四：github上创建仓库</h1><h1 id="步骤五：将仓库下载到本地"><a href="#步骤五：将仓库下载到本地" class="headerlink" title="步骤五：将仓库下载到本地"></a>步骤五：将仓库下载到本地</h1><p>git clone [ssh地址]</p><h1 id="步骤六：上传代码"><a href="#步骤六：上传代码" class="headerlink" title="步骤六：上传代码"></a>步骤六：上传代码</h1><p>git add acm.cpp<br>git add .</p><p>git commit -m “init”</p><p>git push</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[如何把自己的代码上传到github上]<a href="https://blog.csdn.net/qq_43111389/article/details/125644132">https://blog.csdn.net/qq_43111389/article/details/125644132</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何将自己的代码传到github上&lt;/p&gt;
&lt;h1 id=&quot;步骤一：注册账号&quot;&gt;&lt;a href=&quot;#步骤一：注册账号&quot; class=&quot;headerlink&quot; title=&quot;步骤一：注册账号&quot;&gt;&lt;/a&gt;步骤一：注册账号&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gith</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql 教程</title>
    <link href="http://example.com/2022/10/27/Tutorial/mysql-tutorial/"/>
    <id>http://example.com/2022/10/27/Tutorial/mysql-tutorial/</id>
    <published>2022-10-27T11:12:48.000Z</published>
    <updated>2022-10-27T13:22:38.495Z</updated>
    
    <content type="html"><![CDATA[<p>show global variables like ‘port’;</p><p>service mysql restart</p><p>cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf</p><p>mysql -udebian-sys-maint -pCljM3ZnVZ3n3sycv</p><p>mysql -uroot -p123456</p><p>select User,Host from user;</p><p>select user, plugin from mysql.user;</p><p>select host,user from mysql.user;</p><p>SELECT host,user,authentication_string FROM mysql.user;</p><p>update mysql.user set authentication_string&#x3D;’’ where user&#x3D;’root’;<br>UPDATE mysql.user SET authentication_string&#x3D;md5(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;sha1(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;’123’ WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>update mysql.user set authentication_string&#x3D;password(‘root’) where User&#x3D;’root’;</p><p>update user set host&#x3D;’%’ where user&#x3D;’debian-sys-maint’;</p><p>alter user‘root‘@’localhost’ identified by ‘123’;</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘12345’;</p><p>ALTER USER ‘mysql.sys‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><p>flush privileges;</p><p>mysqld –console –skip-grant-tables –shared-memory；</p><p> vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</p><p>dpkg –configure -a</p><p>dpkg –list|grep mysql</p><p><a href="https://cloud.tencent.com/developer/article/1165127">https://cloud.tencent.com/developer/article/1165127</a></p><p>[Ubuntu20.04 安装和卸载MySQL8]<a href="https://www.cnblogs.com/zhangxuel1ang/p/13456116.html">https://www.cnblogs.com/zhangxuel1ang/p/13456116.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;show global variables like ‘port’;&lt;/p&gt;
&lt;p&gt;service mysql restart&lt;/p&gt;
&lt;p&gt;cat &amp;#x2F;etc&amp;#x2F;mysql&amp;#x2F;debian.cnf&lt;/p&gt;
&lt;p&gt;mysql -udebian-sys</summary>
      
    
    
    
    
  </entry>
  
</feed>
