<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gtoo8888</title>
  
  <subtitle>会扇扇子的猪</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-27T13:22:38.495Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kuku De</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql 教程</title>
    <link href="http://example.com/2022/10/27/Tutorial/mysql-tutorial/"/>
    <id>http://example.com/2022/10/27/Tutorial/mysql-tutorial/</id>
    <published>2022-10-27T11:12:48.000Z</published>
    <updated>2022-10-27T13:22:38.495Z</updated>
    
    <content type="html"><![CDATA[<p>show global variables like ‘port’;</p><p>service mysql restart</p><p>cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf</p><p>mysql -udebian-sys-maint -pCljM3ZnVZ3n3sycv</p><p>mysql -uroot -p123456</p><p>select User,Host from user;</p><p>select user, plugin from mysql.user;</p><p>select host,user from mysql.user;</p><p>SELECT host,user,authentication_string FROM mysql.user;</p><p>update mysql.user set authentication_string&#x3D;’’ where user&#x3D;’root’;<br>UPDATE mysql.user SET authentication_string&#x3D;md5(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;sha1(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;’123’ WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>update mysql.user set authentication_string&#x3D;password(‘root’) where User&#x3D;’root’;</p><p>update user set host&#x3D;’%’ where user&#x3D;’debian-sys-maint’;</p><p>alter user‘root‘@’localhost’ identified by ‘123’;</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘12345’;</p><p>ALTER USER ‘mysql.sys‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><p>flush privileges;</p><p>mysqld –console –skip-grant-tables –shared-memory；</p><p> vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</p><p>dpkg –configure -a</p><p>dpkg –list|grep mysql</p><p><a href="https://cloud.tencent.com/developer/article/1165127">https://cloud.tencent.com/developer/article/1165127</a></p><p>[Ubuntu20.04 安装和卸载MySQL8]<a href="https://www.cnblogs.com/zhangxuel1ang/p/13456116.html">https://www.cnblogs.com/zhangxuel1ang/p/13456116.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;show global variables like ‘port’;&lt;/p&gt;
&lt;p&gt;service mysql restart&lt;/p&gt;
&lt;p&gt;cat &amp;#x2F;etc&amp;#x2F;mysql&amp;#x2F;debian.cnf&lt;/p&gt;
&lt;p&gt;mysql -udebian-sys</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="http://example.com/2022/10/24/Interview-Q&amp;A/%E9%9D%A2%E7%BB%8F/"/>
    <id>http://example.com/2022/10/24/Interview-Q&amp;A/%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-10-24T13:24:32.000Z</published>
    <updated>2022-10-24T13:40:29.167Z</updated>
    
    <content type="html"><![CDATA[<ol><li>针对lambda捕获变量，怎么保证他是有效的呢<br>捕获引用时候，需要注意引用对象的作用域。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[c++ Lambda表达式使用过程中可能遇到的坑]<a href="https://juejin.cn/post/6844903879818084359">https://juejin.cn/post/6844903879818084359</a><br>[Can the [this] pointer captured by a lambda be invalidated before the lambda runs?]<a href="https://stackoverflow.com/questions/58257802/can-the-this-pointer-captured-by-a-lambda-be-invalidated-before-the-lambda-run">https://stackoverflow.com/questions/58257802/can-the-this-pointer-captured-by-a-lambda-be-invalidated-before-the-lambda-run</a><br>[c++ - lambda 捕获的 [this] 指针能否在 lambda 运行之前失效？]<a href="https://www.coder.work/article/6243761">https://www.coder.work/article/6243761</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;针对lambda捕获变量，怎么保证他是有效的呢&lt;br&gt;捕获引用时候，需要注意引用对象的作用域。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>高级计算机网络</title>
    <link href="http://example.com/2022/10/21/Course/Advanced_Computer_Network/"/>
    <id>http://example.com/2022/10/21/Course/Advanced_Computer_Network/</id>
    <published>2022-10-21T04:12:44.000Z</published>
    <updated>2022-10-21T08:33:36.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2多媒体网络"><a href="#2多媒体网络" class="headerlink" title="2多媒体网络"></a>2多媒体网络</h2><h3 id="2-1-多媒体网络应用"><a href="#2-1-多媒体网络应用" class="headerlink" title="2.1 多媒体网络应用"></a>2.1 多媒体网络应用</h3><h3 id="2-2-流式存储视频"><a href="#2-2-流式存储视频" class="headerlink" title="2.2 流式存储视频"></a>2.2 流式存储视频</h3><h3 id="2-3-voice-over-IP"><a href="#2-3-voice-over-IP" class="headerlink" title="2.3 voice-over-IP"></a>2.3 voice-over-IP</h3><h3 id="2-4-实时交互式应用的协议"><a href="#2-4-实时交互式应用的协议" class="headerlink" title="2.4 实时交互式应用的协议"></a>2.4 实时交互式应用的协议</h3><h3 id="2-5-多媒体的网络支持"><a href="#2-5-多媒体的网络支持" class="headerlink" title="2.5 多媒体的网络支持"></a>2.5 多媒体的网络支持</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2多媒体网络&quot;&gt;&lt;a href=&quot;#2多媒体网络&quot; class=&quot;headerlink&quot; title=&quot;2多媒体网络&quot;&gt;&lt;/a&gt;2多媒体网络&lt;/h2&gt;&lt;h3 id=&quot;2-1-多媒体网络应用&quot;&gt;&lt;a href=&quot;#2-1-多媒体网络应用&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://example.com/2022/10/20/Course/Computer_Network/"/>
    <id>http://example.com/2022/10/20/Course/Computer_Network/</id>
    <published>2022-10-20T12:14:20.000Z</published>
    <updated>2022-10-21T08:33:41.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2网络边缘"><a href="#1-2网络边缘" class="headerlink" title="1.2网络边缘"></a>1.2网络边缘</h2><h3 id="1-2-1服务模式"><a href="#1-2-1服务模式" class="headerlink" title="1.2.1服务模式"></a>1.2.1服务模式</h3><p>C&#x2F;S模式<br>可扩展性较差<br>P2P模式<br>迅雷、电驴</p><h3 id="1-2-2服务模式"><a href="#1-2-2服务模式" class="headerlink" title="1.2.2服务模式"></a>1.2.2服务模式</h3><h4 id="1-2-2-1面向连接的服务"><a href="#1-2-2-1面向连接的服务" class="headerlink" title="1.2.2.1面向连接的服务"></a>1.2.2.1面向连接的服务</h4><p>TCP</p><ul><li>可靠的、按顺序的传送数据</li><li>流量控制</li><li>拥塞控制</li></ul><h4 id="1-2-2-2面向无连接的服务"><a href="#1-2-2-2面向无连接的服务" class="headerlink" title="1.2.2.2面向无连接的服务"></a>1.2.2.2面向无连接的服务</h4><p>UDP </p><ul><li>无连接</li><li>不可靠数据传输</li><li>无流量控制</li><li>无拥塞控制</li></ul><h2 id="1-3网络核心"><a href="#1-3网络核心" class="headerlink" title="1.3网络核心"></a>1.3网络核心</h2><h3 id="1-3-1电路交换"><a href="#1-3-1电路交换" class="headerlink" title="1.3.1电路交换"></a>1.3.1电路交换</h3><h4 id="1-3-1-2概述"><a href="#1-3-1-2概述" class="headerlink" title="1.3.1.2概述"></a>1.3.1.2概述</h4><ul><li>独享资源：不同享</li><li>每个呼叫一旦建立起来就能够<br>保证性能</li><li>如果呼叫没有数据发送，被分配的资源就会被浪费 (no sharing)</li><li>通常被传统电话网络采用</li></ul><h4 id="1-3-1-2分类"><a href="#1-3-1-2分类" class="headerlink" title="1.3.1.2分类"></a>1.3.1.2分类</h4><ul><li>频分(Frequencydivision multiplexing)</li><li>时分(Time-division multiplexing)</li><li>波分(Wave-division multiplexing)</li></ul><h4 id="1-3-1-3缺点"><a href="#1-3-1-3缺点" class="headerlink" title="1.3.1.3缺点"></a>1.3.1.3缺点</h4><ul><li>连接建立时间长</li><li>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多</li><li>即使这个呼叫没有数据传递，其所占据的片也不能够被别的呼叫使用</li><li>可靠性不高？</li></ul><h3 id="1-3-2分组交换"><a href="#1-3-2分组交换" class="headerlink" title="1.3.2分组交换"></a>1.3.2分组交换</h3><h4 id="1-3-2-1概述"><a href="#1-3-2-1概述" class="headerlink" title="1.3.2.1概述"></a>1.3.2.1概述</h4><p>适合于对突发式数据传输<br>资源共享</p><ul><li>简单，不必建立呼叫<br>过度使用会造成网络拥塞：分组延时和丢失</li><li>对可靠地数据传输需要协议来约束：拥塞控制<br>Q: 怎样提供类似电路交换的服务？</li><li>保证音频&#x2F;视频应用需要的带宽</li><li>一个仍未解决的问题(chapter 7)</li></ul><h4 id="1-3-2-2分类"><a href="#1-3-2-2分类" class="headerlink" title="1.3.2.2分类"></a>1.3.2.2分类</h4><p>数据报</p><ul><li>分组的目标地址决定下一跳</li><li>在不同的阶段，路由可以改变</li><li>在通信之前,无须建立起一个连接,有数据就传输</li><li>每一个分组都独立路由(路径不一样,可能会失序)<br>虚电路</li><li>每个分组都带标签（虚电路标识 VC ID），标签决定下一跳</li><li>在呼叫建立时决定路径，在整个呼叫中路径保持不变</li><li>路由器维持每个呼叫的状态信息</li><li>X.25 和ATM</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-2网络边缘&quot;&gt;&lt;a href=&quot;#1-2网络边缘&quot; class=&quot;headerlink&quot; title=&quot;1.2网络边缘&quot;&gt;&lt;/a&gt;1.2网络边缘&lt;/h2&gt;&lt;h3 id=&quot;1-2-1服务模式&quot;&gt;&lt;a href=&quot;#1-2-1服务模式&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>语义分割(Semantic Segmentation)</title>
    <link href="http://example.com/2022/10/11/Course/Semantic_segmentation/"/>
    <id>http://example.com/2022/10/11/Course/Semantic_segmentation/</id>
    <published>2022-10-11T08:16:20.000Z</published>
    <updated>2022-10-11T08:19:05.702Z</updated>
    
    <content type="html"><![CDATA[<p>语义分割(semantic segmentation)FCN<br>实例分割( Instance segmentation)Mask R-CNN<br>全景分割(Panoramic segmentation) Panoptic FPN</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;语义分割(semantic segmentation)FCN&lt;br&gt;实例分割( Instance segmentation)Mask R-CNN&lt;br&gt;全景分割(Panoramic segmentation) Panoptic FPN&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何开始阅读论文</title>
    <link href="http://example.com/2022/09/30/Others/science/"/>
    <id>http://example.com/2022/09/30/Others/science/</id>
    <published>2022-09-30T10:16:43.000Z</published>
    <updated>2022-09-30T10:19:11.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文献阅读量"><a href="#文献阅读量" class="headerlink" title="文献阅读量"></a>文献阅读量</h1><ol><li>刚开始的时候可以先挑选看10篇论文，精度5篇</li><li>20-30篇的时候大概有改进思路</li><li>40篇的时候大概能知道怎么写了</li></ol><h1 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h1><p>老师说要大量的阅读文献并不是完全正确的，应该在自己的方向上大量阅读文献，尽快确定自己想要做的研究的点，在这个点上再多做扩展<br>比如:想要做智能割草机，老师就和我说了路径规划，那么大概的思路是:<br>1）如果是大方向的话，比如机器视觉，可以先找相关的综述，知网搜:机器视觉综述，看2-3篇综述<br>判断大方向的依据就是综述能不能搜出来，比如割草机综述就没有，路径规划综述就有<br>1）路径规划先看个5-6篇，知道有全覆盖的和局部的<br>2）全覆盖的有牛耕法，波形法…..找全覆盖的论文5-6篇，每种方法1-2篇<br>局部的路径规划，点对点的有A<em>，D</em>,DFS,智能算法有蚁群的，遗传算法的就每个找2-3篇<br>那现在应该有大概20篇的论文量了，可以思考一下自己的论文准备怎么写<br>3）想想自己的研究方向是什么，这个方向热点的研究方向是什么。热点的研究指的是最近2-3年内知网的发文频率是否比较高<br>比如我看到了最近很多人智能算法的结合经常发水文，比如蚁群结合遗传，遗传结合粒子群，模拟退火结合dfs，那我现在也想做这个方向了<br>4）大致敲定自己用什么方法，比如我首先先想用蚁群的结合什么不管，那我就起码找10篇及以上蚁群的论文，因为我现在就是要些这个东西，所以我必须要对这个方向做充分充分的了解，所以看再多的论文都不嫌多，感觉10是最最起码的数量了<br>5）看完别人的思路，那就可以开始准备代码，开始做自己的实践了，可以先尝试把别人做的事情复现出来<br>6）寻找创新点，现在不仅仅是要对这个领域有了解，而是要去找怎么去改进自己现在做的这个工作，我的话就是怎么去优化蚁群算法<br>7）一篇水文搞完了</p><h1 id="大量阅读的目的"><a href="#大量阅读的目的" class="headerlink" title="大量阅读的目的"></a>大量阅读的目的</h1><ol><li>大量阅读的目的就是为了知道当前领域内的同行都在干什么，他们做到什么程度了。</li><li>我最开始陷入了大量乱看的误区，机器学习看一点,slam看一点，路径规划看一点，导致每个领域都不深入，杂乱的明明看了20多篇了还是什么思路都没有，不知道对于割草机我可以做什么，我可以怎么改进</li><li>后来想着就做路径规划这个方向，就是对于同一个问题给机器人做路径规划这个我问题，看了很多人不同的解决方法，不同的人有不同的做法，都是做路径规划，大家都在相同的事物上用了不同方法，就慢慢有了思路</li></ol><h1 id="关于英文文献"><a href="#关于英文文献" class="headerlink" title="关于英文文献"></a>关于英文文献</h1><ol><li>英文文献的质量的确比较高，英文水平不够的情况下，阅读英文文献得性价比是很低的。</li><li>应该先看个10篇左右中文，了解这个领域大概有一些什么。对术语方法之类的有了了解，即使英文文章看不懂，看图，看表格，可以快速筛选出是不是自己想要的文章</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文献阅读量&quot;&gt;&lt;a href=&quot;#文献阅读量&quot; class=&quot;headerlink&quot; title=&quot;文献阅读量&quot;&gt;&lt;/a&gt;文献阅读量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;刚开始的时候可以先挑选看10篇论文，精度5篇&lt;/li&gt;
&lt;li&gt;20-30篇的时候大概有改进思路&lt;/li</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark 教程</title>
    <link href="http://example.com/2022/09/28/Tutorial/Wireshark-tutorial/"/>
    <id>http://example.com/2022/09/28/Tutorial/Wireshark-tutorial/</id>
    <published>2022-09-28T12:18:48.000Z</published>
    <updated>2022-10-23T02:40:01.681Z</updated>
    
    <content type="html"><![CDATA[<p>ip.addr &#x3D;&#x3D; 110.242.68.3 and icmp<br>ip.addr &#x3D;&#x3D; 192.168.1.9 and tcp.port &#x3D;&#x3D; 8888<br>ip.addr &#x3D;&#x3D; 192.168.43.12 and tcp.port &#x3D;&#x3D; 8888</p><p>视图-&gt;着色规则<br>绿色背景的是HTTP包<br>灰色背景的是TCP包。<br>黑色背景的是TCP错误包或者校验和错误的包</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>安装的时候检测不到网卡</li><li>什么都捕捉不到<br>用管理员方式启动</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[wireshark抓包不显示结果，还是空白的]<a href="https://blog.csdn.net/WQLWWW/article/details/115488382">https://blog.csdn.net/WQLWWW/article/details/115488382</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ip.addr &amp;#x3D;&amp;#x3D; 110.242.68.3 and icmp&lt;br&gt;ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.9 and tcp.port &amp;#x3D;&amp;#x3D; 8888&lt;br&gt;ip.addr &amp;#x3D;&amp;#x3D; 192</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>k8s命令</title>
    <link href="http://example.com/2022/09/25/Course/k8s-commad/"/>
    <id>http://example.com/2022/09/25/Course/k8s-commad/</id>
    <published>2022-09-25T12:26:56.000Z</published>
    <updated>2022-09-25T13:30:46.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-命令式对象管理-kubectl命令"><a href="#1-命令式对象管理-kubectl命令" class="headerlink" title="1. 命令式对象管理 kubectl命令"></a>1. 命令式对象管理 kubectl命令</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="selector-attr">[command]</span> <span class="selector-attr">[type]</span> <span class="selector-attr">[name]</span> <span class="selector-attr">[flags]</span></span><br></pre></td></tr></table></figure><p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete<br><strong>type</strong>：指定资源类型，比如deployment、pod、service<br><strong>name</strong>：指定资源的名称，名称大小写敏感<br><strong>flags</strong>：指定额外的可选参数</p><h2 id="1-1-操作（command）"><a href="#1-1-操作（command）" class="headerlink" title="1.1 操作（command）"></a>1.1 操作（command）</h2><p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令<br>kubectl –help</p><p>经常使用的操作有下面这些：</p><table><thead><tr><th align="left">命令分类</th><th align="left">命令</th><th align="left">翻译</th><th align="left">命令作用</th></tr></thead><tbody><tr><td align="left">基本命令</td><td align="left">create</td><td align="left">创建</td><td align="left">创建一个资源</td></tr><tr><td align="left"></td><td align="left">edit</td><td align="left">编辑</td><td align="left">编辑一个资源</td></tr><tr><td align="left"></td><td align="left">get</td><td align="left">获取</td><td align="left">获取一个资源</td></tr><tr><td align="left"></td><td align="left">patch</td><td align="left">更新</td><td align="left">更新一个资源</td></tr><tr><td align="left"></td><td align="left">delete</td><td align="left">删除</td><td align="left">删除一个资源</td></tr><tr><td align="left"></td><td align="left">explain</td><td align="left">解释</td><td align="left">展示资源文档</td></tr><tr><td align="left">运行和调试</td><td align="left">run</td><td align="left">运行</td><td align="left">在集群中运行一个指定的镜像</td></tr><tr><td align="left"></td><td align="left">expose</td><td align="left">暴露</td><td align="left">暴露资源为Service</td></tr><tr><td align="left"></td><td align="left">describe</td><td align="left">描述</td><td align="left">显示资源内部信息</td></tr><tr><td align="left"></td><td align="left">logs</td><td align="left">日志输出容器在 pod 中的日志</td><td align="left">输出容器在 pod 中的日志</td></tr><tr><td align="left"></td><td align="left">attach</td><td align="left">缠绕进入运行中的容器</td><td align="left">进入运行中的容器</td></tr><tr><td align="left"></td><td align="left">exec</td><td align="left">执行容器中的一个命令</td><td align="left">执行容器中的一个命令</td></tr><tr><td align="left"></td><td align="left">cp</td><td align="left">复制</td><td align="left">在Pod内外复制文件</td></tr><tr><td align="left"></td><td align="left">rollout</td><td align="left">首次展示</td><td align="left">管理资源的发布</td></tr><tr><td align="left"></td><td align="left">scale</td><td align="left">规模</td><td align="left">扩(缩)容Pod的数量</td></tr><tr><td align="left"></td><td align="left">autoscale</td><td align="left">自动调整</td><td align="left">自动调整Pod的数量</td></tr><tr><td align="left">高级命令</td><td align="left">apply</td><td align="left">rc</td><td align="left">通过文件对资源进行配置</td></tr><tr><td align="left"></td><td align="left">label</td><td align="left">标签</td><td align="left">更新资源上的标签</td></tr><tr><td align="left">其他命令</td><td align="left">cluster-info</td><td align="left">集群信息</td><td align="left">显示集群信息</td></tr><tr><td align="left"></td><td align="left">version</td><td align="left">版本</td><td align="left">显示当前Server和Client的版本</td></tr></tbody></table><h2 id="1-2-资源类型（type）"><a href="#1-2-资源类型（type）" class="headerlink" title="1.2 资源类型（type）"></a>1.2 资源类型（type）</h2><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl api-resources</span></span><br></pre></td></tr></table></figure><p>经常使用的资源有下面这些：</p><table><thead><tr><th align="left">资源分类</th><th align="left">资源名称</th><th align="left">缩写</th><th align="left">资源作用</th></tr></thead><tbody><tr><td align="left">集群级别资源</td><td align="left">nodes</td><td align="left">no</td><td align="left">集群组成部分</td></tr><tr><td align="left"></td><td align="left">namespaces</td><td align="left">ns</td><td align="left">隔离Pod</td></tr><tr><td align="left">pod资源</td><td align="left">pods</td><td align="left">po</td><td align="left">装载容器</td></tr><tr><td align="left">pod资源控制器</td><td align="left">replicationcontrollers</td><td align="left">rc</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">replicasets</td><td align="left">rs</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">deployments</td><td align="left">deploy</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">daemonsets</td><td align="left">ds</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">jobs</td><td align="left"></td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">cronjobs</td><td align="left">cj</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">horizontalpodautoscalers</td><td align="left">hpa</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">statefulsets</td><td align="left">sts</td><td align="left">控制pod资源</td></tr><tr><td align="left">服务发现资源</td><td align="left">services</td><td align="left">svc</td><td align="left">统一pod对外接口</td></tr><tr><td align="left"></td><td align="left">ingress</td><td align="left">ing</td><td align="left">统一pod对外接口</td></tr><tr><td align="left">存储资源</td><td align="left">volumeattachments</td><td align="left"></td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumes</td><td align="left">pv</td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumeclaims</td><td align="left">pvc</td><td align="left">存储</td></tr><tr><td align="left">配置资源</td><td align="left">configmaps</td><td align="left">cm</td><td align="left">配置</td></tr><tr><td align="left"></td><td align="left">secrets</td><td align="left"></td><td align="left">配置</td></tr></tbody></table><h2 id="1-3-应用示例"><a href="#1-3-应用示例" class="headerlink" title="1.3 应用示例"></a>1.3 应用示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace dev  # 创建一个namespace</span><br><span class="line">kubectl get ns # 获取namespace</span><br><span class="line">kubectl run pod --image=nginx:latest -n dev # 在此namespace下创建并运行一个nginx的Pod</span><br><span class="line">kubectl get pod -n dev # 查看新创建的pod</span><br><span class="line">kubectl delete pod pod-864f9875b9-pcw7x # 删除指定的pod</span><br><span class="line">kubectl delete ns dev # 删除指定的namespace</span><br></pre></td></tr></table></figure><h1 id="2-常见资源"><a href="#2-常见资源" class="headerlink" title="2 常见资源"></a>2 常见资源</h1><h1 id="2-1-namspace"><a href="#2-1-namspace" class="headerlink" title="2.1 namspace"></a>2.1 namspace</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的命名空间</span></span><br><span class="line">kubectl get namespace</span><br><span class="line">kubectl get nc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定的命名空间</span></span><br><span class="line">kubectl get namespace default</span><br><span class="line">kubectl get ns default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定命名空间的输出格式</span></span><br><span class="line">kubectl get ns default -o wide</span><br><span class="line">kubectl get ns default -o json</span><br><span class="line">kubectl get ns default -o yaml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看命名空间的详情</span></span><br><span class="line">kubectl describe namespace default</span><br><span class="line">kubectl describe ns default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建命名空间</span></span><br><span class="line">kubectl create namespace dev</span><br><span class="line">kubectl create ns dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">除命名空间</span></span><br><span class="line">kubectl delete ns dev</span><br></pre></td></tr></table></figure><h1 id="3-Pod详解"><a href="#3-Pod详解" class="headerlink" title="3 Pod详解"></a>3 Pod详解</h1><h2 id="3-1-Pod的配置"><a href="#3-1-Pod的配置" class="headerlink" title="3.1 Pod的配置"></a>3.1 Pod的配置</h2><h2 id="3-2-Pod的生命周期"><a href="#3-2-Pod的生命周期" class="headerlink" title="3.2 Pod的生命周期"></a>3.2 Pod的生命周期</h2><h2 id="3-3-Pod的调度"><a href="#3-3-Pod的调度" class="headerlink" title="3.3 Pod的调度"></a>3.3 Pod的调度</h2><h1 id="4-Pod控制器详解"><a href="#4-Pod控制器详解" class="headerlink" title="4 Pod控制器详解"></a>4 Pod控制器详解</h1><ul><li>在kubernetes中，按照Pod的创建方式可以将其分为两类：<ul><li>自主式Pod：kubernetes直接创建出来的Pod，这种Pod删除后就没有了，也不会重建。</li><li>控制器创建Pod：通过Pod控制器创建的Pod，这种Pod删除之后还会自动重建。</li></ul></li><li>Pod控制器：Pod控制器是管理Pod的中间层，使用了Pod控制器之后，我们只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它就会创建出满足条件的Pod并确保每一个Pod处于用户期望的状态，如果Pod在运行中出现故障，控制器会基于指定的策略重启或重建Pod。</li><li>在kubernetes中，有很多类型的Pod控制器，每种都有自己的适合的场景，常见的有下面这些：<ul><li>ReplicationController：比较原始的Pod控制器，已经被废弃，由ReplicaSet替代。</li><li>ReplicaSet：保证指定数量的Pod运行，并支持Pod数量变更，镜像版本变更。</li><li>Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、版本回退。</li><li>Horizontal Pod Autoscaler：可以根据集群负载自动调整Pod的数量，实现削峰填谷。</li><li>DaemonSet：在集群中的指定Node上都运行一个副本，一般用于守护进程类的任务。</li><li>Job：它创建出来的Pod只要完成任务就立即退出，用于执行一次性任务。</li><li>CronJob：它创建的Pod会周期性的执行，用于执行周期性的任务。</li><li>StatefulSet：管理有状态的应用。</li></ul></li></ul><h2 id="4-1-Pod控制器的介绍"><a href="#4-1-Pod控制器的介绍" class="headerlink" title="4.1 Pod控制器的介绍"></a>4.1 Pod控制器的介绍</h2><h2 id="4-2-ReplicaSet（RS）"><a href="#4-2-ReplicaSet（RS）" class="headerlink" title="4.2 ReplicaSet（RS）"></a>4.2 ReplicaSet（RS）</h2><h2 id="4-3-Deployment（Deploy）"><a href="#4-3-Deployment（Deploy）" class="headerlink" title="4.3 Deployment（Deploy）"></a>4.3 Deployment（Deploy）</h2><h2 id="4-4-Horizontal-Pod-Autoscaler（HPA）"><a href="#4-4-Horizontal-Pod-Autoscaler（HPA）" class="headerlink" title="4.4 Horizontal Pod Autoscaler（HPA）"></a>4.4 Horizontal Pod Autoscaler（HPA）</h2><h2 id="4-5-DaemonSet（DS）"><a href="#4-5-DaemonSet（DS）" class="headerlink" title="4.5 DaemonSet（DS）"></a>4.5 DaemonSet（DS）</h2><h2 id="4-6-Job"><a href="#4-6-Job" class="headerlink" title="4.6 Job"></a>4.6 Job</h2><h2 id="4-7-CronJob（CJ）"><a href="#4-7-CronJob（CJ）" class="headerlink" title="4.7 CronJob（CJ）"></a>4.7 CronJob（CJ）</h2><h2 id="4-8-StatefulSet（有状态）"><a href="#4-8-StatefulSet（有状态）" class="headerlink" title="4.8 StatefulSet（有状态）"></a>4.8 StatefulSet（有状态）</h2><h1 id="5-Service详解"><a href="#5-Service详解" class="headerlink" title="5 Service详解"></a>5 Service详解</h1><p>在kubernetes中，Pod是应用程序的载体，我们可以通过Pod的IP来访问应用程序，但是Pod的IP地址不是固定的，这就意味着不方便直接采用Pod的IP对服务进行访问。</p><p>spec.type的说明：</p><ul><li>ClusterIP：默认值，它是kubernetes系统自动分配的虚拟IP，只能在集群内部访问。</li><li>NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务。</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境的支持。</li><li>ExternalName：把集群外部的服务引入集群内部，直接使用。</li></ul><h2 id="5-1-ClusterIP类型的Service"><a href="#5-1-ClusterIP类型的Service" class="headerlink" title="5.1 ClusterIP类型的Service"></a>5.1 ClusterIP类型的Service</h2><h2 id="5-2-HeadLiness类型的Service"><a href="#5-2-HeadLiness类型的Service" class="headerlink" title="5.2 HeadLiness类型的Service"></a>5.2 HeadLiness类型的Service</h2><h2 id="5-3-NodePort类型的Service"><a href="#5-3-NodePort类型的Service" class="headerlink" title="5.3 NodePort类型的Service"></a>5.3 NodePort类型的Service</h2><h2 id="5-4-LoadBalancer类型的Service"><a href="#5-4-LoadBalancer类型的Service" class="headerlink" title="5.4 LoadBalancer类型的Service"></a>5.4 LoadBalancer类型的Service</h2><h2 id="5-5-ExternalName类型的Service"><a href="#5-5-ExternalName类型的Service" class="headerlink" title="5.5 ExternalName类型的Service"></a>5.5 ExternalName类型的Service</h2><h2 id="5-1-Ingress介绍"><a href="#5-1-Ingress介绍" class="headerlink" title="5.1 Ingress介绍"></a>5.1 Ingress介绍</h2><h1 id="6-k8s的数据存储"><a href="#6-k8s的数据存储" class="headerlink" title="6 k8s的数据存储"></a>6 k8s的数据存储</h1><ul><li>在前面已经提到，容器的生命周期可能很短，会被频繁的创建和销毁。那么容器在销毁的时候，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器中的数据，kubernetes引入了Volume的概念。</li><li>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里面的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命周期不和Pod中的单个容器的生命周期有关，当容器终止或者重启的时候，Volume中的数据也不会丢失。</li><li>kubernetes的Volume支持多种类型，比较常见的有下面的几个：<ul><li>简单存储：EmptyDir、HostPath、NFS。</li><li>高级存储：PV、PVC。</li><li>配置存储：ConfigMap、Secret。</li></ul></li></ul><h2 id="6-1-基本存储"><a href="#6-1-基本存储" class="headerlink" title="6.1 基本存储"></a>6.1 基本存储</h2><h3 id="6-1-1-EmptyDir"><a href="#6-1-1-EmptyDir" class="headerlink" title="6.1.1 EmptyDir"></a>6.1.1 EmptyDir</h3><h3 id="6-1-2-HostPath"><a href="#6-1-2-HostPath" class="headerlink" title="6.1.2 HostPath"></a>6.1.2 HostPath</h3><h3 id="6-1-3-NFS"><a href="#6-1-3-NFS" class="headerlink" title="6.1.3 NFS"></a>6.1.3 NFS</h3><h2 id="6-2-高级存储"><a href="#6-2-高级存储" class="headerlink" title="6.2 高级存储"></a>6.2 高级存储</h2><h3 id="6-1-2-PV"><a href="#6-1-2-PV" class="headerlink" title="6.1.2 PV"></a>6.1.2 PV</h3><h3 id="6-1-3-PVC"><a href="#6-1-3-PVC" class="headerlink" title="6.1.3 PVC"></a>6.1.3 PVC</h3><h2 id="6-3-配置存储"><a href="#6-3-配置存储" class="headerlink" title="6.3 配置存储"></a>6.3 配置存储</h2><h3 id="6-1-2-ConfigMap"><a href="#6-1-2-ConfigMap" class="headerlink" title="6.1.2 ConfigMap"></a>6.1.2 ConfigMap</h3><h3 id="6-1-3-Secret"><a href="#6-1-3-Secret" class="headerlink" title="6.1.3 Secret"></a>6.1.3 Secret</h3><h1 id="7-高级部分（暂时不准备做）"><a href="#7-高级部分（暂时不准备做）" class="headerlink" title="7 高级部分（暂时不准备做）"></a>7 高级部分（暂时不准备做）</h1><h2 id="k8s的Helm"><a href="#k8s的Helm" class="headerlink" title="k8s的Helm"></a>k8s的Helm</h2><h2 id="k8s的安全认证"><a href="#k8s的安全认证" class="headerlink" title="k8s的安全认证"></a>k8s的安全认证</h2><h2 id="搭建DashBoard"><a href="#搭建DashBoard" class="headerlink" title="搭建DashBoard"></a>搭建DashBoard</h2><h2 id="kubeadm安装高可用k8s集群"><a href="#kubeadm安装高可用k8s集群" class="headerlink" title="kubeadm安装高可用k8s集群"></a>kubeadm安装高可用k8s集群</h2><h2 id="k8s的项目部署"><a href="#k8s的项目部署" class="headerlink" title="k8s的项目部署"></a>k8s的项目部署</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-命令式对象管理-kubectl命令&quot;&gt;&lt;a href=&quot;#1-命令式对象管理-kubectl命令&quot; class=&quot;headerlink&quot; title=&quot;1. 命令式对象管理 kubectl命令&quot;&gt;&lt;/a&gt;1. 命令式对象管理 kubectl命令&lt;/h1&gt;&lt;fi</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VScode 环境安装</title>
    <link href="http://example.com/2022/09/22/Environment-Configuration/vscode-install-tutorial/"/>
    <id>http://example.com/2022/09/22/Environment-Configuration/vscode-install-tutorial/</id>
    <published>2022-09-22T08:30:31.000Z</published>
    <updated>2022-10-23T11:42:49.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、官网下载vscode"><a href="#一、官网下载vscode" class="headerlink" title="一、官网下载vscode"></a>一、官网下载vscode</h1><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>安装的时候记得把<br>将”通过 code打开”操作添加到 Windows资源管理器文件上下文菜单<br>打钩</p><h1 id="三、常用的扩展"><a href="#三、常用的扩展" class="headerlink" title="三、常用的扩展"></a>三、常用的扩展</h1><table><thead><tr><th>扩展名</th><th>功能</th></tr></thead><tbody><tr><td><strong>通用的</strong></td><td></td></tr><tr><td>Chinese (Simplified) (简体中文)</td><td>中文翻译</td></tr><tr><td>Code Runner</td><td>展开全部代码</td></tr><tr><td>Markdown Preview Enhanced</td><td>Markdown查看</td></tr><tr><td>C++相关</td><td></td></tr><tr><td><strong>C&#x2F;C++</strong></td><td>写C++代码</td></tr><tr><td>C&#x2F;C++ Extension</td><td></td></tr><tr><td>CMake</td><td></td></tr><tr><td>CMake Tools</td><td></td></tr><tr><td>C&#x2F;C++ Extension Pack</td><td></td></tr><tr><td><strong>HTML</strong></td><td></td></tr><tr><td>Auto Rename Tag</td><td>自动修改前后标签名</td></tr><tr><td>open in browser</td><td>在浏览器中打开</td></tr><tr><td>CSS Peek</td><td>追踪CSS样式</td></tr><tr><td>HTML CSS Support</td><td>HTML样式支持</td></tr><tr><td><strong>Vue</strong></td><td></td></tr><tr><td>Live Server</td><td>保存后动态显示</td></tr><tr><td><strong>Git</strong></td><td></td></tr><tr><td>Git History</td><td>查看git历史提交记录</td></tr><tr><td>GitLens</td><td></td></tr><tr><td><strong>GoLang</strong></td><td></td></tr><tr><td>go</td><td>语法支持</td></tr><tr><td>vscode-proto3</td><td>查看protobuf格式</td></tr><tr><td><strong>Jinja2</strong></td><td></td></tr><tr><td>Jinja</td><td>jinja语法支持</td></tr><tr><td><strong>Shell</strong></td><td></td></tr><tr><td>shell-format</td><td>格式化工具</td></tr><tr><td>shellman</td><td>代码提示工具</td></tr><tr><td><strong>远程控制</strong></td><td></td></tr><tr><td>Remote - SSH</td><td>远程ssh连接</td></tr><tr><td>Remote - Containers</td><td></td></tr><tr><td>Remote - SSH: Editing Configuration Files</td><td></td></tr></tbody></table><h1 id="五、配置c-x2F-c-环境"><a href="#五、配置c-x2F-c-环境" class="headerlink" title="五、配置c&#x2F;c++环境"></a>五、配置c&#x2F;c++环境</h1><ol><li>安装mingw</li><li>ctl+shift+P<br>C&#x2F;C++: Edit Configurations (UI)<br>编译器路径<br>D:\MinGW\bin\gcc.exe</li></ol><h2 id="c-调试的原理"><a href="#c-调试的原理" class="headerlink" title="c++调试的原理"></a>c++调试的原理</h2><ol><li>先使用tasks.json来创建一个任务</li></ol><ul><li>tasks.json文件可以对程序进行编译，对于C++来说，可以使用gcc,g++,make,cmake,shell脚本</li><li>可以先测试task能否正常运行，这一步的测试就是测试程序是否能编译通过</li></ul><ol start="2"><li>通过launch.json调用想要使用的任务<br>这是启动vscode的调试功能<br>需要做一些配置<br>再启动gdb调试器来进行调试</li><li>添加c_cpp_properties.json增加C++的语言支持</li></ol><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>创建一个.vscode文件夹</p><h3 id="1-tasks-json"><a href="#1-tasks-json" class="headerlink" title="1.tasks.json"></a>1.tasks.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplusplustest&quot;</span><span class="punctuation">,</span>   <span class="comment">//任务的名字，就是刚才在命令面板中选择的时候所看到的，可以自己设置</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// &quot;command&quot;: &quot;g++ ./123.cpp -o 123 -g -std=c++11&quot;, // 可以使用一行命令的方法，不需要下面添加参数</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span>   <span class="comment">// 或者就只写g++,下面添加参数</span></span><br><span class="line">            <span class="comment">// &quot;args&quot;: [//编译时候的参数</span></span><br><span class="line">            <span class="comment">//     &quot;./123.cpp&quot;,    // 想要调试的文件，可以写相对路径也可以写绝对路径</span></span><br><span class="line">            <span class="comment">//     &quot;-o&quot;,           // 指定生成可执行文件的名称</span></span><br><span class="line">            <span class="comment">//     &quot;debug.exe&quot;,    // 如果不加后缀名，自动会添加.exe</span></span><br><span class="line">            <span class="comment">//     &quot;-g&quot;,           // 添加gdb调试选项</span></span><br><span class="line">            <span class="comment">//     &quot;-std=c++11&quot;    // 使用C++11标准</span></span><br><span class="line">            <span class="comment">// ],</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span>   <span class="comment">// 自动查找当前执行的文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>   <span class="comment">// 设置生成的文件名，可以为中文</span></span><br><span class="line">                <span class="string">&quot;-std=c++11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">// &quot;-fexec-charset=GBK&quot; //解决中文乱码问题,还没有遇到过</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// &quot;owner&quot;: &quot;cpp&quot;,</span></span><br><span class="line">                <span class="comment">// &quot;fileLocation&quot;: [</span></span><br><span class="line">                <span class="comment">//     &quot;relative&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">                <span class="comment">// ],</span></span><br><span class="line">                <span class="comment">// &quot;pattern&quot;: &#123;</span></span><br><span class="line">                <span class="comment">//     &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;file&quot;: 1,</span></span><br><span class="line">                <span class="comment">//     &quot;line&quot;: 2,</span></span><br><span class="line">                <span class="comment">//     &quot;column&quot;: 3,</span></span><br><span class="line">                <span class="comment">//     &quot;severity&quot;: 4,</span></span><br><span class="line">                <span class="comment">//     &quot;message&quot;: 5</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span>   <span class="comment">// 问题分析器,还不太会用</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span>   <span class="comment">//表示快捷键Ctrl+Shift+B可以运行该任务</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-launch-json"><a href="#2-launch-json" class="headerlink" title="2.launch.json"></a>2.launch.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。</span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplusplustest&quot;</span><span class="punctuation">,</span> <span class="comment">//调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Debug&quot;</span><span class="punctuation">,</span>       <span class="comment">//配置文件的名字，可以随便起</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span>           <span class="comment">//调试的类型，Vscode现在支持很多，我这里主要是C，所以只能是cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>        <span class="comment">//配置文件的请求类型，有launch和attach两种，具体看官方文档</span></span><br><span class="line">            <span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span> <span class="comment">//硬件内核架构，为64bit，如图设置</span></span><br><span class="line">            <span class="comment">// &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/123.exe&quot;,   //可执行文件的路径和文件名称</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>   <span class="comment">//可执行文件的路径和文件名称</span></span><br><span class="line">            <span class="comment">// 整个路径名中，必须全部是是英文名称才可以进行调试</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="comment">//主函数调用时传入的参数</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>       <span class="comment">//设为true时程序将暂停在程序入口处</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/1-Algorithm_test&quot;</span><span class="punctuation">,</span>    <span class="comment">//调试时的工作目录</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>          <span class="comment">//不知道干嘛的</span></span><br><span class="line">            <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openOnSessionStart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>   <span class="comment">//调试时是否显示控制台窗口</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span>            <span class="comment">//指定连接的调试器，可以省略不写</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Qt/Qt5.9.9/Tools/mingw530_32/bin/gdb.exe&quot;</span><span class="punctuation">,</span>    <span class="comment">// 在windows调试的时候，需要加上gdb的路径</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-c-cpp-properties-json"><a href="#3-c-cpp-properties-json" class="headerlink" title="3.c_cpp_properties.json"></a>3.c_cpp_properties.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference</span></span><br><span class="line"><span class="comment">//.vscode文件夹局部的配置c_cpp_properties.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>            <span class="comment">// 这个是使用头文件时候vscode查找的路径，如果路径没有包含进来，头文件会有红色波浪线</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span> <span class="comment">// 当前工作目录下包含的所有文件</span></span><br><span class="line">                <span class="string">&quot;/vcpkg/x64-linux/installed/x64-linux/include/**&quot;</span><span class="punctuation">,</span>  <span class="comment">// 路径错误或者不存在看起来可以运行</span></span><br><span class="line">                <span class="string">&quot;D:\\MinGW\\lib\\gcc\\mingw32\\9.2.0\\**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="comment">// 这里定义的头文件在程序中使用的时候，#ifndef的内容不会灰色</span></span><br><span class="line">                <span class="string">&quot;F_OS_LINUX&quot;</span><span class="punctuation">,</span>         </span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;LOCAL&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span>       <span class="comment">// 指定c语言使用的语法版本</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span>   <span class="comment">// 指定c++使用的语法版本</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-gcc-x64&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用智能感知模式(IntelliSense)，映射到特定的体系</span></span><br><span class="line">            <span class="comment">// &quot;intelliSenseMode&quot;: &quot;windows-gcc-x86&quot;,   // windows中使用的配置</span></span><br><span class="line">            <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 浏览选项，主要用在转跳#include文件的时候，可以做一些模糊搜索</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">// 需要查找的路径</span></span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;D:\\MinGW\\lib\\gcc\\mingw32\\9.2.0\\**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>  <span class="comment">// 如果为true,只解析$&#123;workspaceFolder&#125;中的文件，false还会解析browse中的文件，存疑</span></span><br><span class="line">                <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="关于调试的一些疑问"><a href="#关于调试的一些疑问" class="headerlink" title="关于调试的一些疑问"></a>关于调试的一些疑问</h3><ol><li>使用了C++11的语法，但是C++11的语句，比如auto还是会报错<br>c_cpp_properties.json中添加<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li><li>使用了外部的库，比如opencv,QThread等库的时候，编译可以通过但是无法转跳<br>没有在include中增加包含库的路径</li></ol><h1 id="四、卸载"><a href="#四、卸载" class="headerlink" title="四、卸载"></a>四、卸载</h1><p>C:\Users$用户名.vscode<br>C:\Users$用户名\AppData\Roaming\Code【注】这里的“$用户名”根据自己的用户名而定。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/LIJIH/p/12533926.html#:~:text=%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85mingw%E8%BD%AF%E4%BB%B6%201.%20%E8%BF%9B%E5%85%A5%E5%AE%98%E7%BD%91%20www.mingw.org%202.%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BDdownloads%203.%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E5%9B%BE%E6%A0%87%204.%E7%82%B9%E5%87%BBinstall%20z,Changes%204.%E7%82%B9%E5%87%BBapply%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%205.%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%9C%A8%E7%82%B9%E5%87%BBclose%E5%85%B3%E9%97%AD%E8%BD%AF%E4%BB%B6%EF%BC%8C%E5%88%B0%E8%BF%99%E9%87%8Cmingw%E5%B0%B1%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%BA%86%E3%80%82%20%E4%B8%8B%E9%9D%A2%E5%B0%B1%E6%98%AF%E9%85%8D%E7%BD%AE%20%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%201%E9%80%89%E6%8B%A9%E6%88%91%E7%9A%84%E7%94%B5%E8%84%91%EF%BC%8C%E5%8F%B3%E9%94%AE%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%202.%E9%80%89%E6%8B%A9%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%203.%E9%80%89%E6%8B%A9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">mingw安装教程</a><br><a href="https://geek-docs.com/vscode/vscode-tutorials/vscode-task-configuration-parameters-and-task-results-analysis.html#:~:text=%E4%BB%BB%E5%8A%A1%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E7%94%B1%20tasks.json%20%E9%87%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B1%9E%E6%80%A7%20problemMatcher,%E6%9D%A5%E6%8E%A7%E5%88%B6%E7%9A%84%E3%80%82%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%20VS%20Code%20%E5%86%85%E7%BD%AE%E7%9A%84%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6%E6%8F%90%E4%BE%9B%E7%9A%84%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%8C%E7%94%9A%E8%87%B3%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E4%B9%A6%E5%86%99%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%99%A8%E6%9D%A5%E5%88%86%E6%9E%90%E4%BB%BB%E5%8A%A1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E6%88%96%E8%80%85%E8%AD%A6%E5%91%8A%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%9C%A8%E9%97%AE%E9%A2%98%E9%9D%A2%E6%9D%BF%E4%B8%AD%E3%80%82">VSCode 任务配置参数及任务结果分析-problemMatcher</a><br>[VSCode配置C&#x2F;C++环境]<a href="https://zhuanlan.zhihu.com/p/87864677">https://zhuanlan.zhihu.com/p/87864677</a><br>[VScode配置c&#x2F;c++环境（无数试错版本）]<a href="https://blog.csdn.net/Pretty_Anno/article/details/126978142">https://blog.csdn.net/Pretty_Anno/article/details/126978142</a><br>[windwos11没有Hyper-V的解决方法]<a href="https://www.jianshu.com/p/96aa6eeacb56">https://www.jianshu.com/p/96aa6eeacb56</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、官网下载vscode&quot;&gt;&lt;a href=&quot;#一、官网下载vscode&quot; class=&quot;headerlink&quot; title=&quot;一、官网下载vscode&quot;&gt;&lt;/a&gt;一、官网下载vscode&lt;/h1&gt;&lt;h1 id=&quot;二、安装&quot;&gt;&lt;a href=&quot;#二、安装&quot; cla</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题目分类</title>
    <link href="http://example.com/2022/09/19/Interview-Q&amp;A/leetcode-programe/"/>
    <id>http://example.com/2022/09/19/Interview-Q&amp;A/leetcode-programe/</id>
    <published>2022-09-19T02:20:27.000Z</published>
    <updated>2022-10-08T06:26:13.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典树-Trie树、前缀树"><a href="#字典树-Trie树、前缀树" class="headerlink" title="字典树(Trie树、前缀树)"></a>字典树(Trie树、前缀树)</h2><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><ol start="208"><li><p>实现 Trie (前缀树)</p></li><li><p>单词替换</p></li><li><p>添加与搜索单词 - 数据结构设计</p></li><li><p>键值映射</p></li><li><p>实现一个魔法字典</p></li><li><p>前缀和后缀搜索</p></li><li><p>字符串的前缀分数和</p></li></ol><p>进阶：01字典树</p><h2 id="环检测-amp-拓扑排序"><a href="#环检测-amp-拓扑排序" class="headerlink" title="环检测 &amp; 拓扑排序"></a>环检测 &amp; 拓扑排序</h2><ol start="207"><li>课程表</li><li>课程表 II<br>剑指 Offer II 115. 重建序列</li></ol><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><ol start="698"><li>划分为k个相等的子集</li><li>火柴拼正方形</li><li>公平分发饼干</li></ol><p>思路：<br>1.回溯前的准备<br>2.要回溯什么<br>回溯函数内<br>3.终止条件<br>4.进入和退出怎么搞</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>思路：</p><ol><li>确定dp数组以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序<br><del>5. 举例推导dp数组</del></li></ol><p>写代码顺序：</p><ol start="0"><li>边界条件（最后考虑）</li><li>初始化</li><li>遍历</li><li>递推公式</li><li>返回</li></ol><p>能解决的问题：</p><h2 id="1-求最大值-x2F-最小值"><a href="#1-求最大值-x2F-最小值" class="headerlink" title="1.求最大值&#x2F;最小值"></a>1.求最大值&#x2F;最小值</h2><ol start="1014"><li>最佳观光组合</li><li>买卖股票的最佳时机</li><li>买卖股票的最佳时机 II<br>剑指 Offer 47. 礼物的最大价值<br>剑指 Offer 42. 连续子数组的最大和</li><li>下降路径最小和</li><li>三角形最小路径和</li></ol><h2 id="2-求是否可以完成组合"><a href="#2-求是否可以完成组合" class="headerlink" title="2.求是否可以完成组合"></a>2.求是否可以完成组合</h2><ol start="139"><li>单词拆分</li></ol><h2 id="3-求子数组-个数-x2F-最大值-x2F-长度"><a href="#3-求子数组-个数-x2F-最大值-x2F-长度" class="headerlink" title="3.求子数组 个数&#x2F;最大值&#x2F;长度"></a>3.求子数组 个数&#x2F;最大值&#x2F;长度</h2><ol start="413"><li>等差数列划分</li></ol><h2 id="4-组合总数"><a href="#4-组合总数" class="headerlink" title="4.组合总数"></a>4.组合总数</h2><p>剑指 Offer 10- II. 青蛙跳台阶问题<br>剑指 Offer 46. 把数字翻译成字符串</p><h2 id="5-最少操作数"><a href="#5-最少操作数" class="headerlink" title="5.最少操作数"></a>5.最少操作数</h2><ol start="72"><li>编辑距离</li></ol><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><ol start="55"><li>跳跃游戏</li><li>跳跃游戏 II</li></ol><h2 id="测试用例的设计"><a href="#测试用例的设计" class="headerlink" title="测试用例的设计"></a>测试用例的设计</h2><h3 id="边界条件的测试"><a href="#边界条件的测试" class="headerlink" title="边界条件的测试"></a>边界条件的测试</h3><p>0<br>最大值</p><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[详解前缀树「TrieTree 汇总级别整理 🔥🔥🔥」]<a href="https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution/by-lfool-w82u/">https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution/by-lfool-w82u/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字典树-Trie树、前缀树&quot;&gt;&lt;a href=&quot;#字典树-Trie树、前缀树&quot; class=&quot;headerlink&quot; title=&quot;字典树(Trie树、前缀树)&quot;&gt;&lt;/a&gt;字典树(Trie树、前缀树)&lt;/h2&gt;&lt;h3 id=&quot;模板题&quot;&gt;&lt;a href=&quot;#模板题&quot;</summary>
      
    
    
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://example.com/2022/09/16/Course/Machine_learning/"/>
    <id>http://example.com/2022/09/16/Course/Machine_learning/</id>
    <published>2022-09-16T08:23:50.000Z</published>
    <updated>2022-10-12T03:00:27.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实用机器学习-李沐"><a href="#实用机器学习-李沐" class="headerlink" title="实用机器学习-李沐"></a>实用机器学习-李沐</h1><h2 id="1-2-如何获取数据"><a href="#1-2-如何获取数据" class="headerlink" title="1.2 如何获取数据"></a>1.2 如何获取数据</h2><pre><code>找数据，生成数据</code></pre><p>数据<br>数据集——已经处理好的数据</p><p>MNIST:手写数据集<br>ImageNet:引领深度学习，百万级，搜索引擎中找来的<br>AudioSet:youtube声音切片<br>Kinetics:声音切片<br>KITTI：无人驾驶<br>Amazon Review:亚马逊评论<br>SQuAD:Wikipedia上问答<br>LibriSpeech：有声读物</p><p>数据获取手段：<br>网上爬取<br>采集数据</p><p>paperswithcodes Datasets: academic datasets withleaderboard<br>Kaggle Datasets: ML datasets uploaded by datascientists<br>Google Dataset search: search datasets in the Web<br>Various toolkits datasets: tensorflow, huggingface<br>Various conference&#x2F;company ML competitions<br>Open Data on AWS: 100+ large-scale raw data<br>Data lakes in your own organizationddd</p><p>生成数据,GANs<br>数据增强</p><h2 id="1-3-网页数据抓取"><a href="#1-3-网页数据抓取" class="headerlink" title="1.3 网页数据抓取"></a>1.3 网页数据抓取</h2><h2 id="1-4-数据标注"><a href="#1-4-数据标注" class="headerlink" title="1.4 数据标注"></a>1.4 数据标注</h2><p>监督学习<br>半监督学习<br>自学习<br>主动学习</p><p>弱监督学习——没钱没人——弱标号</p><h2 id="2-1-探索性数据分析"><a href="#2-1-探索性数据分析" class="headerlink" title="2.1 探索性数据分析"></a>2.1 探索性数据分析</h2><h2 id="2-2-数据清洗"><a href="#2-2-数据清洗" class="headerlink" title="2.2 数据清洗"></a>2.2 数据清洗</h2><p>图片分类<br>目标检测<br>语义分割<br>    有监督学习，对每个像素进行分割<br>    背景虚化<br>    路面分割</p><h1 id="4-1-评估指标"><a href="#4-1-评估指标" class="headerlink" title="4.1 评估指标"></a>4.1 评估指标</h1><p>准确率accuracy<br>精度precision<br>召回率recall<br>F1<br>AUC<br>CTR</p><p>lr学习率</p><p>loss: 0.5165 (0.7486)<br>损失函数</p><p>损失函数用来评价模型的预测值和真实值不一样的程度，损失函数越小，通常模型的性能越好。不同的模型用的损失函数一般也不一样。</p><h1 id="5-2-Bagging"><a href="#5-2-Bagging" class="headerlink" title="5.2 Bagging"></a>5.2 Bagging</h1><p>Bagging是并行式集成学习的最著名代表<br>它是基于自助采样法（Boostrap sampleing），Bagging也是同理.给定包含m个样本的数据集，先随机抽取一个样本放入采样集中，再把该样本放回，使得下次采样时该样本仍有机会被选中，这样经过m次采样，我们便从原始是数据集中抽取样本得到一个数据量同为m的数据集.<br><strong>有放回的抽样，最后取平均</strong></p><h1 id="9-1-模型调参"><a href="#9-1-模型调参" class="headerlink" title="9.1 模型调参"></a>9.1 模型调参</h1><h1 id="动手学习pytorch"><a href="#动手学习pytorch" class="headerlink" title="动手学习pytorch"></a>动手学习pytorch</h1><h2 id="11-模型选择-过拟合、欠拟合"><a href="#11-模型选择-过拟合、欠拟合" class="headerlink" title="11 模型选择+过拟合、欠拟合"></a>11 模型选择+过拟合、欠拟合</h2><h2 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h2><p>K-折交叉验证</p><p>参数名称 参数说明<br>学习率α 用于调整梯度下降的步幅<br>各层神经元数量Units 调整网络的宽度<br>Mini-Batch大小 单步迭代的效果<br>网络层数Layers 调整网络的深度<br>过滤器参数 过滤器数量~尺寸、步长及是否填充边距等<br>正则化方法 是否采用正则化，采用何种正则化方法<br>训练代数Epochs 决定梯度下降的迭代步数和训练持久程度<br>各层激励函数 影响模型各层之间的联系<br>优化算法 根据问题需要比较优化算法的效果<br>损失函数 评估模型误差的函数</p><h1 id="10-多层感知机"><a href="#10-多层感知机" class="headerlink" title="10 多层感知机"></a>10 多层感知机</h1><h2 id="11-过拟合、欠拟合"><a href="#11-过拟合、欠拟合" class="headerlink" title="11 过拟合、欠拟合"></a>11 过拟合、欠拟合</h2><p>训练集是图片，标号是和他一样大小的图片，每个像素值对应标号</p><p>先过拟合了，然后再想办法把过拟合消除掉</p><h1 id="46-语义分割和数据集"><a href="#46-语义分割和数据集" class="headerlink" title="46 语义分割和数据集"></a>46 语义分割和数据集</h1><p>实例分割</p><p>Pascal VOC2012</p><p>VOC格式</p><p>[机器学习开篇之机器学习的分类]<a href="https://blog.csdn.net/Lion_Dreams/article/details/125269215">https://blog.csdn.net/Lion_Dreams/article/details/125269215</a><br>[计算机视觉 - 语义分割 （semantic segmentation）]<a href="https://blog.csdn.net/baidu_41617231/article/details/107739897">https://blog.csdn.net/baidu_41617231/article/details/107739897</a><br>[机器学习：mAP评价指标]<a href="https://blog.csdn.net/qq_40765537/article/details/106394103">https://blog.csdn.net/qq_40765537/article/details/106394103</a><br>[PASCAL VOC2012数据集介绍]<a href="https://blog.csdn.net/qq_37541097/article/details/115787033">https://blog.csdn.net/qq_37541097/article/details/115787033</a><br>[损失函数（loss function）]<a href="https://blog.csdn.net/EmilyHoward/article/details/118367495">https://blog.csdn.net/EmilyHoward/article/details/118367495</a><br>[标注工具的使用]<a href="https://www.bilibili.com/video/BV1ev411P7dR/?spm_id_from=333.999.0.0&amp;vd_source=76dff3ae3b42b00d067c0921bf6859ca">https://www.bilibili.com/video/BV1ev411P7dR/?spm_id_from=333.999.0.0&amp;vd_source=76dff3ae3b42b00d067c0921bf6859ca</a><br>[Labelme工具对应博文]<a href="https://blog.csdn.net/qq_37541097/article/details/120162702">https://blog.csdn.net/qq_37541097/article/details/120162702</a><br>[安装labelme教程]<a href="https://blog.csdn.net/weixin_43427721/article/details/107122775">https://blog.csdn.net/weixin_43427721/article/details/107122775</a><br>[EISeg工具对应博文]<a href="https://blog.csdn.net/qq_37541097/article/details/120154543">https://blog.csdn.net/qq_37541097/article/details/120154543</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实用机器学习-李沐&quot;&gt;&lt;a href=&quot;#实用机器学习-李沐&quot; class=&quot;headerlink&quot; title=&quot;实用机器学习-李沐&quot;&gt;&lt;/a&gt;实用机器学习-李沐&lt;/h1&gt;&lt;h2 id=&quot;1-2-如何获取数据&quot;&gt;&lt;a href=&quot;#1-2-如何获取数据&quot; cla</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实习的感受</title>
    <link href="http://example.com/2022/09/15/Reflection/%E5%AE%9E%E4%B9%A0%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://example.com/2022/09/15/Reflection/%E5%AE%9E%E4%B9%A0%E7%9A%84%E6%84%9F%E5%8F%97/</id>
    <published>2022-09-15T13:59:20.000Z</published>
    <updated>2022-09-24T03:22:02.241Z</updated>
    
    <content type="html"><![CDATA[<p>主要写一写实习的感受，为以后的实习做借鉴，并且对这个事情做一些总结</p><h1 id="领导团队"><a href="#领导团队" class="headerlink" title="领导团队"></a>领导团队</h1><p>服务意识<br>1.给团队设定超过现在能力的目标，但是还是要够一够才能到达</p><p>2.团队的领导者要作为团队的服务着，需要找到团队需要解决的问题</p><ol><li>每周需要定期开组会，复盘这周完成的情况，这周遇到的问题<br>需要如果去解决<br>作为领导者，需要去协调解决组员的问题<br>并且对这周做的内容，需要有一个拓展性的提高<br>比如现在只能开80路的，但是要求到150路，最后不断努力可以到120路<br><strong>一定需要定时解决问题</strong></li></ol><p>完成了什么，现在还有什么问题</p><ol start="2"><li><p>从多个角度考虑，</p></li><li><p>设计一个系统的时候，需要先逼着自己从最大的角度去考虑，需要哪几个方面的东西，然后再去细化<br>如果东西太大，自己想不出来，那就先想到哪个点就做哪一个</p></li><li><p>如何平衡工作和生活<br>刚刚开始到公司的时候</p></li></ol><p>6-8月份，刚开始的时候无法接受公司里面的高强度工作，那就晚上回家以后多补课，</p><ol start="5"><li>如何解决公司中学习的知识比较杂乱的情况</li></ol><p>平时收集一些零散的东西，到了有大段空闲的时候，可以做总结</p><ol start="6"><li><p>如何的最快的熟悉一个领域<br>如何快速学习一门新的技术或者语言<br>是什么，这个怎么用<br>写一些小demo，<br>看公司里面的工程代码<br>找一些当前用到的典型场景，困难的回答，比如go的内存分配</p></li><li><p>读研之后发现自己和本科有什么区别</p></li><li><p>如何最快最好的解决一个问题，最好使用英文查询</p></li><li><p>小公司学不到东西，如何反驳</p></li></ol><ul><li><ol><li>了解公司用的技术栈，我做的是后端，那我现在做的工作，我做的工作的前面有什么，后面有什么<br>一起来的实习生在做什么，他做的东西我会做么，他做的东西我如何实现</li></ol></li><li><ol start="2"><li>常常保持好奇的心态，我虽然是后端，但是对于前端的技术，对于测试，产品，运维的相关知识，都是可以了解的</li></ol></li><li><ol start="3"><li>你要完成现在手头上的工作，是否会遇到问题，那么遇到问题的时候，比如看到raft算法，这是底层使用的东西，如果是有心去了解，那就会有更多可以发现的东西</li></ol></li><li><ol start="4"><li>如果完成了手头上的工作，可以用什么样的方法优化它</li></ol></li></ul><p>我觉得学不到东西，有着几种情况</p><ol><li>你的技术栈，完全覆盖了这个公司，他们干的所有事情，你都可以单挑完成</li></ol><ul><li>或者是，你对这个行业，比如说我对销售行业，完全不感兴趣，但是公司里面干的是这个事情，那的确是学不到东西</li></ul><ol start="2"><li><p>有很多很多的杂活<br>这个相对是更长的一段时间的感受，比如半年的时间，都是让你在东搞西搞，没有专心与一个技术栈，那这个公司对发展是不好的<br>但是在短期看来，干很多杂事，如果能干好，还是可以提高自己的能力</p></li><li><p>干一些低技术的工作，自己都会，也是打杂，这就很没有发展前景</p></li><li><p>怎样快速融入一个项目</p></li></ol><ul><li><ol><li>搭建环境，docker,k8s</li></ol></li><li><ol start="2"><li>让程序跑起来</li></ol></li><li><ol start="3"><li>了解调试方法</li></ol></li><li>刚开始的起步阶段，最好能找到参考的程序，网络上的，工程里相关的，前辈写的代码</li><li>最开始是自己先造一些东西，看看能不能实现功能</li><li>再是修改</li><li><ol start="4"><li>可以修改程序</li></ol></li><li>最开始先了解一个模块，可以自己造一个独立的模块</li><li>然后了解联动的1-3个模块，了解这几个模块之间的相互关系<br>（十分考验代码功底，需要静态查看，能做到不运行代码的情况下能看出程序是怎么运行的）</li></ul><p>如果无法让一个程序运行，那就思考自己是哪一步出现了问题</p><ol><li>搭建环境，docker,k8s<br>搭建环境的时候遇到了什么问题，如何去解决</li></ol><ul><li><ol start="2"><li>让程序跑起来<br>程序中是否出现了错误代码，为什么无法改正，是语法不熟悉，还是这个特殊的用法没有了解到，还是别的计算机基础相关的知识</li></ol></li></ul><ol start="9"><li><p>多从测试角度考虑，需要设计测试用例，对自己写的程序，要有测试的思路，什么情况会发生边界条件<br>好几个程序一起的时候，会不会互相影响</p></li><li><p>想要提高代码能力，最好的方法，就是去一点一点的把代码写出来，只要自己写过的，能力就能提升<br>只是看视频，提升是很慢的</p></li><li><p>提高搜索引擎关键词检索的效率</p></li><li><p>日常学习中，遇到的最大技术挑战是什么，你是如何解决的<br>最大的困难是什么，或者最大的成果是什么，最大的成就感是什么？</p></li></ol><p>1.问题描述：1）简单介绍这个项目规模、背景，你在这中间充当的角色；2）什么情况下遇到什么样的问题<br>2.你处理这个问题的过程及结果：1）遇到问题你如何思考；2）你如何执行的；3）处理结果如何<br>3.通过处理这个问题，你学到了什么或者说通过这个问题，你看到了你们什么不足，后续动作（采用什么样的方式，在以后的项目中避免再出现这类问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要写一写实习的感受，为以后的实习做借鉴，并且对这个事情做一些总结&lt;/p&gt;
&lt;h1 id=&quot;领导团队&quot;&gt;&lt;a href=&quot;#领导团队&quot; class=&quot;headerlink&quot; title=&quot;领导团队&quot;&gt;&lt;/a&gt;领导团队&lt;/h1&gt;&lt;p&gt;服务意识&lt;br&gt;1.给团队设定超过现在能力</summary>
      
    
    
    
    
    <category term="反思" scheme="http://example.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>小工具的使用</title>
    <link href="http://example.com/2022/08/23/Tutorial/%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/08/23/Tutorial/%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-23T07:49:26.000Z</published>
    <updated>2022-08-26T13:42:02.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navicat12-Mysql可视化查看工具"><a href="#Navicat12-Mysql可视化查看工具" class="headerlink" title="Navicat12 Mysql可视化查看工具"></a>Navicat12 Mysql可视化查看工具</h1><p>破解的时候需要关闭软件本身</p><p>需要在k8s中开放端口<br>修改mysql开放及端口：<br>开放：alias b&#x3D;”kubectl -n namespace”<br>         b edit svc mysql -n mysql<br>      加spec-底部type: NodePort         # 从ClusterIP改过来<br>修改端口：ports-nodePort:31198</p><p>数据库：<br>host&#x3D;[主机名],<br>user&#x3D;[用户名],<br>passwd&#x3D;[密码],<br>db&#x3D;[想要访问的数据库],<br>charset&#x3D;”utf8”,<br>port&#x3D;[使用的端口]</p><p>host&#x3D;”10.1.0.42”,<br>user&#x3D;”pigg”,<br>passwd&#x3D;”123456”,<br>db&#x3D;”ggip”,<br>charset&#x3D;”utf8”,<br>port&#x3D;31198</p><h2 id="查看表的情况"><a href="#查看表的情况" class="headerlink" title="查看表的情况"></a>查看表的情况</h2><p>”设计表“</p><h2 id="执行mysql语句以后的分析"><a href="#执行mysql语句以后的分析" class="headerlink" title="执行mysql语句以后的分析"></a>执行mysql语句以后的分析</h2><p>剖析：</p><p>1）Opening tables 这个是表示这个SQL拿到这个表的使用权所占用的时间，如果在一个SQL中过长，则有可能表示当前表被锁，被一些其他线程占用，可以查一下当前表的状态。<br>2）Sending data包括两个部分，收集和发送数据。这里的关键是为什么要收集数据，原因在于：mysql使用“索引”完成查询结束后，mysql得到了一堆的行id，如果有的列并不在索引中，mysql需要重新到“数据行”上将需要返回的数据读取出来返回个客户端。如果这部分占用时间过程，有可能是索引问题，或者字段长度过大导致。</p><h1 id="gRPC调试工具"><a href="#gRPC调试工具" class="headerlink" title="gRPC调试工具"></a>gRPC调试工具</h1><p>BloomRPC<br>可以调试utilserver这个特别复杂的服务<br>在调试的时候，需要把包含的文件，还有包含文件的包含文件全部导入</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[使用Navicat分析SQL性能]<a href="https://blog.csdn.net/weixin_43416686/article/details/121037223">https://blog.csdn.net/weixin_43416686/article/details/121037223</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Navicat12-Mysql可视化查看工具&quot;&gt;&lt;a href=&quot;#Navicat12-Mysql可视化查看工具&quot; class=&quot;headerlink&quot; title=&quot;Navicat12 Mysql可视化查看工具&quot;&gt;&lt;/a&gt;Navicat12 Mysql可视化查看</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>小工具的使用</title>
    <link href="http://example.com/2022/08/23/Tutorial/small_tool/"/>
    <id>http://example.com/2022/08/23/Tutorial/small_tool/</id>
    <published>2022-08-23T07:49:26.000Z</published>
    <updated>2022-10-12T12:18:52.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navicat12-Mysql可视化查看工具"><a href="#Navicat12-Mysql可视化查看工具" class="headerlink" title="Navicat12 Mysql可视化查看工具"></a>Navicat12 Mysql可视化查看工具</h1><p>破解的时候需要关闭软件本身</p><p>需要在k8s中开放端口<br>修改mysql开放及端口：<br>开放：alias b&#x3D;”kubectl -n namespace”<br>         b edit svc mysql -n mysql<br>      加spec-底部type: NodePort         # 从ClusterIP改过来<br>修改端口：ports-nodePort:31198</p><p>数据库：<br>host&#x3D;[主机名],<br>user&#x3D;[用户名],<br>passwd&#x3D;[密码],<br>db&#x3D;[想要访问的数据库],<br>charset&#x3D;”utf8”,<br>port&#x3D;[使用的端口]</p><p>host&#x3D;”10.1.0.42”,<br>user&#x3D;”pigg”,<br>passwd&#x3D;”123456”,<br>db&#x3D;”ggip”,<br>charset&#x3D;”utf8”,<br>port&#x3D;31198</p><h2 id="查看表的情况"><a href="#查看表的情况" class="headerlink" title="查看表的情况"></a>查看表的情况</h2><p>”设计表“</p><h2 id="执行mysql语句以后的分析"><a href="#执行mysql语句以后的分析" class="headerlink" title="执行mysql语句以后的分析"></a>执行mysql语句以后的分析</h2><p>剖析：</p><p>1）Opening tables 这个是表示这个SQL拿到这个表的使用权所占用的时间，如果在一个SQL中过长，则有可能表示当前表被锁，被一些其他线程占用，可以查一下当前表的状态。<br>2）Sending data包括两个部分，收集和发送数据。这里的关键是为什么要收集数据，原因在于：mysql使用“索引”完成查询结束后，mysql得到了一堆的行id，如果有的列并不在索引中，mysql需要重新到“数据行”上将需要返回的数据读取出来返回个客户端。如果这部分占用时间过程，有可能是索引问题，或者字段长度过大导致。</p><h1 id="gRPC调试工具"><a href="#gRPC调试工具" class="headerlink" title="gRPC调试工具"></a>gRPC调试工具</h1><p>BloomRPC<br>可以调试utilserver这个特别复杂的服务<br>在调试的时候，需要把包含的文件，还有包含文件的包含文件全部导入</p><h1 id="kdevelop"><a href="#kdevelop" class="headerlink" title="kdevelop"></a>kdevelop</h1><p>CMake可视化调试工具</p><p>打开命令窗口:</p><ol><li><p>安装gcc(编译器)<br> sudo apt-get build-dep gcc<br> sudo apt-get install build-essential</p></li><li><p>安装kdevelop<br>sudo apt-get install kdevelop</p></li><li><p>安装cmake等<br>sudo apt-get install automake autoconf g++ libtool cmake</p></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[使用Navicat分析SQL性能]<a href="https://blog.csdn.net/weixin_43416686/article/details/121037223">https://blog.csdn.net/weixin_43416686/article/details/121037223</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Navicat12-Mysql可视化查看工具&quot;&gt;&lt;a href=&quot;#Navicat12-Mysql可视化查看工具&quot; class=&quot;headerlink&quot; title=&quot;Navicat12 Mysql可视化查看工具&quot;&gt;&lt;/a&gt;Navicat12 Mysql可视化查看</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实习中学到的内容</title>
    <link href="http://example.com/2022/08/22/Reflection/%E5%AE%9E%E4%B9%A0%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    <id>http://example.com/2022/08/22/Reflection/%E5%AE%9E%E4%B9%A0%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E6%9C%AF/</id>
    <published>2022-08-22T12:02:55.000Z</published>
    <updated>2022-09-15T14:05:45.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实习中学到的新技术"><a href="#实习中学到的新技术" class="headerlink" title="实习中学到的新技术"></a>实习中学到的新技术</h1><p>2022.3~2022.4 基于 Linux 的 TinyWebServer<br>项目描述:该项目是为学习 Linux 网络编程知识，在 Linux 环境下使用 C++语言开发的轻量级多线程 HTTP<br>服务器，服务器支持一定数量的客户端连接并及时响应，支持客户端访问服务器的图片、视频等资源。<br>主要工作: 1、使用 Socket 实现不同主机之间的通信;<br>2、使用 Epoll 技术实现 I&#x2F;O 多路复用，提高效率;<br>3、使用有限状态机解析 HTTP 请求报文，对 GET 和 POST 请求进行处理4、利用多线程的机制，增加并行服务数量。<br>项目难点: 1、实现线程池，提高吞吐量;<br>2、编写主从状态机对 HTTP 报文进行解析;<br>个人收获: 1、在此项目中，使用 Makefile 进行编译，掌握一门全新的技术;<br>2、对 HTTP 的服务过程以及 TCP 三次握手有了更深的了解﹔<br>3、对于 Socket 通信以及 I&#x2F;0 复用有了一定的理解，对已有知识进行夯实</p><p>2021.12~2022.1 杭州大数云智科技有限公司<br>1.通过学习 GitHub 上的开源项目 MotionPlanning，通过 python 实现一些路径规划的算法。。<br>2.使用 Vscode 通过 ssh 连接调试塔克机器人小车，通过 Ubuntu16.04 虚拟机搭载 ROS Melodic ，连接<br>小车，进行激光雷达、双目摄像头和深度相机的 SLAM 建模</p><p>2022.6~2022.8 杭州后起智能科技有限公司</p><p>1.加强了Git的各种使用方式</p><p>自己的全面总结：<br>思想上：</p><ol><li>了解了公司的运行流程，互联网公司的组成模式<br>技术上：</li><li>语言：</li></ol><p>5个go项目<br>4个c++项目,三个都和shell相关<br>3个数据库相关，MySQL<br>5个shell项目，两个重度shell<br>ansible,k8s,docker<br><del>wsl</del></p><h1 id="新学的技术"><a href="#新学的技术" class="headerlink" title="新学的技术"></a>新学的技术</h1><p>docker<br>k8s<br>kubectl<br>grpc<br>git lfs<br>go语言</p><p>Protocol Buffer<br>序列化及对象关系映射（Object Relational Mapping，简称 ORM）系统<br>结构体标签<br>workpool</p><p>HTTP 消息首部MIME 类型<br>poc<br>gorm中的事务，redis中事务</p><p>并发读写，并发锁sync.Map<br>redis-cli<br>数据库<br>    TIDB<br>    redis</p><p>存储<br>    分布式存储GlusterFS<br>    TIKV<br>    minio</p><p>linux的VFS内容<br>etcd数据库备份<br>Ansible<br>cfssl证书<br>jinja<br>crontab自动执行<br>原型软件axure<br>BloomRPC<br>C++技术<br>    Snowflake算法<br>    消息阻塞队列<br>    对象池<br>        CustomObjectPool<br>        ObjectPool</p><h2 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h2><ul><li>grpc</li><li>grom</li><li>prototobuf</li><li>消息队列</li><li>分布式追踪系统 – Opentracing<br>navicate mysqlGUI工具<br>nsqlookupd：高性能消息中间件 NSQ 解析<br>NSQ——订阅摘要和推送摘要，日志流中间件<br>消息队列</li></ul><h1 id="对一些内容的详细解释"><a href="#对一些内容的详细解释" class="headerlink" title="对一些内容的详细解释"></a>对一些内容的详细解释</h1><h2 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h2><pre><code>kubernetesIAAS——基础服务设施PAAS——平台服务设施    docker——paas的下一代标准    k8s解决集群问题，每个机器里面都有一个docker    容器的集群化，资源管理器    apache——MESOS        分布式资源管理框架        2019 twitter不用了        推特在用，现在在用k8s    docker swarm        docker母公司        swarm集群        2019-7            阿里云宣布 docker swarm剔除    kubernetes        goolgle            10年容器化基础架构            公司里面在用borg            现在用go写了一个borg        特点            轻量级，消耗的资源少            开源            弹性伸缩            负载均衡：IPVS框架    人群        软件工程师        测试、运维、产品经理        需要了解产品底层框架SAASraft算法snap——wal——日志持久化存储</code></pre><h2 id="分布式追踪系统-–-Opentracing"><a href="#分布式追踪系统-–-Opentracing" class="headerlink" title="分布式追踪系统 – Opentracing"></a>分布式追踪系统 – Opentracing</h2><pre><code>OpenTracing 于 2016 年 10 月加入 CNCF 基金会，是继 Kubernetes 和 Prometheus 之后，第三个加入 CNCF 的开源项目可方便开发者在自己的服务中集成一种或多种分布式追踪的实现Logging &amp; Metrics：可聚合的事件。例如分析某对象存储的 Nginx 日志，统计某段时间内GET、PUT、DELETE、OPTIONS 操作的总数。 Metrics &amp; Tracing：单个请求中的可计量数据。例如 SQL执行总时长、gRPC 调用总次数。 Tracing &amp; Logging：请求阶段的标签数据。例如在 Tracing的信息中标记详细的错误原因。Logging：ELK，近几年势头最猛的日志分析服务，无须多言。Metrics：Prometheus，第二个加入 CNCF 的开源项目，非常好用。Tracing：OpenTracing 和 Jaeger，Jaeger 是 Uber 开源的一个兼容 OpenTracing 标准的分布式追踪服务。目前 Jaeger 也加入了 CNCF。</code></pre><h1 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h1><p>SaaS是Software-as-a-Service的缩写名称，意思为软件即服务<br>    Facebook，Twitter，  Instagram。 Google Apps, Dropbox, Salesforce, Cisco WebEx, Concur, GoToMeeting。</p><p>PaaS：Platform-as-a-Service（平台即服务）提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。<br>    MySQL，Mangodb，Java，Node.js</p><p> IaaS： Infrastructure-as-a-Service（基础设施即服务）提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。</p><h1 id="NSQ"><a href="#NSQ" class="headerlink" title="NSQ"></a>NSQ</h1><p>NSQ——订阅摘要和推送摘要，日志流中间件<br>    NSQ是Go语言编写的一个开源的实时分布式内存消息队列，其性能十分优异。<br>    分布式实时消息平台<br>    NSQ 是实时的分布式消息处理平台，其设计的目的是用来大规模地处理每天数以十亿计级别的消息。它具有分布式和去中心化拓扑结构，该结构具有无单点故障、故障容错、高可用性以及能够保证消息的可靠传递的特征<br>    适合小型项目使用,用来学习消息队列实现原理、学习 golang channel知识以及如何用 go 来写分布式，为什么说适合小型小型项目使用因为，nsq 如果没有能力进行二次开发的情况存在的问题还是很多的。</p><h1 id="档案导出的流程"><a href="#档案导出的流程" class="headerlink" title="档案导出的流程"></a>档案导出的流程</h1><!-- # 档案导入——增 --><h1 id="档案查询——查"><a href="#档案查询——查" class="headerlink" title="档案查询——查"></a>档案查询——查</h1><p>大顶堆<br>优化mysql</p><!-- 分库分表？ --><p>查询的时候，每个项目的内容都非常的大，但是只需要用他们的一部分来排序<br>所以使用大顶堆来进行插入，插入的时候同时完成了排序<br>在需要使用的时候，直接将大顶堆读取出来就可以了</p><h2 id="算法稳定性："><a href="#算法稳定性：" class="headerlink" title="算法稳定性："></a>算法稳定性：</h2><p>堆排序是一种不稳定的排序方法。<br>因为在堆的调整过程中，关键字进行比较和交换所走的是该结点到叶子结点的一条路径，<br>因此对于相同的关键字就可能出现排在后面的关键字被交换到前面来的情况</p><p>但是不需要兼顾这个方面，因为出现频率相同的人，随便怎么排在一起都没有关系</p><h1 id="档案导出——查"><a href="#档案导出——查" class="headerlink" title="档案导出——查"></a>档案导出——查</h1><p>多用户，多线程。上下文取消，广播进度，哈希表优化<br>minio</p><h2 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h2><p>导出的命名格式为姓名-身份证<br>由于下载的内容十分繁重，总体逻辑，保证单用户只有一个下载任务<br>使用minio存储图片<br>下载的目标数量极大，1000-1W的数量级<br>档案中的人有1000个人，每个的档案，如果被布控的到，会有1-2K照片，每个照片20KB，jpg模式<br>下载的内容分为，档案图，人脸图，场景图</p><h2 id="档案导出主函数"><a href="#档案导出主函数" class="headerlink" title="档案导出主函数"></a>档案导出主函数</h2><p>0.0 数据库初始化，在整个服务初始化的时候完成<br>0.1 获取上下文，打印日志，填写requestid<br>0.2 定义导出需要用到的接口<br>    - 导出主程序接口<br>    - 查询导出任务进度<br>    - 删除导出任务<br>1.验证用户输入是否正确</p><p>2.先查询当前任务状态，如果已经有任务在执行，那么直接返回<br>    – 获取的下载目标，在数据库中无法存放数组，用字符串代替<br>    – 如果不是运行中，可能是任务未开始、任务失败、任务成功，都删除一下当前任务</p><p>3.在数据库库中插入本次下载的记录<br>4.串联上下文，将上下文信息传递到协程里面，</p><p>5.返回开始任务，进度为0%，接口运行结束</p><h1 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h1><p>1.postman进行本地接口传入参数调试<br>2.直接放到服务器上的k8s中进行运行，打印日志进行调试</p><h1 id="协程中的内容"><a href="#协程中的内容" class="headerlink" title="协程中的内容"></a>协程中的内容</h1><ol start="0"><li>运行的过程中不停的更新进度的状态，进行进度广播</li><li>使用线程池加速下载，线程池里面开线程池？？不可以？？<br> 8核下载全部轨迹，从135s-&gt;20s</li><li>错误处理</li><li>使用哈希表，减少摄像头信息的存储</li><li>获取想要导出的目标的信息<br>目标的，姓名-身份证<br>如果需要导出的目标是空的，那还是建立一个空文件夹<br>有时候，需要下载的内容过于庞大了，超过了gRPC单次传输的上限，所以就用分页的方法来获取数据，（获取数据调用的别的微服务，那个接口支持分页）</li><li>在本地建立需要导出目标的文件夹<br>目录为，随机uuid<ul><li>找到可执行目录</li><li>生成uuid</li><li>uuid&#x2F;export&#x2F;建立业务文件夹<br>导出的图片是存在minio里面的，从网上下载下来，放在目录里面，压缩打包再上传</li></ul></li><li>对需要下载的每个目标进行下载<br>更具业务需求，分情况讨论<br>下载的过程中，使用base64对图片地址进行解密<br>由于每个目标是独立的任务，所以可以使用线程池进行加速<ul><li>需要调用其他的微服务，还获取图片数据</li></ul></li><li>对生成的文件进行zip压缩</li></ol><ul><li>使用defer删除建立的临时压缩报</li><li>filepath.Walk来遍历文件压缩进去</li></ul><ol start="5"><li>将压缩包上传到minio，将minio的地址存到数据库中<ul><li>上传中修改了minio存储的ContentDisposition,修改了http下载时候的文件名</li></ul></li></ol><h1 id="档案删除——删"><a href="#档案删除——删" class="headerlink" title="档案删除——删"></a>档案删除——删</h1><p>查了redis</p><p>删除任务中，遇到了无法删除数据库内容的问题<br>查找后发现，删除的时候使用了事务，这个事务里面需要同时删除三个数据库中的数据，但是在有一个删除操作中，删除的量过大的，导致删除终止，整个事务回滚，删除失败<br>需要一次删除25w条数据，每条数据大概4000byte,<br>25W条数据是极限了<br>有一些10W条以下的小数据，删除成功了，但是之前使用的gorm的软删除，改为了直接删除</p><p>解决方法：先查询需要删除的数量，如果大于一定数量，就不使用事务，自己分批次删除</p><p>这个删除使用了代理模式，分为proxy，work,store三个层次<br>proxy处理一些简单的外部响应，先删除外部的数据库<br>真正的删除放在内部的store中，删除图片，redis,tidb</p><p>tidb中有一个库的常用键值没有加索引，导致搜索的十分缓慢，所以加上了索引</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>使用管道和协程回调函数，来实现一个定时任务<br>对两天前的老数据进行清理</p><h1 id="为什么要用redis"><a href="#为什么要用redis" class="headerlink" title="为什么要用redis"></a>为什么要用redis</h1><p>检测到的人的特征放在redis里面<br>由于需要监控的人非常多，而且人需要存储的特征也非常多，并且总是需要使用到人的特征，所以放到redis里面<br>需要保存轨迹点的数据，内容量很大，并且读写频率很高</p><p>[消息队列浅析]<a href="https://developer.aliyun.com/article/988780?spm=a2c6h.12873639.article-detail.40.167b2eefaMJqaj&amp;scm=20140722.ID_community@@article@@988780._.ID_community@@article@@988780-OR_rec-V_1">https://developer.aliyun.com/article/988780?spm=a2c6h.12873639.article-detail.40.167b2eefaMJqaj&amp;scm=20140722.ID_community@@article@@988780._.ID_community@@article@@988780-OR_rec-V_1</a><br>[OpenTracing]<a href="https://blog.csdn.net/eight_eyes/article/details/117330608">https://blog.csdn.net/eight_eyes/article/details/117330608</a></p><p>[数据结构 - 堆的应用场景]<a href="https://blog.csdn.net/it_lihongmin/article/details/114528779?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114528779-blog-79371735.pc_relevant_multi_platform_featuressortv2dupreplace&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-114528779-blog-79371735.pc_relevant_multi_platform_featuressortv2dupreplace&amp;utm_relevant_index=2">https://blog.csdn.net/it_lihongmin/article/details/114528779?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-114528779-blog-79371735.pc_relevant_multi_platform_featuressortv2dupreplace&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-114528779-blog-79371735.pc_relevant_multi_platform_featuressortv2dupreplace&amp;utm_relevant_index=2</a><br>[堆及堆的具体使用场景]<a href="https://www.jianshu.com/p/e8e267879b61">https://www.jianshu.com/p/e8e267879b61</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实习中学到的新技术&quot;&gt;&lt;a href=&quot;#实习中学到的新技术&quot; class=&quot;headerlink&quot; title=&quot;实习中学到的新技术&quot;&gt;&lt;/a&gt;实习中学到的新技术&lt;/h1&gt;&lt;p&gt;2022.3~2022.4 基于 Linux 的 TinyWebServer&lt;br&gt;</summary>
      
    
    
    
    
    <category term="反思" scheme="http://example.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>文章暂存</title>
    <link href="http://example.com/2022/08/16/Article-tmp-storage/"/>
    <id>http://example.com/2022/08/16/Article-tmp-storage/</id>
    <published>2022-08-16T05:35:06.000Z</published>
    <updated>2022-10-25T14:40:49.503Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.redis.com.cn/redis-installation-on-ubuntu.html">https://www.redis.com.cn/redis-installation-on-ubuntu.html</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[CAP理论]<a href="https://cloud.tencent.com/developer/article/1860632">https://cloud.tencent.com/developer/article/1860632</a><br>[CAP 定理的含义- 阮一峰的网络日志]<a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">https://www.ruanyifeng.com/blog/2018/07/cap.html</a><br><a href="http://erdengk.top/archives/jian-li--mian-shi">http://erdengk.top/archives/jian-li--mian-shi</a></p><p>[软件工程师成长的一个误区]<a href="https://www.raychase.net/6965">https://www.raychase.net/6965</a><br>[十大信条]<a href="https://about.google/philosophy/">https://about.google/philosophy/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.redis.com.cn/redis-installation-on-ubuntu.html&quot;&gt;https://www.redis.com.cn/redis-installation-on-ubuntu.html&lt;/a&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>k8s教程</title>
    <link href="http://example.com/2022/08/11/Course/k8s-tutorial/"/>
    <id>http://example.com/2022/08/11/Course/k8s-tutorial/</id>
    <published>2022-08-11T02:15:04.000Z</published>
    <updated>2022-09-25T13:30:40.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见资源"><a href="#常见资源" class="headerlink" title="常见资源"></a>常见资源</h1><h2 id="namspace"><a href="#namspace" class="headerlink" title="namspace"></a>namspace</h2><p>Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong></p><p>kubectl get namespace</p><p>kubectl get nc</p><p>kubectl get rs my-name -n dev -o -wide </p><p>-n 命名空间<br>-o 查看pod节点详情</p><h1 id="查看kubernetes的资源情况："><a href="#查看kubernetes的资源情况：" class="headerlink" title="查看kubernetes的资源情况："></a>查看kubernetes的资源情况：</h1><p>kubectl get ns</p><h1 id="查看kubernetes集群状态："><a href="#查看kubernetes集群状态：" class="headerlink" title="查看kubernetes集群状态："></a>查看kubernetes集群状态：</h1><p> kubectl get cs</p><p>kubectl -n lookonce describe pods&#x2F;web-588rc<br>查看pod的信息</p><h1 id="Etcd-数据持久化和复制"><a href="#Etcd-数据持久化和复制" class="headerlink" title="Etcd 数据持久化和复制"></a>Etcd 数据持久化和复制</h1><p>snap：用于存放快照数据。Etcd 为防止 WAL 文件过多会创建快照，snap 用于存储 Etcd 的快照数据状态。<br>wal：用于存放预写式日志，其最大的作用是记录整个数据变化的全部历程。在 Etcd 中，所有数据的修改在提交前，都要先写入 WAL 中。使用 WAL 进行数据的存储使得 Etcd 拥有故障快速回复和数据回滚这两个重要功能。</p><h1 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h1><p>kubectl delete pod basic-pd-0 -n tidb-cluster</p><h1 id="Statefulset"><a href="#Statefulset" class="headerlink" title="Statefulset"></a>Statefulset</h1><p>kubectl -n tidb-cluster describe pod basic-pd-0</p><p>t edit  StatefulSet basic-pd</p><h1 id="查看一个pod的状态"><a href="#查看一个pod的状态" class="headerlink" title="查看一个pod的状态"></a>查看一个pod的状态</h1><p>t describe pods basic-pd-0</p><p>重启策略<br>restartPolicy: Never<br>Always:容器失效时，自动重启该容器，这也是默认值<br>OnFailure:容器终止运行且退出码不为0时重启<br>Never :不论状态为何，都不重启该容器</p><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p>post start<br>pre stop</p><p>钩子处理器支持使用下面三种方式定义动作：</p><p>Exec命令：在容器内执行一次命令</p><p>……<br>  lifecycle:<br>    postStart:<br>      exec:<br>        command:<br>        - cat<br>        - &#x2F;tmp&#x2F;healthy<br>……<br>TCPSocket：在当前容器尝试访问指定的socket</p><p>……<br>  lifecycle:<br>    postStart:<br>      tcpSocket:<br>        port: 8080<br>……<br>HTTPGet：在当前容器中向某url发起http请求</p><p>……<br>  lifecycle:<br>    postStart:<br>      httpGet:<br>        path: &#x2F; #URI地址<br>        port: 80 #端口号<br>        host: 192.168.5.3 #主机地址<br>        scheme: HTTP #支持的协议，http或者https<br>……</p><h1 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h1><p>kubectl api-versions</p><p>kubectl api-resources</p><p>t get endpoints</p><p>kubectl get pod -A</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[大佬做的笔记]<a href="https://www.yuque.com/fairy-era/yg511q/szg74m">https://www.yuque.com/fairy-era/yg511q/szg74m</a><br><a href="https://www.cnblogs.com/paul8339/p/15629241.html#:~:text=%E5%A4%87%E4%BB%BD%E6%93%8D%E4%BD%9C%E5%9C%A8etcd%E9%9B%86%E7%BE%A4%E7%9A%84%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E6%89%A7%E8%A1%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E3%80%82%20%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFetcd%20v3%E7%9A%84api%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BB%8E%20k8s%201.13,%E5%BC%80%E5%A7%8B%EF%BC%8Ck8s%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%20v2%20%E7%89%88%E6%9C%AC%E7%9A%84%20etcd%EF%BC%8C%E5%8D%B3k8s%E7%9A%84%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E9%83%BD%E5%AD%98%E5%9C%A8%E4%BA%86v3%E7%89%88%E6%9C%AC%E7%9A%84etcd%E4%B8%AD%E3%80%82%20%E6%95%85%E5%A4%87%E4%BB%BD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B9%9F%E5%8F%AA%E5%A4%87%E4%BB%BD%E4%BA%86%E4%BD%BF%E7%94%A8v3%E6%B7%BB%E5%8A%A0%E7%9A%84etcd%E6%95%B0%E6%8D%AE%EF%BC%8Cv2%E6%B7%BB%E5%8A%A0%E7%9A%84etcd%E6%95%B0%E6%8D%AE%E6%98%AF%E6%B2%A1%E6%9C%89%E5%81%9A%E5%A4%87%E4%BB%BD%E7%9A%84%E3%80%82">备份etcd</a><br>[kubernetes之StatefulSet详解]<a href="https://www.cnblogs.com/tylerzhou/p/11027559.html">https://www.cnblogs.com/tylerzhou/p/11027559.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见资源&quot;&gt;&lt;a href=&quot;#常见资源&quot; class=&quot;headerlink&quot; title=&quot;常见资源&quot;&gt;&lt;/a&gt;常见资源&lt;/h1&gt;&lt;h2 id=&quot;namspace&quot;&gt;&lt;a href=&quot;#namspace&quot; class=&quot;headerlink&quot; title=&quot;n</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自己用到的脚本</title>
    <link href="http://example.com/2022/07/25/Brids-Linux-private-kitchen/my-script/"/>
    <id>http://example.com/2022/07/25/Brids-Linux-private-kitchen/my-script/</id>
    <published>2022-07-25T13:03:06.000Z</published>
    <updated>2022-08-18T12:16:47.261Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;统计文件中代码行数&quot;</span></span><br><span class="line">c1=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.cpp&quot;</span>  | <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">h1=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.h&quot;</span>  | <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">echo <span class="string">&quot;文件个数：$(expr $&#123;c1&#125; + $&#123;h1&#125;),*.cpp:$&#123;c1&#125;,*.h:$&#123;h1&#125;&quot;</span></span><br><span class="line">c2=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.cpp&quot;</span>  | <span class="params">xargs</span> <span class="params">cat</span> | <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">h2=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.cpp&quot;</span>  | <span class="params">xargs</span> <span class="params">cat</span> | <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">echo <span class="string">&quot;总行数：$(expr $&#123;c2&#125; + $&#123;c2&#125;),*.cpp:$&#123;c2&#125;,*.h:$&#123;h2&#125;&quot;</span></span><br><span class="line">c3=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.cpp&quot;</span>  | <span class="params">xargs</span> <span class="params">cat</span> | <span class="params">grep</span> -<span class="params">v</span> ^$| <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">h3=<span class="constructor">$(<span class="params">find</span> -<span class="params">name</span> <span class="string">&quot;*.cpp&quot;</span>  | <span class="params">xargs</span> <span class="params">cat</span> | <span class="params">grep</span> -<span class="params">v</span> ^$| <span class="params">wc</span> -<span class="params">l</span>)</span></span><br><span class="line">echo <span class="string">&quot;去掉空格行数：$(expr $&#123;c3&#125; + $&#123;c3&#125;),*.cpp:$&#123;c3&#125;,*.h:$&#123;h3&#125;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; <span class="string">&quot;&quot;</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">加载文件</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[cat &lt;&lt; EOF]<a href="https://www.jianshu.com/p/df07d8498fa5">https://www.jianshu.com/p/df07d8498fa5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>做饭相关</title>
    <link href="http://example.com/2022/07/25/Others/cooking-knowledge/"/>
    <id>http://example.com/2022/07/25/Others/cooking-knowledge/</id>
    <published>2022-07-24T16:49:09.000Z</published>
    <updated>2022-09-30T10:17:19.250Z</updated>
    
    <content type="html"><![CDATA[<p>可乐鸡翅</p><p>鱼香肉丝、糖醋排骨、锅包肉<br>紫菜皮蛋汤<br>虾仁炒蛋<br>青椒塞肉<br>炸茄子</p><h3 id="可乐鸡翅的改进"><a href="#可乐鸡翅的改进" class="headerlink" title="可乐鸡翅的改进"></a>可乐鸡翅的改进</h3><p>步骤一：<br>生姜、料酒，浸泡20分钟<br>步骤二：<br>焯水<br>鸡翅切开<br>树叶、八角、葱，料酒放到水里面煮到没有泡沫出来<br>用冷水还是热水开始煮？？？<br>步骤三：<br>炒出糖色<br>放八角、树叶、料酒、蒜、大葱<br>炒到两面金黄，一直用大火<br>放生抽、老抽、盐（一点）<br>最后放入可乐，小火开始炖，可乐不要太多，要没过鸡翅就可以了，可乐可以分多次加<br>炖20分钟，汤汁烧干<br>汤汁烧干以后，打开锅盖，烧到出泡泡<br>装盘</p><ol><li>需要炒出糖色来</li><li>没有粘稠的感觉，感觉像是汤</li><li>可乐加的有点多</li></ol><h3 id="糖醋排骨"><a href="#糖醋排骨" class="headerlink" title="糖醋排骨"></a>糖醋排骨</h3><p>主材料：排骨<br>辅助材料：葱、大蒜、红尖椒<br>调味料：盐</p><p>步骤一：备料</p><ol><li>切排骨</li><li>放在清水中，放盐、淀粉，用手抓清洗，10min</li><li>焯水：冷水，生姜、葱、排骨、料酒<br>不断的捞出泡沫</li><li>准备调味料：</li></ol><ul><li>料酒</li><li>生抽</li><li>香醋<br>冰糖、</li></ul><ol start="5"><li>焯水之后用温水洗干净</li></ol><p>步骤二：开始烧<br>5. 排骨放到锅里面，家常做法用油煎，水分炒出来，炒到金黄，拿出来<br>6. 炒糖色，放入冰糖，大火熬化，变成枣红色，开小火，开始冒小泡，放入排骨<br>加入调料，香叶、两个八角、葱段、桂皮<br>7. 把嫩汁炒成糖色，放入料酒，生抽，放醋<br>8. 加入温水或热水，水没过排骨，放入冰糖<br>9. 炖半个小时，小料拿出来，调出香料，开大火收汁，7-8分钟，自然芡<br>10. 汤汁粘稠，放入米醋&#x2F;香醋</p><h3 id="红烧茄子"><a href="#红烧茄子" class="headerlink" title="红烧茄子"></a>红烧茄子</h3><h4 id="基础做法一："><a href="#基础做法一：" class="headerlink" title="基础做法一："></a>基础做法一：</h4><p>主材料：圆茄子<br>辅助材料：葱、大蒜、红尖椒</p><ol><li>切掉头，滚刀切块</li><li>茄子切好，放在碗里，放盐搅拌，腌制10分钟</li><li>调味料</li></ol><ul><li>生抽</li><li>老抽</li><li>白糖</li><li>盐   </li><li>清水</li><li><input disabled="" type="checkbox"> 耗油</li><li><input disabled="" type="checkbox"> 淀粉</li></ul><p>葱、大蒜、尖椒</p><ol start="4"><li><p>茄子用手挤出水分，挤干（为了防止吸油）<br>加入淀粉搅拌均匀</p></li><li><p>先炒（炸）茄子，开大火，油温要高<br>表面焦黄、倒入蒜末，炒出香味<br>倒入汤汁<br>收干汤汁，加入葱花</p></li></ol><h4 id="进阶做法二："><a href="#进阶做法二：" class="headerlink" title="进阶做法二："></a>进阶做法二：</h4><p>主材料：圆茄子<br>次要材料：西红柿、青椒<br>辅助材料：葱、大蒜</p><p>前4步相同</p><p>开始炒的时候不同<br>5. 用宽油，先开大火炸茄子，炸酥脆以后捞出来<br>6. 油温到7-8成以后，再放进去炸一遍，把青椒也放进去炸<br>7. 炸好以后捞出来，开始烧新的，烧西红柿<br>加入调味料，炒出汁水<br>8. 放入刚刚炸过的茄子</p><h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h2><p>鱼香肉丝<br>茄子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可乐鸡翅&lt;/p&gt;
&lt;p&gt;鱼香肉丝、糖醋排骨、锅包肉&lt;br&gt;紫菜皮蛋汤&lt;br&gt;虾仁炒蛋&lt;br&gt;青椒塞肉&lt;br&gt;炸茄子&lt;/p&gt;
&lt;h3 id=&quot;可乐鸡翅的改进&quot;&gt;&lt;a href=&quot;#可乐鸡翅的改进&quot; class=&quot;headerlink&quot; title=&quot;可乐鸡翅的改进&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>截图工具</title>
    <link href="http://example.com/2022/07/25/Project/Screenshot-tool/"/>
    <id>http://example.com/2022/07/25/Project/Screenshot-tool/</id>
    <published>2022-07-24T16:44:29.000Z</published>
    <updated>2022-08-19T14:54:09.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>看看市面上的截图工具</p><p>QQ截图独立版：<a href="https://bbs.pediy.com/thread-271332.htm">https://bbs.pediy.com/thread-271332.htm</a><br>Snipaste官网：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a><br>eSearch官网：<a href="https://esearch.vercel.app/">https://esearch.vercel.app/</a><br>PicPick官网：<a href="https://picpick.app/zh/">https://picpick.app/zh/</a><br>FastStone Capture官网：<a href="https://www.faststone.org/FSCaptureDetail.htm">https://www.faststone.org/FSCaptureDetail.htm</a><br>ShareX官网：<a href="https://getsharex.com/">https://getsharex.com/</a></p><p>自己想要什么功能</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h1&gt;&lt;p&gt;看看市面上的截图工具&lt;/p&gt;
&lt;p&gt;QQ截图独立版：&lt;a href=&quot;https://bbs.pediy.com/threa</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
