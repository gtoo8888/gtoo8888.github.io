<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gtoo8888</title>
  
  <subtitle>会扇扇子的猪</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-16T09:04:03.092Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kuku De</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>app总结</title>
    <link href="http://example.com/2023/04/16/Others/app/"/>
    <id>http://example.com/2023/04/16/Others/app/</id>
    <published>2023-04-16T07:46:00.000Z</published>
    <updated>2023-04-16T09:04:03.092Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端开发知识的一些总结</p><p>大前端——泛GUI交互<br>    HTML<br>    CSS<br>    javascript<br>    TypeScript<br>    nodejs<br>    原生app开发<br>        开发adroid ios<br>        facebook<br>            React native</p><pre><code>    google        dart        flutterwebapp开发    Vue    React混合开发HybirdAPP    微信公众号    小程序    Electron        H5页面嵌入到桌面段应用</code></pre><p>ES6<br>React<br>Promise<br>html5<br>Css3<br>Axios<br>Jquery<br>Vue Router<br>Node.js<br>AJAX</p><p>webpack、rollup、vite</p><h1 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h1><ol><li>Android Studio<ol><li>JAVA</li><li>Kotlin</li></ol></li></ol><h1 id="跨端开发"><a href="#跨端开发" class="headerlink" title="跨端开发"></a>跨端开发</h1><ol><li>uniapp<ol><li>HBuildX</li></ol></li><li>Flutter<ol><li>dart </li><li>Google 公司开发的一款跨平台的 UI 框架</li></ol></li><li>Taro <ol><li>京东</li></ol></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://flutter.cn/">Flutter官网</a><br><a href="https://www.dcloud.io/">uni-app官网</a><br><a href="https://developer.android.google.cn/?hl=zh-cn">Android Studio</a><br><a href="https://blog.csdn.net/SherlockStark/article/details/129298768?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8=">Android Studio 2022.1.1版本 保姆级安装教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于前端开发知识的一些总结&lt;/p&gt;
&lt;p&gt;大前端——泛GUI交互&lt;br&gt;    HTML&lt;br&gt;    CSS&lt;br&gt;    javascript&lt;br&gt;    TypeScript&lt;br&gt;    nodejs&lt;br&gt;    原生app开发&lt;br&gt;        开发adr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ffmpeg</title>
    <link href="http://example.com/2023/04/14/Project/ffmpeg/"/>
    <id>http://example.com/2023/04/14/Project/ffmpeg/</id>
    <published>2023-04-14T14:29:24.000Z</published>
    <updated>2023-04-15T09:48:38.634Z</updated>
    
    <content type="html"><![CDATA[<p>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264</p><p>fmpeg-master-latest-win64-gpl-shared.zip</p><p>avcodec.lib;avdevice.lib;avfilter.lib;avformat.lib;avutil.lib;swresample.lib;swscale.lib;postproc.lib</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MSBuild属性宏:</span><br><span class="line">- $<span class="comment">(OutDir)</span>：输出目录，用于存放生成的可执行文件或库文件。</span><br><span class="line">- $<span class="comment">(ProjectName)</span>：项目名称，通常与项目文件名相同。</span><br><span class="line">- $<span class="comment">(Configuration)</span>：当前项目配置，例如Debug或Release。</span><br><span class="line">- $<span class="comment">(Platform)</span>：当前项目平台，例如Wi<span class="symbol">n32</span>或x<span class="number">64</span>。</span><br><span class="line">- $<span class="comment">(SolutionDir)</span>：解决方案目录，包含解决方案文件所在的路径。</span><br><span class="line">- $<span class="comment">(ProjectDir)</span>：项目目录，包含项目文件所在的路径。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$<span class="comment">(SolutionDir)</span></span><br><span class="line">$<span class="comment">(SolutionExt)</span></span><br><span class="line">$<span class="comment">(SolutionFileName)</span></span><br><span class="line">$<span class="comment">(SolutionName)</span></span><br><span class="line">$<span class="comment">(SolutionPath)</span></span><br></pre></td></tr></table></figure><p>FFmpeg一共包含8个库：<br><strong>avcodec：编解码（最重要的库）。</strong><br><strong>avformat：封装格式处理。</strong><br>avfilter：滤镜特效处理。<br>avdevice：各种设备的输入输出。<br><strong>avutil：工具库（大部分库都需要这个库的支持）。</strong><br>postproc：后加工。<br>swresample：音频采样数据格式转换。<br><strong>swscale：视频像素数据格式转换。</strong><br>其中加粗的库为本课程涉及到的库。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ffmpeg.org/">ffmpeg官网</a></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><a href="https://blog.csdn.net/TracelessLe/article/details/107362505">Ubuntu上安装ffmpeg</a><br><a href="https://blog.csdn.net/TracelessLe/article/details/107522845">Ubuntu下x264库编译安装</a><br><a href="https://blog.csdn.net/qq_44054791/article/details/127861823">编译ffmpeg错误：ERROR: x264 not found using pkg-config</a><br><a href="https://www.lixian.fun/4237.html">编译安装libx264库遇到Found no assembler Minimum version is nasm-</a><br><a href="https://www.nasm.us/">nasm官网</a><br><a href="https://www.nasm.us/pub/nasm/releasebuilds/">nasm下载链接</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">ffmpeg windows下载地址</a><br><a href="https://blog.csdn.net/ustc_sse_shenzhang/article/details/102546753">FFmpeg三种版本（static、shared、dev）和实际操作举例</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.&amp;#x2F;configure –prefix&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>google test</title>
    <link href="http://example.com/2023/04/14/Project/google-test/"/>
    <id>http://example.com/2023/04/14/Project/google-test/</id>
    <published>2023-04-14T11:40:49.000Z</published>
    <updated>2023-04-14T14:44:01.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装教程"><a href="#1-安装教程" class="headerlink" title="1.安装教程"></a>1.安装教程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:google/googletest.git</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">make -j all</span><br><span class="line">find . -name &quot;*.a&quot; # 查看静态链接库是否生成</span><br><span class="line">make insatll</span><br><span class="line">ls -l /user/local/ # 查看是否安装过去了</span><br></pre></td></tr></table></figure><h1 id="2-demo测试"><a href="#2-demo测试" class="headerlink" title="2. demo测试"></a>2. demo测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd googletests/samples</span><br><span class="line">g++ ../src/gtest_main.cc sample1.cc sample1_unittest.cc -o sample1 -lgtest -lgmock -lpthread -std=c++14 # 一定要使用C++11以上，C++14或者C++17才能编译通过</span><br></pre></td></tr></table></figure><p>样例分析：<br>gtest_main.cc: 测试主程序的入口<br>sample1.cc：等待测试的源码<br>sample1_unittest.cc: 测试用例</p><h1 id="3-写一个自己的测试用例"><a href="#3-写一个自己的测试用例" class="headerlink" title="3.写一个自己的测试用例"></a>3.写一个自己的测试用例</h1><p>1.有一个包含GTEST_API_的主函数，引入testing::InitGoogleTest<br>2.包含头文件gtest&#x2F;gtest.h<br>3.使用TEST宏定义，第一个参数是test suite的名字，第二个参数是test case的名字，写自己的测试函数<br>4.在测试函数中使用EXPECT_EQ,EXPECT_NE,EXPECT_LT,EXPECT_LE,EXPECT_GT,EXPECT_GE<br>5.在主函数中调用RUN_ALL_TESTS()，返回值是0表示成功，非0表示失败<br>6.编译，链接gtest库，运行</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://google.github.io/googletest/">官方文档</a><br><a href="https://github.com/google/googletest">github仓库</a><br><a href="https://blog.csdn.net/wdcyf15/article/details/108855960">Google Test(GTEST)使用入门（1）- 下载编译安装执行</a><br><a href="https://blog.csdn.net/qq_34525916/article/details/113752768">Ubuntu 16.04安装gtest遇坑，成功安装及使用记录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装教程&quot;&gt;&lt;a href=&quot;#1-安装教程&quot; class=&quot;headerlink&quot; title=&quot;1.安装教程&quot;&gt;&lt;/a&gt;1.安装教程&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EIseg环境安装</title>
    <link href="http://example.com/2023/03/23/Environment-Configuration/EIseg_install/"/>
    <id>http://example.com/2023/03/23/Environment-Configuration/EIseg_install/</id>
    <published>2023-03-23T06:00:50.000Z</published>
    <updated>2023-03-23T08:39:32.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装python"><a href="#1-安装python" class="headerlink" title="1. 安装python"></a>1. 安装python</h1><p>勾选安装环境变量</p><h1 id="2-安装anaconda"><a href="#2-安装anaconda" class="headerlink" title="2. 安装anaconda"></a>2. 安装anaconda</h1><ol><li><p>不要勾选安装环境变量</p></li><li><p>安装后增加环境变量<br>E:\Anaconda<br>E:\Anaconda\Scripts<br>E:\Anaconda\Library\mingw-w64\bin<br>E:\Anaconda\Library\usr\bin<br>E:\Anaconda\Library\bin</p></li></ol><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><ol><li><p>anaconda换源</p><ol><li>先打开第一次anaconda，会创建.condarc</li><li>在C:\Users{username} 文件夹下面修改.condarc</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><ol start="3"><li><p>conda clean -i</p></li><li><p>检测是否换源成功</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br></pre></td></tr></table></figure><h1 id="3-安装EIseg"><a href="#3-安装EIseg" class="headerlink" title="3. 安装EIseg"></a>3. 安装EIseg</h1><ol><li>创建自己的环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境所用的python版本需要在后面指定，如果不指定默认Anaconda自带python版本</span></span><br><span class="line"><span class="comment"># doccano 是环境名称，可根据自己命名区分不同自己的环境</span></span><br><span class="line">conda create -n eiseg_env python=3.10</span><br><span class="line"><span class="comment"># 激活自己的环境</span></span><br><span class="line">conda activate ant</span><br></pre></td></tr></table></figure><ol start="2"><li><p>切换到新创建的环境中，打开open Terminal</p></li><li><p>安装PaddlePaddle，是依赖环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装EIseg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install eiseg -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></li><li><p>启动<br>直接在命令行中输入eiseg</p></li></ol><h1 id="配置EIseg"><a href="#配置EIseg" class="headerlink" title="配置EIseg"></a>配置EIseg</h1><ol><li>只保存彩色图片</li><li>编辑快捷键<ol><li>前后移动</li><li>自动保存</li><li>删除所有多边形</li></ol></li><li>保存路径不能有中文</li></ol><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><ol><li>正负样本点</li><li>转化为矩形，拖动</li><li>删除矩形</li></ol><h1 id="标注时候需要注意"><a href="#标注时候需要注意" class="headerlink" title="标注时候需要注意"></a>标注时候需要注意</h1><h1 id="每次打开操作"><a href="#每次打开操作" class="headerlink" title="每次打开操作"></a>每次打开操作</h1><ol><li>选择保存类型，只保留伪彩色，coco格式</li><li>加载模型</li><li>打开文件夹</li><li>载入标签</li><li>标注</li><li>空格，转化为矩形</li><li>下一张</li></ol><h1 id="anaconda常用指令"><a href="#anaconda常用指令" class="headerlink" title="anaconda常用指令"></a>anaconda常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda config --show <span class="comment"># 查看conda的配置，确认channels</span></span><br><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br><span class="line">conda config --get channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda config --show channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda list <span class="comment"># 当前安装的包列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未查看</span></span><br><span class="line">conda update -n base conda</span><br><span class="line">conda install --<span class="built_in">yes</span> --file requirements.txt</span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[Anaconda超详细安装教程（Windows环境下）]<a href="https://blog.csdn.net/fan18317517352/article/details/123035625">https://blog.csdn.net/fan18317517352/article/details/123035625</a> <br/><br>[新手教程一：Anaconda新建开发环境]<a href="https://blog.csdn.net/qq_42573052/article/details/113770662">https://blog.csdn.net/qq_42573052/article/details/113770662</a> <br/><br><a href="https://blog.csdn.net/jasneik/article/details/114227716">anaconda 换清华镜像源 windows</a> <br/><br><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a> <br/><br><a href="https://blog.csdn.net/qq_43382635/article/details/127124980">Anaconda之导出&#x2F;导出配置好的虚拟环境</a> <br/><br><a href="https://blog.csdn.net/qq_37541097/article/details/120154543">EISeg工具对应博文</a> <br/><br><a href="https://github.com/PaddlePaddle/PaddleSeg/blob/release/2.7/README_CN.md">EIseg官方安装说明</a> <br/><br><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/index_cn.html">飞桨安装参考文档</a> <br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装python&quot;&gt;&lt;a href=&quot;#1-安装python&quot; class=&quot;headerlink&quot; title=&quot;1. 安装python&quot;&gt;&lt;/a&gt;1. 安装python&lt;/h1&gt;&lt;p&gt;勾选安装环境变量&lt;/p&gt;
&lt;h1 id=&quot;2-安装anaconda&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>minio 环境配置</title>
    <link href="http://example.com/2023/01/19/Environment-Configuration/Minio_install/"/>
    <id>http://example.com/2023/01/19/Environment-Configuration/Minio_install/</id>
    <published>2023-01-19T10:40:28.000Z</published>
    <updated>2023-03-16T11:49:22.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="minio-环境配置"><a href="#minio-环境配置" class="headerlink" title="minio 环境配置"></a>minio 环境配置</h1><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1)按指令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable&quot;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce -y</span><br></pre></td></tr></table></figure><p>2)查看是否安装成功<br>docker version</p><h1 id="安装minio"><a href="#安装minio" class="headerlink" title="安装minio"></a>安装minio</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 9000:9000 -p 9001:9001 --name minio \</span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=minio&quot; \</span><br><span class="line">-e &quot;MINIO_SECRET_KEY=minio123&quot; \</span><br><span class="line">-v /home/admin/minio/data:/data \</span><br><span class="line">-v /home/admin/minio/config:/root/.minio \</span><br><span class="line">minio/minio server /data \</span><br><span class="line">--console-address &quot;:9000&quot; --address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p>MINIO_ACCESS_KEY账号<br>MINIO_SECRET_KEY密码</p><p><a href="http://39.106.72.165:9000/">http://39.106.72.165:9000</a><br>本地：<br><a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cloud.tencent.com/developer/article/2057224">https://cloud.tencent.com/developer/article/2057224</a><br><a href="https://www.minio.org.cn/download.shtml#/linux">https://www.minio.org.cn/download.shtml#/linux</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;minio-环境配置&quot;&gt;&lt;a href=&quot;#minio-环境配置&quot; class=&quot;headerlink&quot; title=&quot;minio 环境配置&quot;&gt;&lt;/a&gt;minio 环境配置&lt;/h1&gt;&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; cla</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu通用教程</title>
    <link href="http://example.com/2023/01/15/Environment-Configuration/ubuntu20/"/>
    <id>http://example.com/2023/01/15/Environment-Configuration/ubuntu20/</id>
    <published>2023-01-15T13:40:01.000Z</published>
    <updated>2023-03-16T11:49:17.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装VMware中出现的问题"><a href="#装VMware中出现的问题" class="headerlink" title="装VMware中出现的问题"></a>装VMware中出现的问题</h1><p>本地环境，win11+Vmware14<br>先安装了VMware14，安装过程没有问题，导入虚拟机，启动以后，电脑直接蓝屏，开机还是这个现象</p><p>网上搜索发现是没有启动虚拟工具</p><h1 id="安装ubuntu后需要做的"><a href="#安装ubuntu后需要做的" class="headerlink" title="安装ubuntu后需要做的"></a>安装ubuntu后需要做的</h1><ol><li>换源</li><li>更换时区</li><li>安装vim</li><li>安装ipconfig</li><li>安装ssh</li><li>配置历史记录</li><li>配置静态ip – 不需要？</li><li>安装git</li></ol><h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><ol><li>准备工作<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> update</span><br><span class="line">apt-<span class="built_in">get</span> install sudo</span><br><span class="line">apt-<span class="built_in">get</span> install vim</span><br><span class="line">passwd # 修改密码</span><br></pre></td></tr></table></figure></li><li>安装openssh<br>apt-get install openssh-server<br>apt-get install openssh-client</li><li>修改ssh配置文件<br>sudo vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>PermitRootLogin yes<br>（默认为#PermitRootLogin prohibit-password）前面的#号要放开</li><li>启动服务<br>&#x2F;etc&#x2F;init.d&#x2F;ssh restart</li><li>连接测试<br>ssh user@[ip] -p [端口]<br>ssh <a href="mailto:&#117;&#x73;&#x65;&#114;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#48;&#46;&#51;">&#117;&#x73;&#x65;&#114;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#48;&#46;&#51;</a> -p 22</li><li>vscode配置<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  HostName <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  <span class="keyword">User</span> <span class="title">username</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a><br>wget <a href="https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz">https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz</a></p><p>tar -C &#x2F;usr&#x2F;local -xzf go1.19.5.linux-amd64.tar.gz</p><p>vim &#x2F;etc&#x2F;profile<br>source &#x2F;etc&#x2F;profile<br>export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go<br>#export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin<br>export PATH&#x3D;$PATH:$GOROOT&#x2F;bin<br>export GOPATH&#x3D;&#x2F;yzx<br>export GOBIN&#x3D;$GOPATH&#x2F;bin<br>export GOPROXY&#x3D;<a href="https://goproxy.cn/,direct">https://goproxy.cn/,direct</a></p><p><a href="https://goproxy.io/zh/">https://goproxy.io/zh/</a><br><a href="https://goproxy.cn/">https://goproxy.cn/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init [工程名字]</span><br><span class="line">go mod tidy  # 刷新mod</span><br><span class="line">go mod vender</span><br><span class="line">go get [跟着整个github目录]</span><br></pre></td></tr></table></figure><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>下错版本<br>go1.19.5.linux-arm64.tar.gz<br>报错:<br>bash: &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&#x2F;go: cannot execute binary file: Exec format error</p><p>VScode无法调试go<br>安装dlv</p><p>cgo: C compiler “gcc” not found: exec: “gcc”: executable file not found in $PATH (exit status 2)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/142014944">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/liangcsdn111/article/details/115405223">https://blog.csdn.net/liangcsdn111/article/details/115405223</a></p><p><a href="https://www.jianshu.com/p/2802d71ab9e9">https://www.jianshu.com/p/2802d71ab9e9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装VMware中出现的问题&quot;&gt;&lt;a href=&quot;#装VMware中出现的问题&quot; class=&quot;headerlink&quot; title=&quot;装VMware中出现的问题&quot;&gt;&lt;/a&gt;装VMware中出现的问题&lt;/h1&gt;&lt;p&gt;本地环境，win11+Vmware14&lt;br&gt;先安装</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Qt5教程</title>
    <link href="http://example.com/2022/12/31/Course/Qt5_Course/"/>
    <id>http://example.com/2022/12/31/Course/Qt5_Course/</id>
    <published>2022-12-31T05:34:44.000Z</published>
    <updated>2022-12-31T05:43:16.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt需要学习的知识点"><a href="#Qt需要学习的知识点" class="headerlink" title="Qt需要学习的知识点"></a>Qt需要学习的知识点</h1><p>QML<br>Qt Quick<br>Qpython</p><h1 id="Qt相关不了解的"><a href="#Qt相关不了解的" class="headerlink" title="Qt相关不了解的"></a>Qt相关不了解的</h1><p>QRegExp<br>QButtonGroup<br>QFactoryInterface<br>QStandardItemModel<br>Qt::WA_inputmethodenabled</p><p>QDomElement<br>QDomDocument<br>QDomNode</p><p>#include &lt;QtXml&#x2F;qtxmlglobal.h&gt;</p><p>安装过滤器</p><p>Q_DECL_EXPORT<br>Q_DECL_IMPORT<br>Q_PROPERTY</p><p>qt的继承关系</p><h1 id="C-中不了解的"><a href="#C-中不了解的" class="headerlink" title="C++中不了解的"></a>C++中不了解的</h1><p>stdcall,cdecl,fastcall,<br>thiscall, naked call</p><p>afx_msg</p><p>afxwin.h<br>windows.h<br>ODBC类</p><p>stdafx.h</p><p>继承自己单例的数组<br>奇异递归模板模式CRTP</p><p>dynamic_cast&lt;&gt;()</p><h1 id="其他需要了解的知识"><a href="#其他需要了解的知识" class="headerlink" title="其他需要了解的知识"></a>其他需要了解的知识</h1><p>Microsoft XNA<br>WPF<br>xaml<br>MFC<br>electron<br>Win32 SDK<br>STL,WTL<br>LCU客户端<br>CEF架构<br>WinForms<br>C++ builder<br>GTK+<br>libcef<br>Unity<br>桌面应用程序<br>桌面的客户端软件<br>Hive</p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>minicsv</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt需要学习的知识点&quot;&gt;&lt;a href=&quot;#Qt需要学习的知识点&quot; class=&quot;headerlink&quot; title=&quot;Qt需要学习的知识点&quot;&gt;&lt;/a&gt;Qt需要学习的知识点&lt;/h1&gt;&lt;p&gt;QML&lt;br&gt;Qt Quick&lt;br&gt;Qpython&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>抢票系统</title>
    <link href="http://example.com/2022/11/11/Project/Ticketing_system/"/>
    <id>http://example.com/2022/11/11/Project/Ticketing_system/</id>
    <published>2022-11-11T11:47:19.000Z</published>
    <updated>2022-12-31T05:31:53.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>抢票的要素：<br>时间- 确定列车的剩余票数<br>区间- </p><h1 id="后台开发导论"><a href="#后台开发导论" class="headerlink" title="后台开发导论"></a>后台开发导论</h1><h2 id="1接入层服务"><a href="#1接入层服务" class="headerlink" title="1接入层服务"></a>1接入层服务</h2><p>通常把网络中直接面向用户连接的部分称为接入层<br>对外提供一体服务，对内实现负载均衡</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>网络接入-DNS<br>均衡算法:<br>就近+同运营商接入+轮询<br>存在问题:<br>1.域名解析系统的缓存问题(缓存的ip失效将导致出错)<br>2.公网ip问题<br>应用场景:<br>解决服务接入的第一跳</p><h3 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h3><p>LvS : Linux Virtual Server , Linux上通用的负载均衡技术<br>可以将内部的100个IP变成一个IP</p><h4 id="LVS-DR"><a href="#LVS-DR" class="headerlink" title="LVS-DR"></a>LVS-DR</h4><p>1.Virtual Server via Direct Routing (VS&#x2F;DR)<br>通过改写请求报文的MAC地址，将请求发送到真实服务器，而真实服务器将响应直接返E种方法没有IP隧道的开销，对集群中的真实服务器也没有必须支持IP隧道协议的要求，但与真实服务器都有一块网卡连在同一物理网段上。</p><p>3.Virtual Server via Network Address Translation (VS&#x2F;NAT)<br>通过网络地址转换，调度器重写请求报文的目标地址，将请求分派给后端的真实服务器;响应报文通过调度器时，报文的源地址被重写，再返回给客户，完成整个负载调度过程。</p><p>均衡算法︰<br>RR、Weight RR、地址hash、最少连接等<br>优点︰<br>1.成本低性能高，抗负载能力强<br>2.业务透明，可应用范围广<br>3.基于内核网络协议栈，稳定可靠<br>应用场景∶<br>解决网络接入的第二跳，一般称为四层负载均衡<br>问题：<br>如果连接的服务器出现问题，那么客户端的TCP请求直接失败了</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="负载均衡-反向代理"><a href="#负载均衡-反向代理" class="headerlink" title="负载均衡-反向代理"></a>负载均衡-反向代理</h4><p>正向代理:被代理方是客户端<br>反向代理:被代理方是服务端，服务端隐藏在反向代理后面</p><h4 id="反向代理-nginx"><a href="#反向代理-nginx" class="headerlink" title="反向代理-nginx"></a>反向代理-nginx</h4><p>nginx可以通过解析http协议包来路由流量 ( http:域名，url , method )</p><h4 id="反向代理-手Q接入层SSO"><a href="#反向代理-手Q接入层SSO" class="headerlink" title="反向代理-手Q接入层SSO"></a>反向代理-手Q接入层SSO</h4><p>就近接入（相同运营商和相同地域会更快)测速+调度两套系统<br>连接保持、推送支持<br>反向代理<br>信道安全(加密防监听，鉴权防伪装，cookie防重放)<br>流量优化、数据压缩、智能聚合、精简协议<br>容灾容错<br>异常发现和过载保护</p><h4 id="负载均衡-七层"><a href="#负载均衡-七层" class="headerlink" title="负载均衡-七层"></a>负载均衡-七层</h4><p>均衡算法∶<br>RR、Weight RR、ip_hash、url_hash<br>优点︰<br>1.可针对应用本身来做调度策略<br>2支持故障剔除<br>应用场景∶<br>解决网络接入的第三跳，一般称为七层负载均衡<br>好处：<br>因为连接是和代理建立的，当机器出现问题的时候，连接是和代理保持的，可以用反向代理去轮询有没有好的机器<br>可以更加精细化管理，但是性能没有LVS那么高</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通常把网络中直接面向用户连接或访问网络的部分称为接入层<br>接入层常用技术:DNS、LVS、反向代理<br>比较大型的在线应用，通常这三种技术都会同时使用</p><p>一般DNS和LVS都由公司级别服务提供<br>GSLB域名管理平台5.1<br>腾讯云|DNSPOD<br>负载均衡CLB|Cloud Lo&amp;d Balancer<br>完整的接入层技术应该包括这三种，日常开发中我们说的接入层一般指反向代理。</p><h2 id="2应用服务"><a href="#2应用服务" class="headerlink" title="2应用服务"></a>2应用服务</h2><p>网络接入<br>业务逻辑<br>数据存储<br>运维保障<br>业务需求决定方案</p><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>小型网站–单机架构<br>使用到的技术:LAMP<br>Linux + Apache + Mysql + Php</p><p>缓存与读写分离<br>基于二八定律引入缓存<br>(高频访问数据提高访问速度）<br>数据库读多写少-&gt;读写分离<br>（读多写少，分离提速)</p><p>动静分离</p><p>引入CDN<br>(将静态资源的访问分流到用户附近的结点)</p><p>集群化部罢</p><p>通过负载均衡和反向<br>将请求分散到多个服方命果肝十</p><p>服务拆分―业务拆分<br>项目规模增长，维护难度提高:<br>任意修改都需要整体发布<br>任意缺陷都会影响整个系统<br>解决方案:<br>将应用按业务模块拆分<br>分而治之降低复杂度<br>缩小影响<br>明确职责<br>引入消息队列进一步解耦</p><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><h2 id="运营保障"><a href="#运营保障" class="headerlink" title="运营保障"></a>运营保障</h2><p>运营保障–微服务框架</p><p>组件化、框架化消除重复劳动微服务框架<br>1.RPC<br>2.名字服务<br>3．配置服务<br>4.日志、监控<br>5．链路追踪</p><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><h3 id="全链路追踪"><a href="#全链路追踪" class="headerlink" title="全链路追踪"></a>全链路追踪</h3><p>什么是全链路追踪<br>系统监控的三种手段:<br>Log日志——记录离散事件，包含程序在事件发生时详细信息<br>Metrics指标——记录可聚合的数据，经过汇总后成为我们关心的指标(QPS、DAU) ——monitor<br>Tracing链路追踪——记录单个请求的处理流程，其中包括服务调用和处理时长等信息。<br>Tracing的特点是，它所记录的信息是一个请求范围内的。</p><p>微服务时代:<br>单体应用被拆分为多个微服务，导致服务数量增多、内部调用链复杂化，手Q后端就有600多个模块，涉及到的服务器更是不计其数。</p><p>随着服务数量的增多和内部调用链的复杂化，仅凭借日志和指标监控进行问题排查或是性能分析的时候，无异于盲人摸象。<br>全链路追踪可以帮助我们做到“See the Whole Picture” .</p><p>Logging很重要，但存在问题<br>分布式系统中日志隔离问题:<br>链路缺乏统一标志:SSO : seq+uin，后端:可能有另一套标识方式<br>日志染色问题︰各个服务染色不一，日志信息可能在某一环缺失<br>查问题效率低:查问题时每一个服务方都各自查自己的日志，使用排除法来查问题，效率较低</p><p>Metrics必不可少，但不是万能<br>Monitor和多维监控Habo :</p><p>指标数据是我们日常需要关注的，它可以帮助我们发现系统的异常，设置告警并及时处理。<br>但指标数据是数据的汇总呈现，我们不能依赖其来定位具体问题和优化系统。</p><p>Tracing提供了什么<br>全链路追踪能够帮助开发者直观分析请求链路，快速定位问题和性能瓶颈，逐渐优化服务间依赖，也有助于开发者从更宏观的角度更好地理解整个分布式系统。</p><h1 id="cpu问题分析总结"><a href="#cpu问题分析总结" class="headerlink" title="cpu问题分析总结"></a>cpu问题分析总结</h1><p>粗看系统负载情况:uptime, vmstat 开发测试环境+线上环境<br>机器实时的CPU资源消耗详细情况top 开发测试环境+线上环境<br>分析系统调用: strace  开发测试环境<br>分析函数的热点:perf，可以输出成火焰图便于直观观察 开发测试环境+线上环境<br>分析各个线程的资源消耗情况，线程内的函数消耗情况:valgriand 开发测试环境<br>分析程序各个线程的堆栈执行情况︰pstack &amp; pt-pmp 开发测试环境</p><h1 id="内存问题分析总结"><a href="#内存问题分析总结" class="headerlink" title="内存问题分析总结"></a>内存问题分析总结</h1><p>1.C++开发的时候必须掌握智能指针<br>2.熟练使用valgriand分析内存泄漏<br>3.了解多线程内存库jemalloc&#x2F;tcmalloc，可以熟悉下jemalloc源代码<br>4.free的输出结果会解读<br>5.建议关闭swap<br>6.熟悉&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;下的参数，比如控制刷脏页的频率，脏页占有量，</p><p>IO问题的分析<br>几个重要的概念</p><h1 id="顺序IO"><a href="#顺序IO" class="headerlink" title="顺序IO"></a>顺序IO</h1><p>顺序读写文件，能很好地利用预读，对于机械磁盘也不用做磁头寻道，所以是性能最好的读写模<br>式，但是一般适用于日志类场景</p><h1 id="随机IO"><a href="#随机IO" class="headerlink" title="随机IO"></a>随机IO</h1><p>随机读写，机械磁盘性能会非常差，如果是这种场景建议用SSD。当然应用层也会做各种努力尽量会将随机IO改成顺序IO</p><h1 id="fsync刷盘"><a href="#fsync刷盘" class="headerlink" title="fsync刷盘"></a>fsync刷盘</h1><p>为了数据安全，每次写入完成通过fsync做强制刷盘操作，避免机器突然掉电能情况丢失数据，但是这个操作对吞吐和响应延时有较大的影响，一般会采用一些批量合并fsync的模式做优化</p><h1 id="direct-io"><a href="#direct-io" class="headerlink" title="direct io"></a>direct io</h1><p>绕过page cache，直接对设备进行读写，一般性能不如带page cache，适用于在业务层做了cache,比如数据库</p><h1 id="aio-异步IO"><a href="#aio-异步IO" class="headerlink" title="aio:异步IO"></a>aio:异步IO</h1><p>读写操作异步化，一般也是directio模式，编程会比较复杂，对于大部分应用不要采用，一般也是适用于数据库场景</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/luslin1711/article/details/105859523">设计一个抢票秒杀系统_luslin1711的博客-CSDN博客</a><br><a href="https://blog.csdn.net/lfssst/article/details/123722149">抢票系统之架构设计_lfssst的博客-CSDN博客_抢票系统设计</a><br><a href="https://bytedancecampus1.feishu.cn/minutes/obcn2m3bdq645dm627u6u38w">陈朋 (feishu.cn)</a><br><a href="https://github.com/EduFriendChen/snatch-tickets-demo">EduFriendChen&#x2F;snatch-tickets-demo: 解：字节校园镜像技术项目实战活动 —— 【后端】如果有一千万个人抢票怎么办？ (github.com)</a><br><a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/middleware/">中间件概览 | CloudWeGo</a><br><a href="https://github.com/cloudwego/hertz-benchmark">cloudwego&#x2F;hertz-benchmark: Tracking performance changes for Hertz (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;p&gt;抢票的要素：&lt;br&gt;时间- 确定列车的剩余票数&lt;br&gt;区间- &lt;/p&gt;
&lt;h1 id=&quot;后台开发导论&quot;&gt;&lt;a href=&quot;#后台开发导论&quot; </summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mudduo-ch01</title>
    <link href="http://example.com/2022/11/02/Linux-Network-Programming/ChenShuo-muduo/mudduo-ch01/"/>
    <id>http://example.com/2022/11/02/Linux-Network-Programming/ChenShuo-muduo/mudduo-ch01/</id>
    <published>2022-11-02T11:46:15.000Z</published>
    <updated>2023-03-16T12:06:31.119Z</updated>
    
    <content type="html"><![CDATA[<p>仅仅只能在linux下运行</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>muduo采用CMake为build system<br>CMake的安装如下：（CMake最好不低于2.8版，CentOS 6自带的2.6版也能用，但是无法自动识别Protobuf库）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install cmake</span><br><span class="line">sudo apt-<span class="built_in">get</span> install g++</span><br></pre></td></tr></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>muduo依赖于Boost，Boost的安装如下</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libboost-<span class="built_in">dev</span> libboost-test-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>安装出现问题</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E: Could <span class="keyword">not</span> <span class="keyword">get</span> <span class="keyword">lock</span> /<span class="keyword">var</span>/lib/dpkg/<span class="keyword">lock</span>-frontend. It <span class="keyword">is</span> held <span class="keyword">by</span> process <span class="number">5865</span> (unattended-upgr)</span><br><span class="line">N: Be aware that removing the <span class="keyword">lock</span> file <span class="keyword">is</span> <span class="keyword">not</span> a solution <span class="keyword">and</span> may <span class="keyword">break</span> your system.</span><br><span class="line">E: <span class="function">Unable to acquire the dpkg frontend <span class="title">lock</span> (<span class="params">/<span class="keyword">var</span>/lib/dpkg/<span class="keyword">lock</span>-frontend</span>), <span class="keyword">is</span> another process <span class="keyword">using</span> it?</span></span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm <span class="regexp">/var/</span>lib<span class="regexp">/dpkg/</span>lock-frontend</span><br><span class="line">sudo rm <span class="regexp">/var/</span>lib<span class="regexp">/dpkg/</span>lock</span><br><span class="line">sudo rm <span class="regexp">/var/</span>cache<span class="regexp">/apt/</span>archives/lock</span><br></pre></td></tr></table></figure><h2 id="第三步（可选）"><a href="#第三步（可选）" class="headerlink" title="第三步（可选）"></a>第三步（可选）</h2><p>muduo有三个非必须的依赖库（curl、c-ares DNS、Google Protobuf）如果安装了这三个库，cmake会自动多编译一些示例<br>安装方法如下：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libcurl4-openssl-<span class="built_in">dev</span> libc-ares-<span class="built_in">dev</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install protobuf-compiler libprotobuf-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h2 id="第四步：下载muduo源码包"><a href="#第四步：下载muduo源码包" class="headerlink" title="第四步：下载muduo源码包"></a>第四步：下载muduo源码包</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/chenshuo/mu</span>duo.git</span><br></pre></td></tr></table></figure><h2 id="第五步：编译muduo"><a href="#第五步：编译muduo" class="headerlink" title="第五步：编译muduo"></a>第五步：编译muduo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载完成之后进入muduo根目录</span></span><br><span class="line"><span class="built_in">cd</span> muduo</span><br><span class="line"><span class="comment"># 编译muduo库和它自带的例子</span></span><br><span class="line">./build.sh -j2</span><br></pre></td></tr></table></figure><p>编译完成之后：<br>会在muduo源码根路径的上一级路径下生成一个build目录（下面全文我们以..&#x2F;build表示）<br>生成的可执行文件位于：..&#x2F;build&#x2F;release-cpp11&#x2F;bin<br>静态文件位于：..&#x2F;build&#x2F;release-cpp11&#x2F;lib</p><h2 id="第六步：安装muduo库"><a href="#第六步：安装muduo库" class="headerlink" title="第六步：安装muduo库"></a>第六步：安装muduo库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.sh install</span><br></pre></td></tr></table></figure><p>muduo头文件安装在..&#x2F;build&#x2F;release-install-cpp11&#x2F;include目录下<br>库文件安装在..&#x2F;build&#x2F;release-install-cpp11&#x2F;lib目录下<br>以便muduo-protorpc和muduo-udns等库使用</p><h1 id="文件内容的分析"><a href="#文件内容的分析" class="headerlink" title="文件内容的分析"></a>文件内容的分析</h1><p>recipes&#x2F;tpc&#x2F;netcat.cc  thread-per-connection<br>recipes&#x2F;python&#x2F;netcat.py IO-multiplexing<br>recipes&#x2F;python&#x2F;netcat-nonblock.py IO-multiplexing</p><p>参考文件所在位置：<br>recipes&#x2F;tpc&#x2F;chargen.cc<br>recipes&#x2F;python&#x2F;chargen.py<br>muduo&#x2F;examples&#x2F;simple&#x2F;chargen&#x2F;*</p><h1 id="安装boost库"><a href="#安装boost库" class="headerlink" title="安装boost库"></a>安装boost库</h1><p>apt-get install libboost-all-dev</p><h1 id="多个netcat的实现"><a href="#多个netcat的实现" class="headerlink" title="多个netcat的实现"></a>多个netcat的实现</h1><h2 id="各种工具"><a href="#各种工具" class="headerlink" title="各种工具"></a>各种工具</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><h3 id="ntcat"><a href="#ntcat" class="headerlink" title="ntcat"></a>ntcat</h3><p>nc -l 1234 # 当做服务器,监听本机的1234端口<br>nc localhost 1234 # 当做客户端,连接到本机的1234端口</p><h1 id="学习netcat怎么编写"><a href="#学习netcat怎么编写" class="headerlink" title="学习netcat怎么编写"></a>学习netcat怎么编写</h1><p>g++ -Wall -std&#x3D;c++11 -pthread -O2 -g -iquote include&#x2F; -I..&#x2F; -I&#x2F;usr&#x2F;local&#x2F;include  -L lib&#x2F; -L&#x2F;usr&#x2F;local&#x2F;lib -ltpc  bin&#x2F;echo_client.cc lib&#x2F;libtpc.a   -o bin&#x2F;echo_client</p><h1 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h1><p>apt-get install libboost-all-dev<br>cd recipes&#x2F;tpc&#x2F;<br>make</p><h2 id="1-系统自带的nc"><a href="#1-系统自带的nc" class="headerlink" title="1.系统自带的nc"></a>1.系统自带的nc</h2><blockquote><p>终端1，作为服务器</p></blockquote><p><code>./chargen -l 1234  # 启动服务器，监听在1234端口，如果有连接到来，就给他发送消息</code></p><blockquote><p>终端2，作为客户端</p></blockquote><p><code>nc localhost 1234 &gt; /dev/null  # 启动客户端，将收到的信息给扔掉</code></p><blockquote><p>终端1的输出结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">805.430 MiB/s</span><br><span class="line">1936.315 MiB/s</span><br><span class="line">1927.679 MiB/s</span><br><span class="line">1925.130 MiB/s</span><br><span class="line">1928.128 MiB/s</span><br><span class="line">1937.221 MiB/s</span><br><span class="line">1930.871 MiB/s</span><br><span class="line">1929.448 MiB/s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>使用top查看进程使用情况</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"><span class="attribute">6814</span> root      <span class="number">20</span>   <span class="number">0</span>    <span class="number">3340</span>   <span class="number">2016</span>   <span class="number">1892</span> R <span class="number">100</span>.<span class="number">0</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">36</span>.<span class="number">72</span> nc</span><br><span class="line"><span class="attribute">6783</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">87976</span>   <span class="number">2020</span>   <span class="number">1836</span> S  <span class="number">65</span>.<span class="number">4</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">38</span>.<span class="number">23</span> chargen</span><br><span class="line">  <span class="attribute">33</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0</span>.<span class="number">3</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">03</span> ksoftirqd/<span class="number">3</span></span><br><span class="line"> <span class="attribute">936</span> redis     <span class="number">20</span>   <span class="number">0</span>   <span class="number">55872</span>   <span class="number">4608</span>   <span class="number">3300</span> S   <span class="number">0</span>.<span class="number">3</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">05</span>.<span class="number">40</span> redis-server</span><br></pre></td></tr></table></figure><p>可以看到nc的占用率已经满了，现在是netcat是瓶颈</p><h2 id="2-自己写的ntcat"><a href="#2-自己写的ntcat" class="headerlink" title="2.自己写的ntcat"></a>2.自己写的ntcat</h2><blockquote><p>终端1，作为服务器</p></blockquote><p><code>./chargen -l 1234  # 启动服务器，监听在1234端口，如果有连接到来，就给他发送消息</code></p><blockquote><p>终端2，作为客户端</p></blockquote><p><code>./netcat localhost 1234 &gt; /dev/null  # 启动自己写的netcat客户端</code></p><blockquote><p>终端1的输出结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">125.255 MiB/s</span><br><span class="line">2285.290 MiB/s</span><br><span class="line">2292.587 MiB/s</span><br><span class="line">2271.676 MiB/s</span><br><span class="line">2296.449 MiB/s</span><br><span class="line">2272.828 MiB/s</span><br><span class="line">2290.678 MiB/s</span><br><span class="line">2269.953 MiB/s</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>使用top查看进程使用情况</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attribute">PID</span> USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"><span class="attribute">6910</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">14324</span>   <span class="number">3292</span>   <span class="number">3072</span> S  <span class="number">99</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">10</span>.<span class="number">31</span> netcat</span><br><span class="line">  <span class="attribute">6908</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">87976</span>   <span class="number">1740</span>   <span class="number">1580</span> S  <span class="number">78</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">08</span>.<span class="number">18</span> chargen</span><br><span class="line">  <span class="attribute">1062</span> mysql     <span class="number">20</span>   <span class="number">0</span> <span class="number">2319480</span> <span class="number">394948</span>  <span class="number">37472</span> S   <span class="number">0</span>.<span class="number">7</span>   <span class="number">2</span>.<span class="number">4</span>   <span class="number">0</span>:<span class="number">27</span>.<span class="number">63</span> mysqld</span><br><span class="line">  <span class="attribute">6843</span> root      <span class="number">20</span>   <span class="number">0</span>   <span class="number">15068</span>   <span class="number">4048</span>   <span class="number">3228</span> R   <span class="number">0</span>.<span class="number">7</span>   <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">82</span> top</span><br></pre></td></tr></table></figure><p>可以看到</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>陈硕的博客 <a href="https://www.cnblogs.com/Solstice/archive/2011/02/02/1948814.html">https://www.cnblogs.com/Solstice/archive/2011/02/02/1948814.html</a><br>陈硕的csdn <a href="https://blog.csdn.net/Solstice?type=blog">https://blog.csdn.net/Solstice?type=blog</a><br>陈硕的课程主页 <a href="http://chenshuo.com/practical-network-programming/">http://chenshuo.com/practical-network-programming/</a><br>相关的代码仓库：<br><a href="http://github.com/chenshuo/muduo">http://github.com/chenshuo/muduo</a><br><a href="http://github.com/chenshuo/recipes">http://github.com/chenshuo/recipes</a><br><a href="http://github.com/chenshuo/muduo-protorpc">http://github.com/chenshuo/muduo-protorpc</a><br><a href="http://github.com/chenshuo/muduo-examples-in-go">http://github.com/chenshuo/muduo-examples-in-go</a><br>如何安装 <a href="https://www.365seal.com/y/elnWyG1GVr.html">https://www.365seal.com/y/elnWyG1GVr.html</a><br>make编译源码时-j的作用 <a href="https://blog.csdn.net/JeekMrc/article/details/118332252">https://blog.csdn.net/JeekMrc/article/details/118332252</a><br>安装boost的问题 <a href="https://zhuanlan.zhihu.com/p/126538251">https://zhuanlan.zhihu.com/p/126538251</a><br>[万字长文梳理Muduo库核心代码及优秀编程细节思想剖析]<a href="https://zhuanlan.zhihu.com/p/495016351">https://zhuanlan.zhihu.com/p/495016351</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仅仅只能在linux下运行&lt;/p&gt;
&lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步&quot;&gt;&lt;/a&gt;第一步&lt;/h2&gt;&lt;p&gt;muduo采用CMake为build system&lt;br&gt;CMake的安装如下：（CMak</summary>
      
    
    
    
    
    <category term="Linux网络编程" scheme="http://example.com/tags/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 面经</title>
    <link href="http://example.com/2022/11/02/Interview-Q&amp;A/network_Q&amp;A/"/>
    <id>http://example.com/2022/11/02/Interview-Q&amp;A/network_Q&amp;A/</id>
    <published>2022-11-02T05:39:59.000Z</published>
    <updated>2022-11-03T08:56:36.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="1、OSI-的七层模型分别是？各自的功能是什么？"><a href="#1、OSI-的七层模型分别是？各自的功能是什么？" class="headerlink" title="1、OSI 的七层模型分别是？各自的功能是什么？"></a>1、OSI 的七层模型分别是？各自的功能是什么？</h2><table><thead><tr><th>层数</th><th align="left">作用</th><th>传输数据的名称</th></tr></thead><tbody><tr><td>物理层</td><td align="left">保证有物理上的连接的传输</td><td>比特流 （Bits）</td></tr><tr><td>数据链路层</td><td align="left"></td><td>帧 （Frames）</td></tr><tr><td>网络层</td><td align="left">提供点对点的服务，可以找到对方的IP，就是找到对方主机的位置</td><td>包 （Packages）</td></tr><tr><td>传输层</td><td align="left">从传递到主机变成可以传递到进程之间</td><td>段 （Segments）</td></tr><tr><td>会话层</td><td align="left"></td><td></td></tr><tr><td>表示层</td><td align="left"></td><td></td></tr><tr><td>应用层</td><td align="left">在隔绝下层的通信内容后，可以制作各种的应用</td><td></td></tr></tbody></table><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h2 id="应用层常见协议知道多少？了解几个？"><a href="#应用层常见协议知道多少？了解几个？" class="headerlink" title="应用层常见协议知道多少？了解几个？"></a>应用层常见协议知道多少？了解几个？</h2><table><thead><tr><th>应用层协议</th><th>传输层</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>超文本传输协议</td></tr><tr><td>FTP</td><td>TCP</td><td>23</td><td>文件传输</td></tr><tr><td>DNS</td><td>UDP</td><td>53</td><td>域名服务器</td></tr><tr><td>SMTP</td><td></td><td>465&#x2F;994</td><td>邮件发送协议</td></tr><tr><td>POP3</td><td></td><td>995</td><td>邮件接收协议，邮件存到本机，删除服务器上邮件</td></tr><tr><td>IMAP</td><td></td><td>993</td><td>邮件接收协议，邮件存到本机，不删除服务器上邮件</td></tr><tr><td>BitTorrent</td><td>TCP&#x2F;UDP</td><td></td><td>P2P的文件共享协议</td></tr><tr><td>RTSP</td><td>TCP&#x2F;UDP</td><td></td><td>主要用于拉取视频流，用在VLC</td></tr></tbody></table><h2 id="二、HTTP"><a href="#二、HTTP" class="headerlink" title="二、HTTP"></a>二、HTTP</h2><h3 id="1-HTTP基础"><a href="#1-HTTP基础" class="headerlink" title="1)HTTP基础"></a>1)HTTP基础</h3><h4 id="1-说一下一次完整的HTTP请求过程包括哪些内容？"><a href="#1-说一下一次完整的HTTP请求过程包括哪些内容？" class="headerlink" title="1.说一下一次完整的HTTP请求过程包括哪些内容？"></a>1.说一下一次完整的HTTP请求过程包括哪些内容？</h4><ol><li>建立客户端和服务器的连接</li><li>客户端发送消息给服务器</li><li>服务器给客户端发送应答消息</li><li>客户端收到消息，浏览器解析，给用户呈现</li></ol><h4 id="2-HTTP长连接和短连接的区别"><a href="#2-HTTP长连接和短连接的区别" class="headerlink" title="2.HTTP长连接和短连接的区别"></a>2.HTTP长连接和短连接的区别</h4><p>HTTP1.0默认使用短连接，每次HTTP连接完成以后，都会自动断开，下一次连接的时候的时候又会重新建立，十分的花费时间</p><p>HTTP1.1默认使用长连接，也就是<strong>持久连接</strong></p><p>其中HTTP1.1报文首部中使用Connection:Keep-Alive字段，指定使用了长链接</p><h4 id="3-HTTP请求方法你知道多少？"><a href="#3-HTTP请求方法你知道多少？" class="headerlink" title="3.HTTP请求方法你知道多少？"></a>3.HTTP请求方法你知道多少？</h4><table><thead><tr><th>方法</th><th>作用</th><th>HTTP1.0</th><th>HTTP1.1</th></tr></thead><tbody><tr><td>GET</td><td>主要为获取和查询数据</td><td>√</td><td>√</td></tr><tr><td>POST</td><td>发送修改请求</td><td>√</td><td>√</td></tr><tr><td>HEAD</td><td>获取响应首部</td><td>√</td><td>√</td></tr><tr><td>DELETE</td><td>删除资源</td><td>√</td><td>√</td></tr><tr><td>PUT</td><td>传输文件</td><td>√</td><td>√</td></tr><tr><td>OPTION</td><td>查询对应的URL支持的方法</td><td>×</td><td>√</td></tr><tr><td>TRACE</td><td>将请求通信回路返回给客户端</td><td>×</td><td>√</td></tr><tr><td>CONNECT</td><td>使用隧道协议代理进行连接</td><td>×</td><td>√</td></tr><tr><td><del>LINK</del></td><td></td><td>×</td><td>现在被取消了</td></tr><tr><td><del>UNLINK</del></td><td></td><td>×</td><td>现在被取消了</td></tr></tbody></table><h4 id="4-常见的HTTP状态码有哪些？"><a href="#4-常见的HTTP状态码有哪些？" class="headerlink" title="4.常见的HTTP状态码有哪些？"></a>4.常见的HTTP状态码有哪些？</h4><table><thead><tr><th>状态码</th><th>具体状态码</th><th>类别</th><th>原因短语</th><th>常见情况</th></tr></thead><tbody><tr><td>1XX</td><td></td><td></td><td>请求正在处理</td><td>POST的请求中转时候使用</td></tr><tr><td>2XX</td><td></td><td></td><td>请求成功</td><td></td></tr><tr><td></td><td>200</td><td>OK</td><td></td><td></td></tr><tr><td></td><td>204</td><td></td><td></td><td></td></tr><tr><td></td><td>206</td><td></td><td></td><td></td></tr><tr><td>3XX</td><td></td><td></td><td>请求重定向</td><td></td></tr><tr><td></td><td>301</td><td></td><td></td><td></td></tr><tr><td></td><td>302</td><td></td><td></td><td></td></tr><tr><td></td><td>303</td><td></td><td></td><td></td></tr><tr><td></td><td>304</td><td></td><td></td><td></td></tr><tr><td></td><td>307</td><td></td><td></td><td></td></tr><tr><td>4XX</td><td></td><td>Client Error</td><td>客户端错误</td><td></td></tr><tr><td></td><td>400</td><td>Bad Request</td><td>错误请求</td><td>请求报文中存在语法问题</td></tr><tr><td></td><td>401</td><td></td><td></td><td></td></tr><tr><td></td><td>403</td><td>Forbidden</td><td>禁止访问</td><td>没有访问的权限</td></tr><tr><td></td><td>404</td><td>Not Found</td><td>服务器上没有请求的资源</td><td></td></tr><tr><td>5XX</td><td></td><td>Server Error</td><td>服务器错误</td><td></td></tr><tr><td></td><td>500</td><td>Internal Server Error</td><td>服务器本身出错</td><td>对于URL请求过来，处理出现了BUG<br/>代码有bug</td></tr><tr><td></td><td>503</td><td>Service Unavilable</td><td>服务器正忙</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="6-HTTP请求和响应报文有哪些主要字段？"><a href="#6-HTTP请求和响应报文有哪些主要字段？" class="headerlink" title="6.HTTP请求和响应报文有哪些主要字段？"></a>6.HTTP请求和响应报文有哪些主要字段？</h4><p>请求报文：</p><p>请求行 ： 包括请求方法，URL，协议&#x2F;版本，例如：GET HTTP&#x2F;1.1</p><p>请求头部：User-Agent:</p><p>请求主体：body</p><p>响应报文：</p><p>状态行：HTTP&#x2F;1.1 200 OK</p><p>响应头部：Content-Length:200</p><p>响应主体：<html></html></p><h4 id="7-HTTPS是什么？"><a href="#7-HTTPS是什么？" class="headerlink" title="7.HTTPS是什么？"></a>7.HTTPS是什么？</h4><p>HTTPS不是一种新的协议，是在HTTP协议的下方通过SSL&#x2F;TLS来提供加密服务，但是HTTP+SSL依然处在应用层</p><p>然后通过TCP协议将加密的信息发送给对方，从而达到，防窃听，防伪装，防篡改的目的</p><h4 id="8-SSL是什么？"><a href="#8-SSL是什么？" class="headerlink" title="8.SSL是什么？"></a>8.SSL是什么？</h4><p>SSL(Secure Socket Layer，安全套接字层)</p><p>TSL(Transport Layer Security，传输安全层)，前身是SSL</p><h4 id="9-HTTPS和HTTP的区别"><a href="#9-HTTPS和HTTP的区别" class="headerlink" title="9.HTTPS和HTTP的区别"></a>9.HTTPS和HTTP的区别</h4><ol><li>HTTP是明文传输的，数据都没有进行加密，HTTPS通过SSL&#x2F;TLS层提供了加密服务</li><li>HTTP只需要在TCP三次握手后就可以建立连接，只需要交换3个数据报，但是HTTPS除了需要TCP的三次握手之外，还需要SSL握手需要9个包，建立连接的速度比HTTP慢</li><li>HTTP需要到CA(证书颁发机构)申请证书，后才能使用，但是免费的证书比较少，而且需要一定的费用</li><li>HTTP和HTTPS使用的连接方式不同，使用的端口也不同，HTTP在80号端口，HTTPS在443号端口</li></ol><h4 id="10-HTTP的缺点有哪些？"><a href="#10-HTTP的缺点有哪些？" class="headerlink" title="10.HTTP的缺点有哪些？"></a>10.HTTP的缺点有哪些？</h4><ol><li>使用明文传输，传输过程没有加密，传送内容容易被<strong>窃听</strong></li><li>不验证通信方的身份，通信方的身份可能遭遇<strong>伪装</strong></li><li>无法验证报文完整性，加密内容容易被<strong>篡改</strong></li></ol><h4 id="11-HTTPS采用的加密方式有哪些？是对称还是非对称？"><a href="#11-HTTPS采用的加密方式有哪些？是对称还是非对称？" class="headerlink" title="11.HTTPS采用的加密方式有哪些？是对称还是非对称？"></a>11.HTTPS采用的加密方式有哪些？是对称还是非对称？</h4><h4 id="12-HTTP如何禁用缓存？如何确认缓存？"><a href="#12-HTTP如何禁用缓存？如何确认缓存？" class="headerlink" title="12.HTTP如何禁用缓存？如何确认缓存？"></a>12.HTTP如何禁用缓存？如何确认缓存？</h4><h4 id="13-URI和URL的区别"><a href="#13-URI和URL的区别" class="headerlink" title="13.URI和URL的区别"></a>13.URI和URL的区别</h4><p>URI：Uniform Resource Identifier，统一资源<strong>定位</strong>符</p><p>URL：Uniform Resource Location，统一资源<strong>标识</strong>符</p><p>URI是用来标识一个资源的，可以通过这个知道资源是什么</p><p>URL是用来定位具体资源的，通过这个可以拉取到想要的资源</p><h3 id="2-请求方法"><a href="#2-请求方法" class="headerlink" title="2)请求方法"></a>2)请求方法</h3><h4 id="1-GET-和-POST-的区别，你知道哪些？"><a href="#1-GET-和-POST-的区别，你知道哪些？" class="headerlink" title="1.GET 和 POST 的区别，你知道哪些？"></a>1.GET 和 POST 的区别，你知道哪些？</h4><ol><li>GET传输的内容在参数中传递，POST在body中传递参数</li><li>GET一般用于获取数据，POST一般用于修改数据，比如登录的场景</li><li>GET提交的数据，理论上长度为2K，POST传递的数据长度，理论上没有限制</li><li>GET请求会被浏览器缓存，POST一般情况下不会</li><li>GET是幂等的，POST不是幂等的</li></ol><p>记忆：1.传参，2.作用，3.长度，4.缓存，5.幂等</p><p>幂等性的意思：对服务器的请求，请求一次的结果和请求多次的结果是一样的</p><p>GET查询一个数据，每次查询的结果是一样的，所以是幂等的</p><p>POST生成一个新的数据，比如生成一个博客，POST请求了两次，可能会生成两个页面</p><h4 id="2-GET-方法参数写法是固定的吗？"><a href="#2-GET-方法参数写法是固定的吗？" class="headerlink" title="2.GET 方法参数写法是固定的吗？"></a>2.GET 方法参数写法是固定的吗？</h4><p>一般情况下，GET请求的参数都是写在?后面，通过&amp;来连接多个参数</p><p>服务器解析的过程是，获取TCP连接传输过来的数据，通过正则表达式的方法获取Header和Body，从而提取到GET请求的参数</p><p>但这个参数的写法也是由客户端和服务器之间约定形成的，只要双方遵守约定的规则，都是可以解析的</p><h4 id="3-GET-方法的长度限制是怎么回事？"><a href="#3-GET-方法的长度限制是怎么回事？" class="headerlink" title="3.GET 方法的长度限制是怎么回事？"></a>3.GET 方法的长度限制是怎么回事？</h4><p>GET方法理论上没有长度的限制，HTTP协议没有对Body和URL进行长度限制</p><p>一般是浏览器或者服务器给GET方法添加的限制，一般为2K大小</p><p>服务器限制GET方法的长度的原因：1.从性能角度考虑，处理较长的URL消耗较多的资源，2.从安全角度考虑，防止恶意构造长的URL来攻击</p><h4 id="4-POST-方法比-GET-方法安全？"><a href="#4-POST-方法比-GET-方法安全？" class="headerlink" title="4.POST 方法比 GET 方法安全？"></a>4.POST 方法比 GET 方法安全？</h4><p>POST方法，传输的数据，从地址栏是不可见的，看起来比GET方法安全</p><p>但是HTTP都是明文传输的，只要进行数据抓包，就能抓到POST方法中Body的内容，所以其实也是不安全的</p><p>想要安全传输，还需要将HTTP改造成HTTPS</p><h4 id="5-POST-方法会产生两个-TCP-数据包？你了解吗？"><a href="#5-POST-方法会产生两个-TCP-数据包？你了解吗？" class="headerlink" title="5.POST 方法会产生两个 TCP 数据包？你了解吗？"></a>5.POST 方法会产生两个 TCP 数据包？你了解吗？</h4><p>HTTP协议中没有说POST会发送两次请求</p><p>是有些文章中提到使用POST会将head和body分开发送，先发送header，服务器返回100后再次发送body</p><p>但是实际上发现，在大多数情况下并不是这样</p><p>所以说POST产生两个TCP数据包的情况，是部分浏览器和框架的行为，不是POST的必然行为</p><h4 id="6-GET与POST传递数据的最大长度能够达到多少呢？"><a href="#6-GET与POST传递数据的最大长度能够达到多少呢？" class="headerlink" title="6.GET与POST传递数据的最大长度能够达到多少呢？"></a>6.GET与POST传递数据的最大长度能够达到多少呢？</h4><p>HTTP没有对GET和POST请求，传递数据的最大长度做规范</p><p>GET能传输的最大长度取决于URL的长度，一般浏览器的限制为2K，主要是服务器设计者从安全和性能的角度考虑的</p><p>POST的传输长度取决于body能传输多大，一般都是要求小于MB</p><h3 id="3-状态管理"><a href="#3-状态管理" class="headerlink" title="3)状态管理"></a>3)状态管理</h3><h4 id="1-Cookie是什么？"><a href="#1-Cookie是什么？" class="headerlink" title="1.Cookie是什么？"></a>1.Cookie是什么？</h4><p>由于HTTP协议是无状态的，所以在HTTP&#x2F;1.1中就引入了cookie来保存用户信息。</p><p>用来解决每次刷新一次页面都需要重新登录的情况</p><p>客户端向服务器发送请求后，服务器返回的消息中会携带一小段数据用于标识这个用户，之后每次客户端的请求都会带上这一小段cookie表示来自同一个用户的请求，会增加一些性能开销</p><h4 id="2-Cookie有什么用途？用途"><a href="#2-Cookie有什么用途？用途" class="headerlink" title="2.Cookie有什么用途？用途"></a>2.Cookie有什么用途？用途</h4><ol><li>会话状态的管理，记住用户的登录状态，购物车信息，收藏夹内容</li><li>个性化设置，电商页面的话会给用户做个性化推荐</li><li>浏览器行为跟踪，跟踪分析用户的行为</li></ol><h4 id="3-Session是什么？"><a href="#3-Session是什么？" class="headerlink" title="3.Session是什么？"></a>3.Session是什么？</h4><p>除了将用户的cookie存在本地，还可以使用session将用户信息存储在服务器</p><p>sesion可以存储在服务器的文件，数据库，内存中，或者存在redis这种内存数据中，效率更高</p><h4 id="Session-的工作原理是什么？-x2F-使用-Session-的过程是怎样的？"><a href="#Session-的工作原理是什么？-x2F-使用-Session-的过程是怎样的？" class="headerlink" title="Session 的工作原理是什么？&#x2F;使用 Session 的过程是怎样的？"></a>Session 的工作原理是什么？&#x2F;使用 Session 的过程是怎样的？</h4><h4 id="Cookies和Session区别是什么？Cookie与Session的对比"><a href="#Cookies和Session区别是什么？Cookie与Session的对比" class="headerlink" title="Cookies和Session区别是什么？Cookie与Session的对比"></a>Cookies和Session区别是什么？Cookie与Session的对比</h4><h4 id="Session和cookie应该如何去选择（适用场景）？"><a href="#Session和cookie应该如何去选择（适用场景）？" class="headerlink" title="Session和cookie应该如何去选择（适用场景）？"></a>Session和cookie应该如何去选择（适用场景）？</h4><ol><li>cookie只能保存ASCII码值，cookie可以保存各种类型的信息，当存储的内容较复杂的时候，首选cookie</li><li>cookie存储在浏览器中，容易被恶意查看，容易造成隐私的泄漏，隐私数据应该存在session中</li><li>session对于大型网站，用户量十分大，储存的开销也是十分大的，只需要在sesion中保存重要信息</li></ol><h2 id="二、DNS"><a href="#二、DNS" class="headerlink" title="二、DNS"></a>二、DNS</h2><h3 id="1-你知道DNS是什么？"><a href="#1-你知道DNS是什么？" class="headerlink" title="1.你知道DNS是什么？"></a>1.你知道DNS是什么？</h3><p>DNS是一种域名解析服务器，可以将用户发送过来的域名转化为具体的IP地址</p><h3 id="2-DNS的工作原理？"><a href="#2-DNS的工作原理？" class="headerlink" title="2.DNS的工作原理？"></a>2.DNS的工作原理？</h3><h3 id="DNS查询方式有哪些？"><a href="#DNS查询方式有哪些？" class="headerlink" title="DNS查询方式有哪些？"></a>DNS查询方式有哪些？</h3><h1 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h1><h3 id="SYN攻击是什么？"><a href="#SYN攻击是什么？" class="headerlink" title="SYN攻击是什么？"></a>SYN攻击是什么？</h3><h3 id="DDos-攻击了解吗？"><a href="#DDos-攻击了解吗？" class="headerlink" title="DDos 攻击了解吗？"></a>DDos 攻击了解吗？</h3><h3 id="XSS攻击是什么？（低频）"><a href="#XSS攻击是什么？（低频）" class="headerlink" title="XSS攻击是什么？（低频）"></a>XSS攻击是什么？（低频）</h3><h3 id="CSRF攻击？你知道吗？"><a href="#CSRF攻击？你知道吗？" class="headerlink" title="CSRF攻击？你知道吗？"></a>CSRF攻击？你知道吗？</h3><h3 id="如何防范CSRF攻击"><a href="#如何防范CSRF攻击" class="headerlink" title="如何防范CSRF攻击"></a>如何防范CSRF攻击</h3><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://interviewguide.cn/notes/03-hunting_job/02-interview/03-01-net.html#_11%E3%80%81get-%E5%92%8C-post-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B">计算机网络-01-20 | 阿秀的学习笔记 (interviewguide.cn)</a>[</p><p><a href="https://cloud.tencent.com/developer/article/1498283">面试必备：GET和POST 的区别详细解说 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/zerooffdate/article/details/78962818">HTTP POST请求发送两个TCP包？_john-zeng的博客-CSDN博客_post 两个tcp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;1、OSI-的七层模型分别是？各自的功能是什么？&quot;&gt;&lt;a href=&quot;#1、OSI-的七层模型分别是？各自的功能是什么？&quot; cla</summary>
      
    
    
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>学习路径</title>
    <link href="http://example.com/2022/10/29/Others/learn-road/"/>
    <id>http://example.com/2022/10/29/Others/learn-road/</id>
    <published>2022-10-29T07:08:31.000Z</published>
    <updated>2023-01-08T15:59:20.483Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h1><h1 id="C-书籍"><a href="#C-书籍" class="headerlink" title="C++书籍"></a>C++书籍</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Essential C++<br>C++ primer plus</p><h2 id="进阶1"><a href="#进阶1" class="headerlink" title="进阶1"></a>进阶1</h2><p>C++ Primer<br>Effective C++<br>More Effective C++<br>Effective STL</p><h2 id="进阶2"><a href="#进阶2" class="headerlink" title="进阶2"></a>进阶2</h2><p>STL 源码剖析<br>深度探索 C++ 对象模型</p><p>候捷 C++：<br>C++内存管理<br>STL源码分析<br>C++ STL与泛型编程高级<br>C++11 新特性</p><h2 id="内化功力"><a href="#内化功力" class="headerlink" title="内化功力"></a>内化功力</h2><p>C++ 语言的设计与演化<br>C++ 沉思录<br>C++ Templates和C++模版元编程<br>C+标准库(第2版)</p><h1 id="C-网络编程"><a href="#C-网络编程" class="headerlink" title="C++网络编程"></a>C++网络编程</h1><p>linux网络编程-宋敬彬<br>Linux高性能服务器编程-陈硕</p><h1 id="linux书籍"><a href="#linux书籍" class="headerlink" title="linux书籍"></a>linux书籍</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>鸟哥私房菜</p><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>Unix网络编程（选看）<br>UNIX环境高级编程（选看）</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="入门-1"><a href="#入门-1" class="headerlink" title="入门"></a>入门</h2><pre><code>mysql必知必会</code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><pre><code>MySQL是怎样运行的——有个小孩子高性能mysql——很厚MySQL技术内幕：InnoDB存储引擎</code></pre><h2 id="高级-1"><a href="#高级-1" class="headerlink" title="高级"></a>高级</h2><pre><code>MySQL排错指南数据库索引设计与优化Effective MySQL</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><pre><code>    Redis设计与实现——必看</code></pre><h2 id="更高维度"><a href="#更高维度" class="headerlink" title="更高维度"></a>更高维度</h2><pre><code>数据库系统实现</code></pre><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="入门-2"><a href="#入门-2" class="headerlink" title="入门"></a>入门</h2><p>Python编程，从入门到实践</p><h2 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h2><p>流畅的python<br>Python Cookbook</p><h2 id="Python数据分析类"><a href="#Python数据分析类" class="headerlink" title="Python数据分析类"></a>Python数据分析类</h2><p>利用Python进行数据分析<br>Python数据分析实战<br>Python数据可视化编程实战<br>Python金融大数据分析</p><h2 id="Python网络爬虫类"><a href="#Python网络爬虫类" class="headerlink" title="Python网络爬虫类"></a>Python网络爬虫类</h2><p>从零开始学Python网络爬虫<br>精通Python网络爬虫<br>精通Scrapy网络爬虫<br>Python3网络爬虫数据采集<br>精通Python网络爬虫 核心技术、框架与项目实战<br>自己动手写网络爬虫</p><h2 id="机器学习类"><a href="#机器学习类" class="headerlink" title="机器学习类"></a>机器学习类</h2><p>机器学习应用实验手册<br>模式识别与机器学习 中文版</p><h2 id="编码规范类"><a href="#编码规范类" class="headerlink" title="编码规范类"></a>编码规范类</h2><p>Python 编码规范(Google)</p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>docker技术入门与实践——初级入门<br>docker进阶与实战——初级介绍不多，讲了很多例子<br>Docker源码分析<br>自己动手写docker——高难度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;书籍推荐&quot;&gt;&lt;a href=&quot;#书籍推荐&quot; class=&quot;headerlink&quot; title=&quot;书籍推荐&quot;&gt;&lt;/a&gt;书籍推荐&lt;/h1&gt;&lt;h1 id=&quot;C-书籍&quot;&gt;&lt;a href=&quot;#C-书籍&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>github 教程</title>
    <link href="http://example.com/2022/10/29/Tutorial/github-tutorial/"/>
    <id>http://example.com/2022/10/29/Tutorial/github-tutorial/</id>
    <published>2022-10-29T05:40:28.000Z</published>
    <updated>2022-10-29T06:40:25.164Z</updated>
    
    <content type="html"><![CDATA[<p>如何将自己的代码传到github上</p><h1 id="步骤一：注册账号"><a href="#步骤一：注册账号" class="headerlink" title="步骤一：注册账号"></a>步骤一：注册账号</h1><p><a href="https://github.com/">https://github.com/</a></p><h1 id="步骤二：下载Git"><a href="#步骤二：下载Git" class="headerlink" title="步骤二：下载Git"></a>步骤二：下载Git</h1><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h1 id="步骤三：生成ssh秘钥"><a href="#步骤三：生成ssh秘钥" class="headerlink" title="步骤三：生成ssh秘钥"></a>步骤三：生成ssh秘钥</h1><p>git config –global user.name “XXX”<br>git config –global user.email “XXX”</p><h2 id="1-生成公钥："><a href="#1-生成公钥：" class="headerlink" title="1.生成公钥："></a>1.生成公钥：</h2><p>git命令：ssh-keygen  -m [密钥格式]  -t [密钥类型]  -C[密钥注解] </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -m PEM -t ed25519 -C <span class="string">&quot;your.email@example.com&quot;</span> <span class="regexp">//</span> 创建新的 SSH 私钥与公钥秘钥对，输入你的邮箱作为标签</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/Users/y</span>ou<span class="regexp">/.ssh/i</span>d_rsa): [Press enter] <span class="regexp">//</span> 推荐使用默认地址</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="regexp">//</span> 此处直接回车即可；若设置密码，则每次使用 SSH 方式推送代码时都会要求输入密码</span><br></pre></td></tr></table></figure><h2 id="2-添加公钥"><a href="#2-添加公钥" class="headerlink" title="2.添加公钥"></a>2.添加公钥</h2><p>windows地址为（C:\Users\you.ssh\id_ed25519.pub）<br>linux地址为（&#x2F;home&#x2F;user&#x2F;.ssh&#x2F;id_ed25519）<br>linux地址为（&#x2F;root&#x2F;.ssh&#x2F;id_ed25519）<br>打开上文中生成的秘钥对的地址（默认地址通常为 ~&#x2F;.ssh&#x2F;）找到后缀为 pub 的公钥文件，使用 cat 命令输出所有内容并复制。</p><h2 id="3-尝试使用ssh连接github"><a href="#3-尝试使用ssh连接github" class="headerlink" title="3.尝试使用ssh连接github"></a>3.尝试使用ssh连接github</h2><p>ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a></p><h2 id="4-在github中添加秘钥"><a href="#4-在github中添加秘钥" class="headerlink" title="4.在github中添加秘钥"></a>4.在github中添加秘钥</h2><p>1.右上角点击自己的头像<br>2.setting<br>3.SSH and GPG keys<br>4.New SSH keys  </p><h1 id="步骤四：github上创建仓库"><a href="#步骤四：github上创建仓库" class="headerlink" title="步骤四：github上创建仓库"></a>步骤四：github上创建仓库</h1><h1 id="步骤五：将仓库下载到本地"><a href="#步骤五：将仓库下载到本地" class="headerlink" title="步骤五：将仓库下载到本地"></a>步骤五：将仓库下载到本地</h1><p>git clone [ssh地址]</p><h1 id="步骤六：上传代码"><a href="#步骤六：上传代码" class="headerlink" title="步骤六：上传代码"></a>步骤六：上传代码</h1><p>git add acm.cpp<br>git add .</p><p>git commit -m “init”</p><p>git push</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[如何把自己的代码上传到github上]<a href="https://blog.csdn.net/qq_43111389/article/details/125644132">https://blog.csdn.net/qq_43111389/article/details/125644132</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何将自己的代码传到github上&lt;/p&gt;
&lt;h1 id=&quot;步骤一：注册账号&quot;&gt;&lt;a href=&quot;#步骤一：注册账号&quot; class=&quot;headerlink&quot; title=&quot;步骤一：注册账号&quot;&gt;&lt;/a&gt;步骤一：注册账号&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gith</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql 教程</title>
    <link href="http://example.com/2022/10/27/Tutorial/mysql-tutorial/"/>
    <id>http://example.com/2022/10/27/Tutorial/mysql-tutorial/</id>
    <published>2022-10-27T11:12:48.000Z</published>
    <updated>2022-10-27T13:22:38.495Z</updated>
    
    <content type="html"><![CDATA[<p>show global variables like ‘port’;</p><p>service mysql restart</p><p>cat &#x2F;etc&#x2F;mysql&#x2F;debian.cnf</p><p>mysql -udebian-sys-maint -pCljM3ZnVZ3n3sycv</p><p>mysql -uroot -p123456</p><p>select User,Host from user;</p><p>select user, plugin from mysql.user;</p><p>select host,user from mysql.user;</p><p>SELECT host,user,authentication_string FROM mysql.user;</p><p>update mysql.user set authentication_string&#x3D;’’ where user&#x3D;’root’;<br>UPDATE mysql.user SET authentication_string&#x3D;md5(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;sha1(‘123456’) WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>UPDATE mysql.user SET authentication_string&#x3D;’123’ WHERE User&#x3D;’root’  AND Host &#x3D;’localhost’;<br>update mysql.user set authentication_string&#x3D;password(‘root’) where User&#x3D;’root’;</p><p>update user set host&#x3D;’%’ where user&#x3D;’debian-sys-maint’;</p><p>alter user‘root‘@’localhost’ identified by ‘123’;</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘12345’;</p><p>ALTER USER ‘mysql.sys‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><p>flush privileges;</p><p>mysqld –console –skip-grant-tables –shared-memory；</p><p> vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</p><p>dpkg –configure -a</p><p>dpkg –list|grep mysql</p><p><a href="https://cloud.tencent.com/developer/article/1165127">https://cloud.tencent.com/developer/article/1165127</a></p><p>[Ubuntu20.04 安装和卸载MySQL8]<a href="https://www.cnblogs.com/zhangxuel1ang/p/13456116.html">https://www.cnblogs.com/zhangxuel1ang/p/13456116.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;show global variables like ‘port’;&lt;/p&gt;
&lt;p&gt;service mysql restart&lt;/p&gt;
&lt;p&gt;cat &amp;#x2F;etc&amp;#x2F;mysql&amp;#x2F;debian.cnf&lt;/p&gt;
&lt;p&gt;mysql -udebian-sys</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://example.com/2022/10/20/Course/Base/Computer_Network/"/>
    <id>http://example.com/2022/10/20/Course/Base/Computer_Network/</id>
    <published>2022-10-20T12:14:20.000Z</published>
    <updated>2022-10-21T08:33:41.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2网络边缘"><a href="#1-2网络边缘" class="headerlink" title="1.2网络边缘"></a>1.2网络边缘</h2><h3 id="1-2-1服务模式"><a href="#1-2-1服务模式" class="headerlink" title="1.2.1服务模式"></a>1.2.1服务模式</h3><p>C&#x2F;S模式<br>可扩展性较差<br>P2P模式<br>迅雷、电驴</p><h3 id="1-2-2服务模式"><a href="#1-2-2服务模式" class="headerlink" title="1.2.2服务模式"></a>1.2.2服务模式</h3><h4 id="1-2-2-1面向连接的服务"><a href="#1-2-2-1面向连接的服务" class="headerlink" title="1.2.2.1面向连接的服务"></a>1.2.2.1面向连接的服务</h4><p>TCP</p><ul><li>可靠的、按顺序的传送数据</li><li>流量控制</li><li>拥塞控制</li></ul><h4 id="1-2-2-2面向无连接的服务"><a href="#1-2-2-2面向无连接的服务" class="headerlink" title="1.2.2.2面向无连接的服务"></a>1.2.2.2面向无连接的服务</h4><p>UDP </p><ul><li>无连接</li><li>不可靠数据传输</li><li>无流量控制</li><li>无拥塞控制</li></ul><h2 id="1-3网络核心"><a href="#1-3网络核心" class="headerlink" title="1.3网络核心"></a>1.3网络核心</h2><h3 id="1-3-1电路交换"><a href="#1-3-1电路交换" class="headerlink" title="1.3.1电路交换"></a>1.3.1电路交换</h3><h4 id="1-3-1-2概述"><a href="#1-3-1-2概述" class="headerlink" title="1.3.1.2概述"></a>1.3.1.2概述</h4><ul><li>独享资源：不同享</li><li>每个呼叫一旦建立起来就能够<br>保证性能</li><li>如果呼叫没有数据发送，被分配的资源就会被浪费 (no sharing)</li><li>通常被传统电话网络采用</li></ul><h4 id="1-3-1-2分类"><a href="#1-3-1-2分类" class="headerlink" title="1.3.1.2分类"></a>1.3.1.2分类</h4><ul><li>频分(Frequencydivision multiplexing)</li><li>时分(Time-division multiplexing)</li><li>波分(Wave-division multiplexing)</li></ul><h4 id="1-3-1-3缺点"><a href="#1-3-1-3缺点" class="headerlink" title="1.3.1.3缺点"></a>1.3.1.3缺点</h4><ul><li>连接建立时间长</li><li>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多</li><li>即使这个呼叫没有数据传递，其所占据的片也不能够被别的呼叫使用</li><li>可靠性不高？</li></ul><h3 id="1-3-2分组交换"><a href="#1-3-2分组交换" class="headerlink" title="1.3.2分组交换"></a>1.3.2分组交换</h3><h4 id="1-3-2-1概述"><a href="#1-3-2-1概述" class="headerlink" title="1.3.2.1概述"></a>1.3.2.1概述</h4><p>适合于对突发式数据传输<br>资源共享</p><ul><li>简单，不必建立呼叫<br>过度使用会造成网络拥塞：分组延时和丢失</li><li>对可靠地数据传输需要协议来约束：拥塞控制<br>Q: 怎样提供类似电路交换的服务？</li><li>保证音频&#x2F;视频应用需要的带宽</li><li>一个仍未解决的问题(chapter 7)</li></ul><h4 id="1-3-2-2分类"><a href="#1-3-2-2分类" class="headerlink" title="1.3.2.2分类"></a>1.3.2.2分类</h4><p>数据报</p><ul><li>分组的目标地址决定下一跳</li><li>在不同的阶段，路由可以改变</li><li>在通信之前,无须建立起一个连接,有数据就传输</li><li>每一个分组都独立路由(路径不一样,可能会失序)<br>虚电路</li><li>每个分组都带标签（虚电路标识 VC ID），标签决定下一跳</li><li>在呼叫建立时决定路径，在整个呼叫中路径保持不变</li><li>路由器维持每个呼叫的状态信息</li><li>X.25 和ATM</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-2网络边缘&quot;&gt;&lt;a href=&quot;#1-2网络边缘&quot; class=&quot;headerlink&quot; title=&quot;1.2网络边缘&quot;&gt;&lt;/a&gt;1.2网络边缘&lt;/h2&gt;&lt;h3 id=&quot;1-2-1服务模式&quot;&gt;&lt;a href=&quot;#1-2-1服务模式&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>语义分割</title>
    <link href="http://example.com/2022/10/11/Course/ML/Semantic_segmentation/"/>
    <id>http://example.com/2022/10/11/Course/ML/Semantic_segmentation/</id>
    <published>2022-10-11T08:16:20.000Z</published>
    <updated>2023-04-05T08:41:32.623Z</updated>
    
    <content type="html"><![CDATA[<p>语义分割(semantic segmentation)FCN<br>实例分割( Instance segmentation)Mask R-CNN<br>全景分割(Panoramic segmentation) Panoptic FPN</p><h1 id="3-13采集数据的注意点"><a href="#3-13采集数据的注意点" class="headerlink" title="3-13采集数据的注意点"></a>3-13采集数据的注意点</h1><ol><li>不要迎着光拍摄</li><li>最好有云台支持<!-- 3. 采集的图片，虽然分文件夹，但是文件名还是得处理，不然重名了 --></li><li>需要增加人站着的识别<ol><li>人不要太近</li><li></li></ol></li><li>要考虑拍照的时间，白天还是下午，看起来最好是早上，阴天</li><li>需要考虑照相机摆放的位置</li></ol><h1 id="3-22采集数据的注意点"><a href="#3-22采集数据的注意点" class="headerlink" title="3-22采集数据的注意点"></a>3-22采集数据的注意点</h1><ol><li>可以拍摄不同角度的，比如竖着的也拍摄一点</li></ol><p>3.15下次拍照需要注意的：</p><p>脏数据的影响</p><h1 id="标注中出现的问题"><a href="#标注中出现的问题" class="headerlink" title="标注中出现的问题"></a>标注中出现的问题</h1><p>训练的时候，IoU出现了Nan</p><ol><li>学习率过大或过小：学习率过大会导致模型参数更新过快，模型无法收敛或者在训练过程中出现梯度爆炸、梯度消失等问题；学习率过小则可能导致模型收敛缓慢或者无法收敛，从而导致 IoU 变成 NaN。</li><li>数据集中出现空白区域：如果数据集中存在一些空白区域（即标注中的像素值全部为 0），那么计算 IoU 的时候可能会出现分母为 0 的情况，从而导致 IoU 变成 NaN。</li><li>模型架构或训练方式问题：如果模型架构设计不合理或者训练方式不当，可能会导致训练过程中出现梯度爆炸、梯度消失等问题，从而导致 IoU 变成 NaN。</li><li>数据集标注问题：数据集标注问题也可能导致 IoU 变成 NaN。比如，在数据集标注过程中出现了错误的标注，可能导致 IoU 计算错误。</li></ol><p>出现了脏数据</p><h1 id="语义分割评价指标"><a href="#语义分割评价指标" class="headerlink" title="语义分割评价指标"></a>语义分割评价指标</h1><h2 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h2><p>TP（True Positive）：真正例，模型预测为正例，实际是正例（模型预测为类别1，实际是类别1）<br>FP（False Positive）：假正例，模型预测为正例，实际是反例 （模型预测为类别1，实际是类别2）<br>FN（False Negative）：假反例，模型预测为反例，实际是正例 （模型预测为类别2，实际是类别1）<br>TN（True Negative）：真反例，模型预测为反例，实际是反例 （模型预测为类别2，实际是类别2）</p><h2 id="交并比（Intersection-over-Union，IoU）"><a href="#交并比（Intersection-over-Union，IoU）" class="headerlink" title="交并比（Intersection over Union，IoU）"></a>交并比（Intersection over Union，IoU）</h2><p>含义：模型对某一类别预测结果和真实值的交集与并集的比值</p><h2 id="平均交并比（Mean-Intersection-over-Union，MIoU）"><a href="#平均交并比（Mean-Intersection-over-Union，MIoU）" class="headerlink" title="平均交并比（Mean Intersection over Union，MIoU）"></a>平均交并比（Mean Intersection over Union，MIoU）</h2><p>含义：模型对每一类预测的结果和真实值的交集与并集的比值，求和再平均的结果<br>只有一个数值，对于每个类的IoU取平均</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[机器学习开篇之机器学习的分类]<a href="https://blog.csdn.net/Lion_Dreams/article/details/125269215">https://blog.csdn.net/Lion_Dreams/article/details/125269215</a><br>[计算机视觉 - 语义分割 （semantic segmentation）]<a href="https://blog.csdn.net/baidu_41617231/article/details/107739897">https://blog.csdn.net/baidu_41617231/article/details/107739897</a><br>[机器学习：mAP评价指标]<a href="https://blog.csdn.net/qq_40765537/article/details/106394103">https://blog.csdn.net/qq_40765537/article/details/106394103</a><br>[PASCAL VOC2012数据集介绍]<a href="https://blog.csdn.net/qq_37541097/article/details/115787033">https://blog.csdn.net/qq_37541097/article/details/115787033</a><br>[损失函数（loss function）]<a href="https://blog.csdn.net/EmilyHoward/article/details/118367495">https://blog.csdn.net/EmilyHoward/article/details/118367495</a><br>[标注工具的使用]<a href="https://www.bilibili.com/video/BV1ev411P7dR/?spm_id_from=333.999.0.0&amp;vd_source=76dff3ae3b42b00d067c0921bf6859ca">https://www.bilibili.com/video/BV1ev411P7dR/?spm_id_from=333.999.0.0&amp;vd_source=76dff3ae3b42b00d067c0921bf6859ca</a><br>[Labelme工具对应博文]<a href="https://blog.csdn.net/qq_37541097/article/details/120162702">https://blog.csdn.net/qq_37541097/article/details/120162702</a><br>[安装labelme教程]<a href="https://blog.csdn.net/weixin_43427721/article/details/107122775">https://blog.csdn.net/weixin_43427721/article/details/107122775</a><br>[EISeg工具对应博文]<a href="https://blog.csdn.net/qq_37541097/article/details/120154543">https://blog.csdn.net/qq_37541097/article/details/120154543</a><br>[batch size设置技巧]<a href="https://blog.csdn.net/zqx951102/article/details/88918948">https://blog.csdn.net/zqx951102/article/details/88918948</a><br>[Azure Kinect DK 深度相机]<a href="https://blog.csdn.net/denkywu/article/details/103177559">https://blog.csdn.net/denkywu/article/details/103177559</a><br><a href="https://blog.csdn.net/sinat_29047129/article/details/103642140">【语义分割】评价指标：PA、CPA、MPA、IoU、MIoU详细总结和代码实现</a><br><a href="https://groups.csail.mit.edu/vision/datasets/ADE20K/">ADE20K</a></p><h2 id="图像标定"><a href="#图像标定" class="headerlink" title="图像标定"></a>图像标定</h2><p><a href="https://zhuanlan.zhihu.com/p/136827980">张正友标定法-完整学习笔记-从原理到实战</a><br><a href="https://calib.io/pages/camera-calibration-pattern-generator">生成标定纸</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;语义分割(semantic segmentation)FCN&lt;br&gt;实例分割( Instance segmentation)Mask R-CNN&lt;br&gt;全景分割(Panoramic segmentation) Panoptic FPN&lt;/p&gt;
&lt;h1 id=&quot;3-13采集数</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何开始阅读论文</title>
    <link href="http://example.com/2022/09/30/Others/science/"/>
    <id>http://example.com/2022/09/30/Others/science/</id>
    <published>2022-09-30T10:16:43.000Z</published>
    <updated>2022-09-30T10:19:11.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文献阅读量"><a href="#文献阅读量" class="headerlink" title="文献阅读量"></a>文献阅读量</h1><ol><li>刚开始的时候可以先挑选看10篇论文，精度5篇</li><li>20-30篇的时候大概有改进思路</li><li>40篇的时候大概能知道怎么写了</li></ol><h1 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h1><p>老师说要大量的阅读文献并不是完全正确的，应该在自己的方向上大量阅读文献，尽快确定自己想要做的研究的点，在这个点上再多做扩展<br>比如:想要做智能割草机，老师就和我说了路径规划，那么大概的思路是:<br>1）如果是大方向的话，比如机器视觉，可以先找相关的综述，知网搜:机器视觉综述，看2-3篇综述<br>判断大方向的依据就是综述能不能搜出来，比如割草机综述就没有，路径规划综述就有<br>1）路径规划先看个5-6篇，知道有全覆盖的和局部的<br>2）全覆盖的有牛耕法，波形法…..找全覆盖的论文5-6篇，每种方法1-2篇<br>局部的路径规划，点对点的有A<em>，D</em>,DFS,智能算法有蚁群的，遗传算法的就每个找2-3篇<br>那现在应该有大概20篇的论文量了，可以思考一下自己的论文准备怎么写<br>3）想想自己的研究方向是什么，这个方向热点的研究方向是什么。热点的研究指的是最近2-3年内知网的发文频率是否比较高<br>比如我看到了最近很多人智能算法的结合经常发水文，比如蚁群结合遗传，遗传结合粒子群，模拟退火结合dfs，那我现在也想做这个方向了<br>4）大致敲定自己用什么方法，比如我首先先想用蚁群的结合什么不管，那我就起码找10篇及以上蚁群的论文，因为我现在就是要些这个东西，所以我必须要对这个方向做充分充分的了解，所以看再多的论文都不嫌多，感觉10是最最起码的数量了<br>5）看完别人的思路，那就可以开始准备代码，开始做自己的实践了，可以先尝试把别人做的事情复现出来<br>6）寻找创新点，现在不仅仅是要对这个领域有了解，而是要去找怎么去改进自己现在做的这个工作，我的话就是怎么去优化蚁群算法<br>7）一篇水文搞完了</p><h1 id="大量阅读的目的"><a href="#大量阅读的目的" class="headerlink" title="大量阅读的目的"></a>大量阅读的目的</h1><ol><li>大量阅读的目的就是为了知道当前领域内的同行都在干什么，他们做到什么程度了。</li><li>我最开始陷入了大量乱看的误区，机器学习看一点,slam看一点，路径规划看一点，导致每个领域都不深入，杂乱的明明看了20多篇了还是什么思路都没有，不知道对于割草机我可以做什么，我可以怎么改进</li><li>后来想着就做路径规划这个方向，就是对于同一个问题给机器人做路径规划这个我问题，看了很多人不同的解决方法，不同的人有不同的做法，都是做路径规划，大家都在相同的事物上用了不同方法，就慢慢有了思路</li></ol><h1 id="关于英文文献"><a href="#关于英文文献" class="headerlink" title="关于英文文献"></a>关于英文文献</h1><ol><li>英文文献的质量的确比较高，英文水平不够的情况下，阅读英文文献得性价比是很低的。</li><li>应该先看个10篇左右中文，了解这个领域大概有一些什么。对术语方法之类的有了了解，即使英文文章看不懂，看图，看表格，可以快速筛选出是不是自己想要的文章</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文献阅读量&quot;&gt;&lt;a href=&quot;#文献阅读量&quot; class=&quot;headerlink&quot; title=&quot;文献阅读量&quot;&gt;&lt;/a&gt;文献阅读量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;刚开始的时候可以先挑选看10篇论文，精度5篇&lt;/li&gt;
&lt;li&gt;20-30篇的时候大概有改进思路&lt;/li</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark 教程</title>
    <link href="http://example.com/2022/09/28/Tutorial/Wireshark-tutorial/"/>
    <id>http://example.com/2022/09/28/Tutorial/Wireshark-tutorial/</id>
    <published>2022-09-28T12:18:48.000Z</published>
    <updated>2022-10-23T02:40:01.681Z</updated>
    
    <content type="html"><![CDATA[<p>ip.addr &#x3D;&#x3D; 110.242.68.3 and icmp<br>ip.addr &#x3D;&#x3D; 192.168.1.9 and tcp.port &#x3D;&#x3D; 8888<br>ip.addr &#x3D;&#x3D; 192.168.43.12 and tcp.port &#x3D;&#x3D; 8888</p><p>视图-&gt;着色规则<br>绿色背景的是HTTP包<br>灰色背景的是TCP包。<br>黑色背景的是TCP错误包或者校验和错误的包</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>安装的时候检测不到网卡</li><li>什么都捕捉不到<br>用管理员方式启动</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[wireshark抓包不显示结果，还是空白的]<a href="https://blog.csdn.net/WQLWWW/article/details/115488382">https://blog.csdn.net/WQLWWW/article/details/115488382</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ip.addr &amp;#x3D;&amp;#x3D; 110.242.68.3 and icmp&lt;br&gt;ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.9 and tcp.port &amp;#x3D;&amp;#x3D; 8888&lt;br&gt;ip.addr &amp;#x3D;&amp;#x3D; 192</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>k8s命令</title>
    <link href="http://example.com/2022/09/25/Course/k8s-commad/"/>
    <id>http://example.com/2022/09/25/Course/k8s-commad/</id>
    <published>2022-09-25T12:26:56.000Z</published>
    <updated>2022-09-25T13:30:46.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-命令式对象管理-kubectl命令"><a href="#1-命令式对象管理-kubectl命令" class="headerlink" title="1. 命令式对象管理 kubectl命令"></a>1. 命令式对象管理 kubectl命令</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="selector-attr">[command]</span> <span class="selector-attr">[type]</span> <span class="selector-attr">[name]</span> <span class="selector-attr">[flags]</span></span><br></pre></td></tr></table></figure><p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete<br><strong>type</strong>：指定资源类型，比如deployment、pod、service<br><strong>name</strong>：指定资源的名称，名称大小写敏感<br><strong>flags</strong>：指定额外的可选参数</p><h2 id="1-1-操作（command）"><a href="#1-1-操作（command）" class="headerlink" title="1.1 操作（command）"></a>1.1 操作（command）</h2><p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令<br>kubectl –help</p><p>经常使用的操作有下面这些：</p><table><thead><tr><th align="left">命令分类</th><th align="left">命令</th><th align="left">翻译</th><th align="left">命令作用</th></tr></thead><tbody><tr><td align="left">基本命令</td><td align="left">create</td><td align="left">创建</td><td align="left">创建一个资源</td></tr><tr><td align="left"></td><td align="left">edit</td><td align="left">编辑</td><td align="left">编辑一个资源</td></tr><tr><td align="left"></td><td align="left">get</td><td align="left">获取</td><td align="left">获取一个资源</td></tr><tr><td align="left"></td><td align="left">patch</td><td align="left">更新</td><td align="left">更新一个资源</td></tr><tr><td align="left"></td><td align="left">delete</td><td align="left">删除</td><td align="left">删除一个资源</td></tr><tr><td align="left"></td><td align="left">explain</td><td align="left">解释</td><td align="left">展示资源文档</td></tr><tr><td align="left">运行和调试</td><td align="left">run</td><td align="left">运行</td><td align="left">在集群中运行一个指定的镜像</td></tr><tr><td align="left"></td><td align="left">expose</td><td align="left">暴露</td><td align="left">暴露资源为Service</td></tr><tr><td align="left"></td><td align="left">describe</td><td align="left">描述</td><td align="left">显示资源内部信息</td></tr><tr><td align="left"></td><td align="left">logs</td><td align="left">日志输出容器在 pod 中的日志</td><td align="left">输出容器在 pod 中的日志</td></tr><tr><td align="left"></td><td align="left">attach</td><td align="left">缠绕进入运行中的容器</td><td align="left">进入运行中的容器</td></tr><tr><td align="left"></td><td align="left">exec</td><td align="left">执行容器中的一个命令</td><td align="left">执行容器中的一个命令</td></tr><tr><td align="left"></td><td align="left">cp</td><td align="left">复制</td><td align="left">在Pod内外复制文件</td></tr><tr><td align="left"></td><td align="left">rollout</td><td align="left">首次展示</td><td align="left">管理资源的发布</td></tr><tr><td align="left"></td><td align="left">scale</td><td align="left">规模</td><td align="left">扩(缩)容Pod的数量</td></tr><tr><td align="left"></td><td align="left">autoscale</td><td align="left">自动调整</td><td align="left">自动调整Pod的数量</td></tr><tr><td align="left">高级命令</td><td align="left">apply</td><td align="left">rc</td><td align="left">通过文件对资源进行配置</td></tr><tr><td align="left"></td><td align="left">label</td><td align="left">标签</td><td align="left">更新资源上的标签</td></tr><tr><td align="left">其他命令</td><td align="left">cluster-info</td><td align="left">集群信息</td><td align="left">显示集群信息</td></tr><tr><td align="left"></td><td align="left">version</td><td align="left">版本</td><td align="left">显示当前Server和Client的版本</td></tr></tbody></table><h2 id="1-2-资源类型（type）"><a href="#1-2-资源类型（type）" class="headerlink" title="1.2 资源类型（type）"></a>1.2 资源类型（type）</h2><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl api-resources</span></span><br></pre></td></tr></table></figure><p>经常使用的资源有下面这些：</p><table><thead><tr><th align="left">资源分类</th><th align="left">资源名称</th><th align="left">缩写</th><th align="left">资源作用</th></tr></thead><tbody><tr><td align="left">集群级别资源</td><td align="left">nodes</td><td align="left">no</td><td align="left">集群组成部分</td></tr><tr><td align="left"></td><td align="left">namespaces</td><td align="left">ns</td><td align="left">隔离Pod</td></tr><tr><td align="left">pod资源</td><td align="left">pods</td><td align="left">po</td><td align="left">装载容器</td></tr><tr><td align="left">pod资源控制器</td><td align="left">replicationcontrollers</td><td align="left">rc</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">replicasets</td><td align="left">rs</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">deployments</td><td align="left">deploy</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">daemonsets</td><td align="left">ds</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">jobs</td><td align="left"></td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">cronjobs</td><td align="left">cj</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">horizontalpodautoscalers</td><td align="left">hpa</td><td align="left">控制pod资源</td></tr><tr><td align="left"></td><td align="left">statefulsets</td><td align="left">sts</td><td align="left">控制pod资源</td></tr><tr><td align="left">服务发现资源</td><td align="left">services</td><td align="left">svc</td><td align="left">统一pod对外接口</td></tr><tr><td align="left"></td><td align="left">ingress</td><td align="left">ing</td><td align="left">统一pod对外接口</td></tr><tr><td align="left">存储资源</td><td align="left">volumeattachments</td><td align="left"></td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumes</td><td align="left">pv</td><td align="left">存储</td></tr><tr><td align="left"></td><td align="left">persistentvolumeclaims</td><td align="left">pvc</td><td align="left">存储</td></tr><tr><td align="left">配置资源</td><td align="left">configmaps</td><td align="left">cm</td><td align="left">配置</td></tr><tr><td align="left"></td><td align="left">secrets</td><td align="left"></td><td align="left">配置</td></tr></tbody></table><h2 id="1-3-应用示例"><a href="#1-3-应用示例" class="headerlink" title="1.3 应用示例"></a>1.3 应用示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace dev  # 创建一个namespace</span><br><span class="line">kubectl get ns # 获取namespace</span><br><span class="line">kubectl run pod --image=nginx:latest -n dev # 在此namespace下创建并运行一个nginx的Pod</span><br><span class="line">kubectl get pod -n dev # 查看新创建的pod</span><br><span class="line">kubectl delete pod pod-864f9875b9-pcw7x # 删除指定的pod</span><br><span class="line">kubectl delete ns dev # 删除指定的namespace</span><br></pre></td></tr></table></figure><h1 id="2-常见资源"><a href="#2-常见资源" class="headerlink" title="2 常见资源"></a>2 常见资源</h1><h1 id="2-1-namspace"><a href="#2-1-namspace" class="headerlink" title="2.1 namspace"></a>2.1 namspace</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的命名空间</span></span><br><span class="line">kubectl get namespace</span><br><span class="line">kubectl get nc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定的命名空间</span></span><br><span class="line">kubectl get namespace default</span><br><span class="line">kubectl get ns default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定命名空间的输出格式</span></span><br><span class="line">kubectl get ns default -o wide</span><br><span class="line">kubectl get ns default -o json</span><br><span class="line">kubectl get ns default -o yaml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看命名空间的详情</span></span><br><span class="line">kubectl describe namespace default</span><br><span class="line">kubectl describe ns default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建命名空间</span></span><br><span class="line">kubectl create namespace dev</span><br><span class="line">kubectl create ns dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">除命名空间</span></span><br><span class="line">kubectl delete ns dev</span><br></pre></td></tr></table></figure><h1 id="3-Pod详解"><a href="#3-Pod详解" class="headerlink" title="3 Pod详解"></a>3 Pod详解</h1><h2 id="3-1-Pod的配置"><a href="#3-1-Pod的配置" class="headerlink" title="3.1 Pod的配置"></a>3.1 Pod的配置</h2><h2 id="3-2-Pod的生命周期"><a href="#3-2-Pod的生命周期" class="headerlink" title="3.2 Pod的生命周期"></a>3.2 Pod的生命周期</h2><h2 id="3-3-Pod的调度"><a href="#3-3-Pod的调度" class="headerlink" title="3.3 Pod的调度"></a>3.3 Pod的调度</h2><h1 id="4-Pod控制器详解"><a href="#4-Pod控制器详解" class="headerlink" title="4 Pod控制器详解"></a>4 Pod控制器详解</h1><ul><li>在kubernetes中，按照Pod的创建方式可以将其分为两类：<ul><li>自主式Pod：kubernetes直接创建出来的Pod，这种Pod删除后就没有了，也不会重建。</li><li>控制器创建Pod：通过Pod控制器创建的Pod，这种Pod删除之后还会自动重建。</li></ul></li><li>Pod控制器：Pod控制器是管理Pod的中间层，使用了Pod控制器之后，我们只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它就会创建出满足条件的Pod并确保每一个Pod处于用户期望的状态，如果Pod在运行中出现故障，控制器会基于指定的策略重启或重建Pod。</li><li>在kubernetes中，有很多类型的Pod控制器，每种都有自己的适合的场景，常见的有下面这些：<ul><li>ReplicationController：比较原始的Pod控制器，已经被废弃，由ReplicaSet替代。</li><li>ReplicaSet：保证指定数量的Pod运行，并支持Pod数量变更，镜像版本变更。</li><li>Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、版本回退。</li><li>Horizontal Pod Autoscaler：可以根据集群负载自动调整Pod的数量，实现削峰填谷。</li><li>DaemonSet：在集群中的指定Node上都运行一个副本，一般用于守护进程类的任务。</li><li>Job：它创建出来的Pod只要完成任务就立即退出，用于执行一次性任务。</li><li>CronJob：它创建的Pod会周期性的执行，用于执行周期性的任务。</li><li>StatefulSet：管理有状态的应用。</li></ul></li></ul><h2 id="4-1-Pod控制器的介绍"><a href="#4-1-Pod控制器的介绍" class="headerlink" title="4.1 Pod控制器的介绍"></a>4.1 Pod控制器的介绍</h2><h2 id="4-2-ReplicaSet（RS）"><a href="#4-2-ReplicaSet（RS）" class="headerlink" title="4.2 ReplicaSet（RS）"></a>4.2 ReplicaSet（RS）</h2><h2 id="4-3-Deployment（Deploy）"><a href="#4-3-Deployment（Deploy）" class="headerlink" title="4.3 Deployment（Deploy）"></a>4.3 Deployment（Deploy）</h2><h2 id="4-4-Horizontal-Pod-Autoscaler（HPA）"><a href="#4-4-Horizontal-Pod-Autoscaler（HPA）" class="headerlink" title="4.4 Horizontal Pod Autoscaler（HPA）"></a>4.4 Horizontal Pod Autoscaler（HPA）</h2><h2 id="4-5-DaemonSet（DS）"><a href="#4-5-DaemonSet（DS）" class="headerlink" title="4.5 DaemonSet（DS）"></a>4.5 DaemonSet（DS）</h2><h2 id="4-6-Job"><a href="#4-6-Job" class="headerlink" title="4.6 Job"></a>4.6 Job</h2><h2 id="4-7-CronJob（CJ）"><a href="#4-7-CronJob（CJ）" class="headerlink" title="4.7 CronJob（CJ）"></a>4.7 CronJob（CJ）</h2><h2 id="4-8-StatefulSet（有状态）"><a href="#4-8-StatefulSet（有状态）" class="headerlink" title="4.8 StatefulSet（有状态）"></a>4.8 StatefulSet（有状态）</h2><h1 id="5-Service详解"><a href="#5-Service详解" class="headerlink" title="5 Service详解"></a>5 Service详解</h1><p>在kubernetes中，Pod是应用程序的载体，我们可以通过Pod的IP来访问应用程序，但是Pod的IP地址不是固定的，这就意味着不方便直接采用Pod的IP对服务进行访问。</p><p>spec.type的说明：</p><ul><li>ClusterIP：默认值，它是kubernetes系统自动分配的虚拟IP，只能在集群内部访问。</li><li>NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务。</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境的支持。</li><li>ExternalName：把集群外部的服务引入集群内部，直接使用。</li></ul><h2 id="5-1-ClusterIP类型的Service"><a href="#5-1-ClusterIP类型的Service" class="headerlink" title="5.1 ClusterIP类型的Service"></a>5.1 ClusterIP类型的Service</h2><h2 id="5-2-HeadLiness类型的Service"><a href="#5-2-HeadLiness类型的Service" class="headerlink" title="5.2 HeadLiness类型的Service"></a>5.2 HeadLiness类型的Service</h2><h2 id="5-3-NodePort类型的Service"><a href="#5-3-NodePort类型的Service" class="headerlink" title="5.3 NodePort类型的Service"></a>5.3 NodePort类型的Service</h2><h2 id="5-4-LoadBalancer类型的Service"><a href="#5-4-LoadBalancer类型的Service" class="headerlink" title="5.4 LoadBalancer类型的Service"></a>5.4 LoadBalancer类型的Service</h2><h2 id="5-5-ExternalName类型的Service"><a href="#5-5-ExternalName类型的Service" class="headerlink" title="5.5 ExternalName类型的Service"></a>5.5 ExternalName类型的Service</h2><h2 id="5-1-Ingress介绍"><a href="#5-1-Ingress介绍" class="headerlink" title="5.1 Ingress介绍"></a>5.1 Ingress介绍</h2><h1 id="6-k8s的数据存储"><a href="#6-k8s的数据存储" class="headerlink" title="6 k8s的数据存储"></a>6 k8s的数据存储</h1><ul><li>在前面已经提到，容器的生命周期可能很短，会被频繁的创建和销毁。那么容器在销毁的时候，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器中的数据，kubernetes引入了Volume的概念。</li><li>Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里面的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命周期不和Pod中的单个容器的生命周期有关，当容器终止或者重启的时候，Volume中的数据也不会丢失。</li><li>kubernetes的Volume支持多种类型，比较常见的有下面的几个：<ul><li>简单存储：EmptyDir、HostPath、NFS。</li><li>高级存储：PV、PVC。</li><li>配置存储：ConfigMap、Secret。</li></ul></li></ul><h2 id="6-1-基本存储"><a href="#6-1-基本存储" class="headerlink" title="6.1 基本存储"></a>6.1 基本存储</h2><h3 id="6-1-1-EmptyDir"><a href="#6-1-1-EmptyDir" class="headerlink" title="6.1.1 EmptyDir"></a>6.1.1 EmptyDir</h3><h3 id="6-1-2-HostPath"><a href="#6-1-2-HostPath" class="headerlink" title="6.1.2 HostPath"></a>6.1.2 HostPath</h3><h3 id="6-1-3-NFS"><a href="#6-1-3-NFS" class="headerlink" title="6.1.3 NFS"></a>6.1.3 NFS</h3><h2 id="6-2-高级存储"><a href="#6-2-高级存储" class="headerlink" title="6.2 高级存储"></a>6.2 高级存储</h2><h3 id="6-1-2-PV"><a href="#6-1-2-PV" class="headerlink" title="6.1.2 PV"></a>6.1.2 PV</h3><h3 id="6-1-3-PVC"><a href="#6-1-3-PVC" class="headerlink" title="6.1.3 PVC"></a>6.1.3 PVC</h3><h2 id="6-3-配置存储"><a href="#6-3-配置存储" class="headerlink" title="6.3 配置存储"></a>6.3 配置存储</h2><h3 id="6-1-2-ConfigMap"><a href="#6-1-2-ConfigMap" class="headerlink" title="6.1.2 ConfigMap"></a>6.1.2 ConfigMap</h3><h3 id="6-1-3-Secret"><a href="#6-1-3-Secret" class="headerlink" title="6.1.3 Secret"></a>6.1.3 Secret</h3><h1 id="7-高级部分（暂时不准备做）"><a href="#7-高级部分（暂时不准备做）" class="headerlink" title="7 高级部分（暂时不准备做）"></a>7 高级部分（暂时不准备做）</h1><h2 id="k8s的Helm"><a href="#k8s的Helm" class="headerlink" title="k8s的Helm"></a>k8s的Helm</h2><h2 id="k8s的安全认证"><a href="#k8s的安全认证" class="headerlink" title="k8s的安全认证"></a>k8s的安全认证</h2><h2 id="搭建DashBoard"><a href="#搭建DashBoard" class="headerlink" title="搭建DashBoard"></a>搭建DashBoard</h2><h2 id="kubeadm安装高可用k8s集群"><a href="#kubeadm安装高可用k8s集群" class="headerlink" title="kubeadm安装高可用k8s集群"></a>kubeadm安装高可用k8s集群</h2><h2 id="k8s的项目部署"><a href="#k8s的项目部署" class="headerlink" title="k8s的项目部署"></a>k8s的项目部署</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-命令式对象管理-kubectl命令&quot;&gt;&lt;a href=&quot;#1-命令式对象管理-kubectl命令&quot; class=&quot;headerlink&quot; title=&quot;1. 命令式对象管理 kubectl命令&quot;&gt;&lt;/a&gt;1. 命令式对象管理 kubectl命令&lt;/h1&gt;&lt;fi</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VScode 环境安装</title>
    <link href="http://example.com/2022/09/22/Environment-Configuration/vscode-install-tutorial/"/>
    <id>http://example.com/2022/09/22/Environment-Configuration/vscode-install-tutorial/</id>
    <published>2022-09-22T08:30:31.000Z</published>
    <updated>2023-01-17T16:11:52.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、官网下载vscode"><a href="#一、官网下载vscode" class="headerlink" title="一、官网下载vscode"></a>一、官网下载vscode</h1><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>安装的时候记得把<br>将”通过 code打开”操作添加到 Windows资源管理器文件上下文菜单<br>打钩</p><h1 id="三、常用的扩展"><a href="#三、常用的扩展" class="headerlink" title="三、常用的扩展"></a>三、常用的扩展</h1><table><thead><tr><th>扩展名</th><th>功能</th></tr></thead><tbody><tr><td><strong>通用的</strong></td><td></td></tr><tr><td>Chinese (Simplified) (简体中文)</td><td>中文翻译</td></tr><tr><td>Code Runner</td><td>展开全部代码</td></tr><tr><td>Markdown Preview Enhanced</td><td>Markdown查看</td></tr><tr><td>C++相关</td><td></td></tr><tr><td><strong>C&#x2F;C++</strong></td><td>写C++代码</td></tr><tr><td>C&#x2F;C++ Extension</td><td></td></tr><tr><td>CMake</td><td></td></tr><tr><td>CMake Tools</td><td></td></tr><tr><td>C&#x2F;C++ Extension Pack</td><td></td></tr><tr><td><strong>HTML</strong></td><td></td></tr><tr><td>Auto Rename Tag</td><td>自动修改前后标签名</td></tr><tr><td>open in browser</td><td>在浏览器中打开</td></tr><tr><td>CSS Peek</td><td>追踪CSS样式</td></tr><tr><td>HTML CSS Support</td><td>HTML样式支持</td></tr><tr><td><strong>Vue</strong></td><td></td></tr><tr><td>Live Server</td><td>保存后动态显示</td></tr><tr><td><strong>Git</strong></td><td></td></tr><tr><td>Git History</td><td>查看git历史提交记录</td></tr><tr><td>GitLens</td><td></td></tr><tr><td>Git Graph</td><td></td></tr><tr><td><strong>GoLang</strong></td><td></td></tr><tr><td>go</td><td>语法支持</td></tr><tr><td>vscode-proto3</td><td>查看protobuf格式</td></tr><tr><td><strong>Jinja2</strong></td><td></td></tr><tr><td>Jinja</td><td>jinja语法支持</td></tr><tr><td><strong>Shell</strong></td><td></td></tr><tr><td>shell-format</td><td>格式化工具</td></tr><tr><td>shellman</td><td>代码提示工具</td></tr><tr><td><strong>远程控制</strong></td><td></td></tr><tr><td>Remote - SSH</td><td>远程ssh连接</td></tr><tr><td>Remote - Containers</td><td></td></tr><tr><td>Remote - SSH: Editing Configuration Files</td><td></td></tr></tbody></table><h1 id="五、配置c-x2F-c-环境"><a href="#五、配置c-x2F-c-环境" class="headerlink" title="五、配置c&#x2F;c++环境"></a>五、配置c&#x2F;c++环境</h1><ol><li>安装mingw</li><li>ctl+shift+P<br>C&#x2F;C++: Edit Configurations (UI)<br>编译器路径<br>D:\MinGW\bin\gcc.exe</li></ol><h2 id="c-调试的原理"><a href="#c-调试的原理" class="headerlink" title="c++调试的原理"></a>c++调试的原理</h2><ol><li>先使用tasks.json来创建一个任务</li></ol><ul><li>tasks.json文件可以对程序进行编译，对于C++来说，可以使用gcc,g++,make,cmake,shell脚本</li><li>可以先测试task能否正常运行，这一步的测试就是测试程序是否能编译通过</li></ul><ol start="2"><li>通过launch.json调用想要使用的任务<br>这是启动vscode的调试功能<br>需要做一些配置<br>再启动gdb调试器来进行调试</li><li>添加c_cpp_properties.json增加C++的语言支持</li></ol><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>创建一个.vscode文件夹</p><h3 id="1-tasks-json"><a href="#1-tasks-json" class="headerlink" title="1.tasks.json"></a>1.tasks.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplusplustest&quot;</span><span class="punctuation">,</span>   <span class="comment">//任务的名字，就是刚才在命令面板中选择的时候所看到的，可以自己设置</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// &quot;command&quot;: &quot;g++ ./123.cpp -o 123 -g -std=c++11&quot;, // 可以使用一行命令的方法，不需要下面添加参数</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span>   <span class="comment">// 或者就只写g++,下面添加参数</span></span><br><span class="line">            <span class="comment">// &quot;args&quot;: [//编译时候的参数</span></span><br><span class="line">            <span class="comment">//     &quot;./123.cpp&quot;,    // 想要调试的文件，可以写相对路径也可以写绝对路径</span></span><br><span class="line">            <span class="comment">//     &quot;-o&quot;,           // 指定生成可执行文件的名称</span></span><br><span class="line">            <span class="comment">//     &quot;debug.exe&quot;,    // 如果不加后缀名，自动会添加.exe</span></span><br><span class="line">            <span class="comment">//     &quot;-g&quot;,           // 添加gdb调试选项</span></span><br><span class="line">            <span class="comment">//     &quot;-std=c++11&quot;    // 使用C++11标准</span></span><br><span class="line">            <span class="comment">// ],</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span>   <span class="comment">// 自动查找当前执行的文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>   <span class="comment">// 设置生成的文件名，可以为中文</span></span><br><span class="line">                <span class="string">&quot;-std=c++11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="comment">// &quot;-fexec-charset=GBK&quot; //解决中文乱码问题,还没有遇到过</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">// &quot;owner&quot;: &quot;cpp&quot;,</span></span><br><span class="line">                <span class="comment">// &quot;fileLocation&quot;: [</span></span><br><span class="line">                <span class="comment">//     &quot;relative&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">                <span class="comment">// ],</span></span><br><span class="line">                <span class="comment">// &quot;pattern&quot;: &#123;</span></span><br><span class="line">                <span class="comment">//     &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span></span><br><span class="line">                <span class="comment">//     &quot;file&quot;: 1,</span></span><br><span class="line">                <span class="comment">//     &quot;line&quot;: 2,</span></span><br><span class="line">                <span class="comment">//     &quot;column&quot;: 3,</span></span><br><span class="line">                <span class="comment">//     &quot;severity&quot;: 4,</span></span><br><span class="line">                <span class="comment">//     &quot;message&quot;: 5</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span>   <span class="comment">// 问题分析器,还不太会用</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span>   <span class="comment">//表示快捷键Ctrl+Shift+B可以运行该任务</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-launch-json"><a href="#2-launch-json" class="headerlink" title="2.launch.json"></a>2.launch.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。</span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cplusplustest&quot;</span><span class="punctuation">,</span> <span class="comment">//调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Debug&quot;</span><span class="punctuation">,</span>       <span class="comment">//配置文件的名字，可以随便起</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span>           <span class="comment">//调试的类型，Vscode现在支持很多，我这里主要是C，所以只能是cppdbg</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>        <span class="comment">//配置文件的请求类型，有launch和attach两种，具体看官方文档</span></span><br><span class="line">            <span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span> <span class="comment">//硬件内核架构，为64bit，如图设置</span></span><br><span class="line">            <span class="comment">// &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/123.exe&quot;,   //可执行文件的路径和文件名称</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>   <span class="comment">//可执行文件的路径和文件名称</span></span><br><span class="line">            <span class="comment">// 整个路径名中，必须全部是是英文名称才可以进行调试</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>                 <span class="comment">//主函数调用时传入的参数</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>       <span class="comment">//设为true时程序将暂停在程序入口处</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/1-Algorithm_test&quot;</span><span class="punctuation">,</span>    <span class="comment">//调试时的工作目录</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>          <span class="comment">//不知道干嘛的</span></span><br><span class="line">            <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openOnSessionStart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span>   <span class="comment">//调试时是否显示控制台窗口</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span>            <span class="comment">//指定连接的调试器，可以省略不写</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/Qt/Qt5.9.9/Tools/mingw530_32/bin/gdb.exe&quot;</span><span class="punctuation">,</span>    <span class="comment">// 在windows调试的时候，需要加上gdb的路径</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-c-cpp-properties-json"><a href="#3-c-cpp-properties-json" class="headerlink" title="3.c_cpp_properties.json"></a>3.c_cpp_properties.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference</span></span><br><span class="line"><span class="comment">//.vscode文件夹局部的配置c_cpp_properties.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>            <span class="comment">// 这个是使用头文件时候vscode查找的路径，如果路径没有包含进来，头文件会有红色波浪线</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span> <span class="comment">// 当前工作目录下包含的所有文件</span></span><br><span class="line">                <span class="string">&quot;/vcpkg/x64-linux/installed/x64-linux/include/**&quot;</span><span class="punctuation">,</span>  <span class="comment">// 路径错误或者不存在看起来可以运行</span></span><br><span class="line">                <span class="string">&quot;D:\\MinGW\\lib\\gcc\\mingw32\\9.2.0\\**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="comment">// 这里定义的头文件在程序中使用的时候，#ifndef的内容不会灰色</span></span><br><span class="line">                <span class="string">&quot;F_OS_LINUX&quot;</span><span class="punctuation">,</span>         </span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;LOCAL&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span>       <span class="comment">// 指定c语言使用的语法版本</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span>   <span class="comment">// 指定c++使用的语法版本</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-gcc-x64&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用智能感知模式(IntelliSense)，映射到特定的体系</span></span><br><span class="line">            <span class="comment">// &quot;intelliSenseMode&quot;: &quot;windows-gcc-x86&quot;,   // windows中使用的配置</span></span><br><span class="line">            <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 浏览选项，主要用在转跳#include文件的时候，可以做一些模糊搜索</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">// 需要查找的路径</span></span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;D:\\MinGW\\lib\\gcc\\mingw32\\9.2.0\\**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>  <span class="comment">// 如果为true,只解析$&#123;workspaceFolder&#125;中的文件，false还会解析browse中的文件，存疑</span></span><br><span class="line">                <span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="关于调试的一些疑问"><a href="#关于调试的一些疑问" class="headerlink" title="关于调试的一些疑问"></a>关于调试的一些疑问</h3><ol><li>使用了C++11的语法，但是C++11的语句，比如auto还是会报错<br>c_cpp_properties.json中添加<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li><li>使用了外部的库，比如opencv,QThread等库的时候，编译可以通过但是无法转跳<br>没有在include中增加包含库的路径</li></ol><h1 id="四、卸载"><a href="#四、卸载" class="headerlink" title="四、卸载"></a>四、卸载</h1><p>C:\Users$用户名.vscode<br>C:\Users$用户名\AppData\Roaming\Code【注】这里的“$用户名”根据自己的用户名而定。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/LIJIH/p/12533926.html#:~:text=%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85mingw%E8%BD%AF%E4%BB%B6%201.%20%E8%BF%9B%E5%85%A5%E5%AE%98%E7%BD%91%20www.mingw.org%202.%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BDdownloads%203.%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E5%9B%BE%E6%A0%87%204.%E7%82%B9%E5%87%BBinstall%20z,Changes%204.%E7%82%B9%E5%87%BBapply%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%205.%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%9C%A8%E7%82%B9%E5%87%BBclose%E5%85%B3%E9%97%AD%E8%BD%AF%E4%BB%B6%EF%BC%8C%E5%88%B0%E8%BF%99%E9%87%8Cmingw%E5%B0%B1%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E4%BA%86%E3%80%82%20%E4%B8%8B%E9%9D%A2%E5%B0%B1%E6%98%AF%E9%85%8D%E7%BD%AE%20%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%201%E9%80%89%E6%8B%A9%E6%88%91%E7%9A%84%E7%94%B5%E8%84%91%EF%BC%8C%E5%8F%B3%E9%94%AE%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%202.%E9%80%89%E6%8B%A9%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%203.%E9%80%89%E6%8B%A9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">mingw安装教程</a><br><a href="https://geek-docs.com/vscode/vscode-tutorials/vscode-task-configuration-parameters-and-task-results-analysis.html#:~:text=%E4%BB%BB%E5%8A%A1%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E7%94%B1%20tasks.json%20%E9%87%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B1%9E%E6%80%A7%20problemMatcher,%E6%9D%A5%E6%8E%A7%E5%88%B6%E7%9A%84%E3%80%82%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%20VS%20Code%20%E5%86%85%E7%BD%AE%E7%9A%84%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6%E6%8F%90%E4%BE%9B%E7%9A%84%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%99%A8%EF%BC%8C%E7%94%9A%E8%87%B3%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E4%B9%A6%E5%86%99%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%99%A8%E6%9D%A5%E5%88%86%E6%9E%90%E4%BB%BB%E5%8A%A1%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF%E6%88%96%E8%80%85%E8%AD%A6%E5%91%8A%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%9C%A8%E9%97%AE%E9%A2%98%E9%9D%A2%E6%9D%BF%E4%B8%AD%E3%80%82">VSCode 任务配置参数及任务结果分析-problemMatcher</a><br>[VSCode配置C&#x2F;C++环境]<a href="https://zhuanlan.zhihu.com/p/87864677">https://zhuanlan.zhihu.com/p/87864677</a><br>[VScode配置c&#x2F;c++环境（无数试错版本）]<a href="https://blog.csdn.net/Pretty_Anno/article/details/126978142">https://blog.csdn.net/Pretty_Anno/article/details/126978142</a><br>[windwos11没有Hyper-V的解决方法]<a href="https://www.jianshu.com/p/96aa6eeacb56">https://www.jianshu.com/p/96aa6eeacb56</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、官网下载vscode&quot;&gt;&lt;a href=&quot;#一、官网下载vscode&quot; class=&quot;headerlink&quot; title=&quot;一、官网下载vscode&quot;&gt;&lt;/a&gt;一、官网下载vscode&lt;/h1&gt;&lt;h1 id=&quot;二、安装&quot;&gt;&lt;a href=&quot;#二、安装&quot; cla</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题目分类</title>
    <link href="http://example.com/2022/09/19/Interview-Q&amp;A/leetcode-programe/"/>
    <id>http://example.com/2022/09/19/Interview-Q&amp;A/leetcode-programe/</id>
    <published>2022-09-19T02:20:27.000Z</published>
    <updated>2023-04-04T14:29:14.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典树-Trie树、前缀树"><a href="#字典树-Trie树、前缀树" class="headerlink" title="字典树(Trie树、前缀树)"></a>字典树(Trie树、前缀树)</h2><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><ol start="208"><li><p>实现 Trie (前缀树)</p></li><li><p>单词替换</p></li><li><p>添加与搜索单词 - 数据结构设计</p></li><li><p>键值映射</p></li><li><p>实现一个魔法字典</p></li><li><p>前缀和后缀搜索</p></li><li><p>字符串的前缀分数和</p></li></ol><p>进阶：01字典树</p><h2 id="环检测-amp-拓扑排序"><a href="#环检测-amp-拓扑排序" class="headerlink" title="环检测 &amp; 拓扑排序"></a>环检测 &amp; 拓扑排序</h2><ol start="207"><li>课程表</li><li>课程表 II<br>剑指 Offer II 115. 重建序列</li></ol><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><ol start="698"><li>划分为k个相等的子集</li><li>火柴拼正方形</li><li>公平分发饼干</li></ol><p>思路：<br>1.回溯前的准备<br>2.要回溯什么<br>回溯函数内<br>3.终止条件<br>4.进入和退出怎么搞</p><h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>使用递归树的方法来判断问题</p><p>回溯-》记忆化搜索-》动态规划</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>思路：</p><ol><li>确定dp数组以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序<br><del>5. 举例推导dp数组</del></li></ol><p>写代码顺序：</p><ol start="0"><li><p>边界条件（最后考虑）</p></li><li><p>初始化</p></li><li><p>遍历</p></li><li><p>递推公式</p></li><li><p>返回</p></li><li><p>记忆化搜索</p><ol><li>Leetcode 140 单词拆分 II<!-- 2. Leetcode 329 矩阵中的最长递增路径 --></li><li>Leetcode 472 连接词</li><li>10题正则表达式匹配</li><li>第37题解数独<!-- 6. 397. 整数替换 --></li></ol></li><li><p>区间dp</p><ol><li>当问题可以分解为若干个子区间，并且子区间之间有一定的联系或者约束时，可以考虑用区间dp来求解</li><li>合并、匹配、划分</li><li>石子合并、括号匹配、回文串、邮局建设</li><li><ol start="1000"><li>合并石头的最低成本</li></ol></li><li>而状态转移方程一般是枚举区间内的一个分割点<ol><li>如dp [i] [j] &#x3D; min {dp [i] [k]+dp [k+1] [j]+cost}</li></ol></li></ol></li></ol><p>能解决的问题：</p><h2 id="1-求最大值-x2F-最小值"><a href="#1-求最大值-x2F-最小值" class="headerlink" title="1.求最大值&#x2F;最小值"></a>1.求最大值&#x2F;最小值</h2><ol start="1014"><li>最佳观光组合</li><li>买卖股票的最佳时机</li><li>买卖股票的最佳时机 II<br>剑指 Offer 47. 礼物的最大价值<br>剑指 Offer 42. 连续子数组的最大和</li><li>下降路径最小和</li><li>三角形最小路径和</li></ol><h2 id="2-求是否可以完成组合"><a href="#2-求是否可以完成组合" class="headerlink" title="2.求是否可以完成组合"></a>2.求是否可以完成组合</h2><ol start="139"><li>单词拆分</li></ol><h2 id="3-求子数组-个数-x2F-最大值-x2F-长度"><a href="#3-求子数组-个数-x2F-最大值-x2F-长度" class="headerlink" title="3.求子数组 个数&#x2F;最大值&#x2F;长度"></a>3.求子数组 个数&#x2F;最大值&#x2F;长度</h2><ol start="413"><li>等差数列划分</li></ol><h2 id="4-组合总数"><a href="#4-组合总数" class="headerlink" title="4.组合总数"></a>4.组合总数</h2><p>剑指 Offer 10- II. 青蛙跳台阶问题<br>剑指 Offer 46. 把数字翻译成字符串</p><h2 id="5-最少操作数"><a href="#5-最少操作数" class="headerlink" title="5.最少操作数"></a>5.最少操作数</h2><ol start="72"><li>编辑距离</li></ol><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><ol start="55"><li>跳跃游戏</li><li>跳跃游戏 II</li></ol><h2 id="测试用例的设计"><a href="#测试用例的设计" class="headerlink" title="测试用例的设计"></a>测试用例的设计</h2><h3 id="边界条件的测试"><a href="#边界条件的测试" class="headerlink" title="边界条件的测试"></a>边界条件的测试</h3><p>0<br>最大值</p><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p><a href="https://imgtu.com/i/LBSN8S"><img src="https://s1.ax1x.com/2022/04/19/LBSN8S.png" alt="不同算法的时间复杂度"></a></p><p>前缀和</p><p>一维前缀和</p><p>二维前缀和</p><p>第一题就是基本的读入字符串排序，忘记细节了。</p><p>第二题是读入一01串，对应的下标为士兵的能力，0代表攻击士兵，1代表防守士兵，找到一个分割点，使得左侧攻击士兵和右侧防御士兵差的绝对值最小。这题直接用一个求和数组记录遍历就能过。</p><p>第三题是给定一个数组，删掉下标不为质数的值，然后合并起来循环操作，求最后一个数。这题是能找到规律，在某个区间的答案会是一个定值。直接暴力解了。</p><p>第四题是给多个环形链表的部分（可以重叠），把他们串起来然后切开形成最小字典序。这题主要是记录一下链表顺序，正逆比较一下就可以</p><p>第五题买股票进阶版，给定本金，每天都可以买入卖出1笔，而且可以手里留存多笔股票，求最大利润。这题不太会做，暴力DFS做的只过了50，蹲个大佬</p><p>做了4个半，最近一个月才开始补算法，难点的题就做不出来了，以及我是用python写的，可能时间复杂度要求和C++比会有些差别</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[详解前缀树「TrieTree 汇总级别整理 🔥🔥🔥」]<a href="https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution/by-lfool-w82u/">https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution/by-lfool-w82u/</a><br><a href="https://blog.csdn.net/m0_46201544/article/details/122371482">前缀和 </a><br><a href="https://blog.csdn.net/weixin_50248461/article/details/117045421">前缀异或</a><br><a href="https://www.luogu.com.cn/blog/ezoixx130/codeforces-tutorial">Codeforces游玩攻略</a><br><a href="https://www.luogu.com.cn/blog/ezoixx130/codeforces-advanced-tutorial">Codeforces快速精通</a><br><a href="https://blog.csdn.net/u013615904/article/details/43373601">ACM-高精度模板(综合篇)</a><br><a href="https://www.jianshu.com/p/d686ad9de817">C++ lambda表达式与函数对象</a><br><a href="https://codeforces.com/blog/entry/66715">https://codeforces.com/blog/entry/66715</a><br><a href="https://codeforces.com/blog/entry/66909">https://codeforces.com/blog/entry/66909</a></p><h1 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h1><p><a href="https://leetcode.cn/circle/article/BO520a/">(区间dp) 力扣区间dp 题集记录</a><br><a href="https://zhuanlan.zhihu.com/p/126546914">[力扣] DP问题分类汇总</a><br><a href="https://blog.csdn.net/qq_43472263/article/details/98337401">区间dp入门——总结+习题+解析</a><br><a href="https://oi-wiki.org/dp/interval/">OI Wiki</a></p><h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><p><a href="https://blog.csdn.net/qq_43472263/article/details/98337401">LeetCode刷题总结 — 记忆化搜索框架</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字典树-Trie树、前缀树&quot;&gt;&lt;a href=&quot;#字典树-Trie树、前缀树&quot; class=&quot;headerlink&quot; title=&quot;字典树(Trie树、前缀树)&quot;&gt;&lt;/a&gt;字典树(Trie树、前缀树)&lt;/h2&gt;&lt;h3 id=&quot;模板题&quot;&gt;&lt;a href=&quot;#模板题&quot;</summary>
      
    
    
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
