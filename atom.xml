<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gtoo8888</title>
  
  <subtitle>会扇扇子的猪</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-18T09:33:42.711Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kuku De</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>猜想一下风暴之门的服务器设计以及RollBack机制</title>
    <link href="http://example.com/2023/12/18/Others/Stormgate/"/>
    <id>http://example.com/2023/12/18/Others/Stormgate/</id>
    <published>2023-12-18T09:08:39.000Z</published>
    <updated>2023-12-18T09:33:42.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开端"><a href="#1-开端" class="headerlink" title="1.开端"></a>1.开端</h1><p>看了昨天二老风暴之门的解说，提到了使用了一个回滚机制可以消除消除游戏中的延迟，一直想不明白是怎么回事，自己本身对服务器通讯方面比较感兴趣，于是去找资料去了解了下。<br>后来发现他们为了增加玩家的服务器连接能力，还做了别的工作，下面依次介绍一下。<br>由于本人水平不是很高，有说错的地方，还请好兄弟们指正。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>SnowPlay引擎</li><li>服务器搭建</li><li>RollBack机制</li></ol><h1 id="2-SnowPlay引擎"><a href="#2-SnowPlay引擎" class="headerlink" title="2. SnowPlay引擎"></a>2. SnowPlay引擎</h1><p>主要来自参考资料1，嘉宾提到游戏逻辑的运行速度是远低于画面渲染速度的，在星际争霸2发售时，默认游戏逻辑的处理速度是22.4Hz ，但是有的逻辑处理速度仅仅是8Hz，而且在最开始时候星际争霸2中的战争迷雾的逻辑处理速度只有4Hz。<br>现在风暴之门的所有游戏逻辑的处理渲染频率都是64Hz，包括战争迷雾也是，也就是每一次处理时间从44ms缩短到了16ms。</p><table><thead><tr><th>游戏名称</th><th>星际争霸2</th><th>风暴之门</th></tr></thead><tbody><tr><td>渲染频率</td><td>22.4Hz</td><td>64Hz</td></tr><tr><td>处理时间</td><td>44Ms</td><td>16Ms</td></tr></tbody></table><p>在RTS游戏中，选手的APM从50-350不等，假如选手的APM是350，换算一下1s中操作6次左右，也就是平均每次操作的间隔是166ms，现在风暴之门的游戏逻辑处理比星际2更快了。James Anhalt原话是”By increasing the game loop rate the game needs to handle fewer actions， which reduces the chances to experience network jitter.”(通过提高游戏循环速率，游戏需要处理的操作就会减少，从而降低出现网络抖动的几率)（这一段我不太明白我理解的是，循环速度变快了，在每次循环中，处理选手的操作数更少了。比如星际2每次执行游戏逻辑，需要处理选手2-3次操作，但是风暴之门每次执行游戏逻辑时候，只需要处理选手1次操作就可以了，如果数据丢包了，就丢了一次操作，这边有不对的欢迎大佬指正）</p><p>SnowPlay引擎不会像传统的引擎一样，不停和其他计算机同步，而是根据自己计算机的CPU、GPU和网络条件，以各自最大努力运行，减少延迟，每台机器和用户都应该从各自的设置中榨取更多的性能。</p><p>还有这个引擎别的方面的优化，比如寻路机制，它使用的内存比星际2少，同时支持复杂度是其两倍的地图；还有游戏逻辑完全独立于视觉处理，采用了多核优化还有等等更新，可以自己看参考资料2</p><h1 id="3-服务器搭建"><a href="#3-服务器搭建" class="headerlink" title="3. 服务器搭建"></a>3. 服务器搭建</h1><p>从参考资料4看到，风暴之门在考虑混合匹配方法，使用一个全球玩家池，但在全球排行榜之上有区域阶梯和排行榜，仍保留某种天梯和排行榜的区域 MMR。但是由于睡眠时间的问题，不同大洲的人们依然会按照自然时间分组，比如中国的玩家总是会匹配到中国的玩家，美国人总是匹配到美国人。</p><p>他们提到，他们为他们的服务器搭建使用自动扩容功能，主要是和一个跨国企业Hathora云平台合作，就是服务器这块主要就是靠Hathora这个公司了。Hathora主要也是用了k8s那套东西，可以对应流量的扩缩容，说是比如应对玩家激增的情况，可以快速扩容服务器。</p><p><a href="https://imgse.com/i/piIezND"><img src="https://s11.ax1x.com/2023/12/18/piIezND.png" alt="Fig1.Hathora"></a></p><p>去Hathora的官网看了下，Hathora就是主要给游戏服务器提供扩容服务，可以看到他们在日本和新加坡有节点。前几天老仙他们试玩的时候，用了日本代理，那应该就是用的Hathora的那个节点。国内的情况的话，看起来得代理谈下来再说了，不知道到时候能不能玩的流畅。</p><h1 id="4-RollBack机制"><a href="#4-RollBack机制" class="headerlink" title="4. RollBack机制"></a>4. RollBack机制</h1><p>RollBack机制主要是针对于网络中延迟问题，比如我们玩星际的时候，总是由于一个人的网卡，导致都整体游戏变卡了。<br>它的工作原理是预测玩家会做什么并把它显示出来，如果系统的预测是正确的，那么它就会继续原样，但如果系统不正确，它会很快回滚（因此得名）并显示实际发生的事情。该系统可以非常快速地回滚，这意味着无论它是否正确，玩家都将在整个过程中体验到流畅的游戏体验。</p><p><a href="https://imgse.com/i/piIeXB6"><img src="https://s11.ax1x.com/2023/12/18/piIeXB6.jpg" alt="Fig2.PartinG"></a><br>从参考资料9可以看到，他们在10月份对风暴之门的RollBack机制进行了Alpha测试，各个职业选手表示运行的很好。被黄哥打败的SC2传奇人物PartinG表示十分不错。</p><p><a href="https://imgse.com/i/piIm99H"><img src="https://s11.ax1x.com/2023/12/18/piIm99H.png" alt="Fig3.RollBack"></a><br>由于官方没有具体的技术说明，就说了主要是参考格斗游戏的，所以下面就是我根据现有的资料对RollBack机制猜测是怎么运行的</p><h2 id="4-1-格斗游戏中的GGPO回滚网络"><a href="#4-1-格斗游戏中的GGPO回滚网络" class="headerlink" title="4.1 格斗游戏中的GGPO回滚网络"></a>4.1 格斗游戏中的GGPO回滚网络</h2><p>由于格斗游戏对实时性的要求特别高，所以很需要一个更加高效的同步技术，而不是玩家1来等待玩家2的网络，变得一卡一卡的。所以在2009年，格斗游戏中的回滚网络GGPO就被研发了出来，现在先说明一下GGPO网络运行的原理。<br>回滚网络机制主要是针对于网络中延迟问题，对于本地玩家的输入是100%正确的。<br>接下来的内容主要来自这篇文章Fight the Lag!  The Trick Behind GGPO’s Low Latency Netcode，图片也都来自那里。<br><a href="https://imgse.com/i/piIexAO"><img src="https://s11.ax1x.com/2023/12/18/piIexAO.png" alt="Fig4.GGPO1"></a><br>图1表示传统的网络传输情况。可以看到，在正常的本地玩家1输入4之后，远端玩家输入2才到达，这时候才能合成出当前状态，呈现出游戏帧，也就是本地输入1，2，3的时候游戏都是没有响应的，这就是我们看到的卡顿<br><a href="https://imgse.com/i/piIejHK"><img src="https://s11.ax1x.com/2023/12/18/piIejHK.png" alt="Fig5.GGPO2"></a><br>图2表示使用了GGPO回滚网络的情况的网络传输情况，此时假设系统对远端玩家2的预测都是正确的。可以看到，每次本地玩家1输入之后，都叠加了系统对远端玩家2预测状态，所以每次输出都可以更新游戏的状态，看起来就是所有的操作都没有卡顿，都正常被执行了。<br><a href="https://imgse.com/i/piImS4e"><img src="https://s11.ax1x.com/2023/12/18/piImS4e.png" alt="Fig6.GGPO3"></a><br>图3表示使用了GGPO回滚网络，但是假设系统对远端玩家2的预测都是错误了。假设在本地玩家1输入3之后，远端玩家输入1到达，但是经过校验发现，本地的预测错误了，此时虽然当前游戏的视频帧执行到了帧3，需要立刻回滚到帧1，也就是本地玩家输入1的状态，使用正确的远端输入1叠加本地玩家1的输入得到了正确状态，同时快速进行，本地输入1，2，3都是加速执行，直到本地玩家输入4的步骤，都变成正常了。</p><p>总而言之，GGPO回滚网络的原理，是将网络的延迟，放到了不会改变的动画的执行过程中。在格斗游戏中举了一个例子，比如对手在几帧前向你投掷了一个火球，那么这个火球的行为是完全确定的，不会受到对手未来输入的影响，此时本地就是预测对手未来的行动。</p><h2 id="4-2-参考格斗游戏的回滚网络对于风暴之门中RollBack机制的猜测"><a href="#4-2-参考格斗游戏的回滚网络对于风暴之门中RollBack机制的猜测" class="headerlink" title="4.2 参考格斗游戏的回滚网络对于风暴之门中RollBack机制的猜测"></a>4.2 参考格斗游戏的回滚网络对于风暴之门中RollBack机制的猜测</h2><p>玩家1是本地用户，玩家2是远程用户，下面模拟一下玩家2由于rollback机制的存在，对于玩家1的视角来说是没有延迟的。<br><a href="https://imgse.com/i/piImC3d"><img src="https://s11.ax1x.com/2023/12/18/piImC3d.png" alt="Fig7.农民例子"></a><br>以游戏开局，需要派出农民探路的场景举例子</p><ol><li>在原始点A给工蜂下达了一个去往B点的指令，每一个箭头表示需要1s的时间到达，正常情况下，工蜂需要3秒到达B点。</li><li>然而，1秒后，当工蜂到达O点时，玩家2下达指令让工蜂改变目标为C点。由于网络延迟，这个指令需要1秒本地玩家1才能接受到</li><li>如果是没有使用RollBack机制，游戏会不停的校验，需要本地和远程数据一致，才能继续执行。</li><li>引入rollback机制的情况下，对于本地玩家1来说，他的视角中工蜂会继续按照蓝色箭头的方向前进1秒。</li><li>此时过了1s，远程玩家2的数据到达了，经过校验发现工蜂的行进路径出现偏差，应该前往C点。</li><li>Rollback机制检测到第一个出现偏差的点是O点，工蜂会瞬间回到O点，然后通过加速的方式尽快到达预期目标C点。</li><li>正常情况下，从O到C需要2秒，但由于rollback机制，现在只需要1秒，最终工蜂从A到达C点，总共花费3秒，数据保持一致。</li></ol><p>举的这个例子是为了帮助理解用了十分夸张的时间机制，实际游戏中，不会有这么长的检测时间。看报道中选手的体验比较良好，看起来效果不错</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="SnowPlay引擎"><a href="#SnowPlay引擎" class="headerlink" title="SnowPlay引擎"></a>SnowPlay引擎</h2><p><a href="https://screenrant.com/james-anhalt-tim-morten-interview-snowplay-technology-stormgate/">1-James Anhalt &amp; Tim Morten 访谈：SnowPlay技术和风暴之门</a><br/><br><a href="https://www.youtube.com/watch?v=1m8Z8iVXfDM&t=119s">2-Stormgate Technology &amp; Art Reveal - December 2022 技术和美术访谈，提到了RollBack机制</a><br/><br><a href="https://stormgatenexus.com/article/stormgate-pre-alpha-interview-neuro-exclusive">3-“这就像一辆 F1 赛车”：风暴之门内部游戏测试的独家外观</a><br/></p><h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><p><a href="https://stormgatenexus.com/article/regional-identity-is-a-good-thing">4-地域认同是件好事，提到了sed老师和jim大神在中国赛区开发了凤凰巨像风格</a><br/><br><a href="https://www.reddit.com/r/Stormgate/comments/14a7qu8/comment/jodmi65/">5-与冰霜巨人工作室合作的《风暴之门》官方游戏揭秘 AMA 线程-rediit</a><br/><br><a href="https://old.reddit.com/r/Stormgate/comments/14a7qu8/official_stormgate_gameplay_reveal_ama_thread/jodk9yt/">6-与冰霜巨人工作室合作的《风暴之门》官方游戏揭秘 AMA 线程-old.reddit</a><br/><br><a href="https://hathora.dev/">7-多人游戏的服务器编排公司</a><br/><br><a href="https://bullet-mania.vercel.app/">8-hathora 构建可无限扩展的多人游戏，使用Kubernetes 计算集群，部署可伸缩的游戏服务器</a><br/></p><h2 id="Rollback机制"><a href="#Rollback机制" class="headerlink" title="Rollback机制"></a>Rollback机制</h2><p><a href="https://stormgatehub.com/stormgate-rollback-netcode-monumental-technical-leap-rts/">9-2023-10-11，风暴之门社区，新闻稿，风暴之门Rollback网络代码是RTS的巨大技术飞跃</a><br/><br><a href="https://esi.si.com/news/stormgate-using-rollback-netcode">10-为什么风暴之门使用回滚网络代码？</a><br/><br><a href="https://www.ggpo.net/">11-格斗游戏中使用的GGPO回滚网络机制</a><br/><br><a href="https://drive.google.com/file/d/1cV0fY8e_SC1hIFF5E1rT8XRVRzPjU8W9/view">12-与滞后作斗争！GGPO低延迟网络代码背后的诀窍</a><br/><br><a href="https://www.reddit.com/r/Stormgate/comments/174ty64/frost_giant_starts_testing_rollback_in_stormgate/">13-2023-10-11，风暴之门Rollback机制Alpha测试，reddit讨论帖</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-开端&quot;&gt;&lt;a href=&quot;#1-开端&quot; class=&quot;headerlink&quot; title=&quot;1.开端&quot;&gt;&lt;/a&gt;1.开端&lt;/h1&gt;&lt;p&gt;看了昨天二老风暴之门的解说，提到了使用了一个回滚机制可以消除消除游戏中的延迟，一直想不明白是怎么回事，自己本身对服务器通讯方</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>UML教程</title>
    <link href="http://example.com/2023/12/10/Course/CourseUML/"/>
    <id>http://example.com/2023/12/10/Course/CourseUML/</id>
    <published>2023-12-10T13:28:56.000Z</published>
    <updated>2023-12-10T15:07:52.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML图的种类"><a href="#UML图的种类" class="headerlink" title="UML图的种类"></a>UML图的种类</h1><p>统一建模语言（UML）是一种用于软件工程和系统设计的标准建模语言<br>UML提供了一组图形符号和规则，用于描述系统的不同方面。主要的UML图种类包括：</p><ol><li><p><strong>用例图（Use Case Diagrams）：</strong> 用于描述系统与外部实体（称为参与者）之间的功能需求和交互。</p></li><li><p><strong>类图（Class Diagrams）：</strong> 用于显示系统中的类、类之间的关系以及类的属性和方法。</p></li><li><p><strong>时序图（Sequence Diagrams）：</strong> 描述系统中的对象之间的交互顺序，尤其是在特定场景下的交互顺序。</p></li><li><p><strong>协作图（Collaboration Diagrams）：</strong> 类似于时序图，描述对象之间的协作关系，但强调对象之间的合作而不是时序。</p></li><li><p><strong>状态图（State Diagrams）：</strong> 描述对象在其生命周期中所经历的状态及状态之间的转换。</p></li><li><p><strong>活动图（Activity Diagrams）：</strong> 描述系统中的活动流程，展示系统中各个活动的顺序和条件。</p></li><li><p><strong>组件图（Component Diagrams）：</strong> 描述系统中的组件及其相互关系，强调系统的组织结构。</p></li><li><p><strong>部署图（Deployment Diagrams）：</strong> 描述系统中软件和硬件之间的物理部署关系。</p></li></ol><p>这些UML图形成了一个完整的模型，帮助软件开发团队以一种可视化和标准化的方式理解、设计和交流系统的不同方面。在实际应用中，通常会同时使用多种类型的UML图，以全面而清晰地描述系统。</p><h2 id="比较重要的"><a href="#比较重要的" class="headerlink" title="比较重要的"></a>比较重要的</h2><ol><li>用例图</li><li>类图</li><li>时序图</li></ol><h1 id="绘制UML图的工具"><a href="#绘制UML图的工具" class="headerlink" title="绘制UML图的工具"></a>绘制UML图的工具</h1><p>有许多工具可用于绘制和编辑UML图，这些工具提供了图形界面，使用户能够轻松地创建、修改和分享UML图。以下是一些常见的UML建模工具：</p><ol><li><p><strong>Enterprise Architect：</strong> 由Sparx Systems提供的工具，支持多种UML图，包括用例图、类图、时序图等。</p></li><li><p><strong>Visual Paradigm：</strong> 提供了丰富的UML建模功能，包括用例建模、类建模、时序建模等，同时支持团队协作。</p></li><li><p><strong>IBM Rational Software Architect：</strong> 适用于大型企业项目，提供广泛的建模和分析工具，包括UML和其他建模语言。</p></li><li><p><strong>Astah UML：</strong> 以易用性和轻量级著称，适用于个人和小型团队，支持多种UML图形。</p></li><li><p><strong>Lucidchart：</strong> 一个基于云的协作平台，支持绘制UML图和其他流程图，可通过浏览器进行在线编辑。</p></li><li><p><strong>Draw.io：</strong> 一个免费的在线图形编辑工具，支持UML图和其他类型的图表，可用于快速创建简单的UML图。</p></li><li><p><strong>Umbrello UML Modeller：</strong> 一个开源的UML建模工具，适用于Linux和Windows平台，提供用例图、类图等功能。</p></li><li><p><strong>PlantUML：</strong> 不同于传统图形界面的工具，PlantUML是一种使用文本描述语言创建UML图的工具，通过文本文件定义UML图形，然后生成图像。</p></li></ol><p>选择UML建模工具通常取决于项目的规模、团队的需求和个人的喜好。大多数工具提供了多种导出和共享选项，以便在团队成员之间方便地分享和合作。</p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>在UML类图中，两个对象之间可以存在不同类型的关系，这些关系用于描述对象之间的连接和交互。以下是一些常见的类图关系：</p><ol><li><p><strong>关联关系（Association）：</strong> 描述两个类之间的连接，表示一个类对象与另一个类对象之间存在某种关联。关联关系可以是双向的，也可以是单向的。</p></li><li><p><strong>聚合关系（Aggregation）：</strong> 表示一种弱的拥有关系，表示整体与部分之间的关系。聚合关系用空心菱形表示整体，与实线连接的部分。</p></li><li><p><strong>组合关系（Composition）：</strong> 表示一种强的拥有关系，整体对象负责部分对象的生命周期。组合关系用实心菱形表示整体，与实线连接的部分。</p></li><li><p><strong>泛化关系（Generalization）：</strong> 表示继承关系，表示一个类是另一个类的子类。泛化关系使用带有三角箭头的实线表示。</p></li><li><p><strong>依赖关系（Dependency）：</strong> 表示一个类依赖于另一个类，当一个类的变化可能影响到另一个类时，就存在依赖关系。依赖关系用虚线箭头表示。</p></li><li><p><strong>实现关系（Realization）：</strong> 表示一个类实现了一个接口，用带三角箭头的虚线表示。</p></li><li><p><strong>关联类关系（Association Class）：</strong> 表示关联关系中的关联类，即一个具有属性和方法的类，用在关联线上。</p></li><li><p><strong>约束关系（Constraint）：</strong> 表示对类或关系的一些限制条件，通常使用注释或标签进行表示。</p></li></ol><p>这些关系可以组合使用，以更全面地描述系统中对象之间的关系和交互。在类图中，关系的选择取决于系统的设计需求和建模目的。</p><table><thead><tr><th>关系类型</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>关联关系</td><td>Association</td><td>描述两个类之间的连接，表示一个类对象与另一个类对象之间存在某种关联。</td></tr><tr><td>聚合关系</td><td>Aggregation</td><td>表示一种弱的拥有关系，表示整体与部分之间的关系。聚合关系用空心菱形表示整体，与实线连接的部分。</td></tr><tr><td>组合关系</td><td>Composition</td><td>表示一种强的拥有关系，整体对象负责部分对象的生命周期。组合关系用实心菱形表示整体，与实线连接的部分。</td></tr><tr><td>泛化关系</td><td>Generalization</td><td>表示继承关系，表示一个类是另一个类的子类。泛化关系使用带有三角箭头的实线表示。</td></tr><tr><td>依赖关系</td><td>Dependency</td><td>表示一个类依赖于另一个类，当一个类的变化可能影响到另一个类时，存在依赖关系。</td></tr><tr><td>实现关系</td><td>Realization</td><td>表示一个类实现了一个接口，用带三角箭头的虚线表示。</td></tr><tr><td>关联类关系</td><td>Association Class</td><td>表示关联关系中的关联类，即一个具有属性和方法的类，用在关联线上。</td></tr><tr><td>约束关系</td><td>Constraint</td><td>表示对类或关系的一些限制条件，通常使用注释或标签进行表示。</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/biezhihua/article/details/43793729">https://blog.csdn.net/biezhihua/article/details/43793729</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UML图的种类&quot;&gt;&lt;a href=&quot;#UML图的种类&quot; class=&quot;headerlink&quot; title=&quot;UML图的种类&quot;&gt;&lt;/a&gt;UML图的种类&lt;/h1&gt;&lt;p&gt;统一建模语言（UML）是一种用于软件工程和系统设计的标准建模语言&lt;br&gt;UML提供了一组图形符号和规</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>GtooPlayer</title>
    <link href="http://example.com/2023/10/28/Project/GtooPlayer/GtooPlayer/"/>
    <id>http://example.com/2023/10/28/Project/GtooPlayer/GtooPlayer/</id>
    <published>2023-10-28T12:59:04.000Z</published>
    <updated>2023-10-29T03:12:22.390Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg-n6.0-latest-win64-gpl-shared-6.0.zip</p><p>一定要使用extern<br>extern “C”<br>{<br>#include &lt;libavcodec\avcodec.h&gt;<br>}</p><h1 id="第一个示例"><a href="#第一个示例" class="headerlink" title="第一个示例"></a>第一个示例</h1><p>doc\examples\avio_list_dir.c</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.ffmpeg.org/">ffmpeg官方网页</a><br><a href="http://www.ffmpeg.org/download.html">ffmpeg官方下载网页</a><br><a href="https://github.com/BtbN/FFmpeg-Builds/releases">FFmpeg-Builds,ffmpeg库文件下载地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ffmpeg-n6.0-latest-win64-gpl-shared-6.0.zip&lt;/p&gt;
&lt;p&gt;一定要使用extern&lt;br&gt;extern “C”&lt;br&gt;{&lt;br&gt;#include &amp;lt;libavcodec\avcodec.h&amp;gt;&lt;br&gt;}&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mmsegment</title>
    <link href="http://example.com/2023/09/09/Course/ML/MMsegment/"/>
    <id>http://example.com/2023/09/09/Course/ML/MMsegment/</id>
    <published>2023-09-09T06:43:15.000Z</published>
    <updated>2023-12-10T14:31:47.082Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n mmsegment python=3.10 -y</span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="比较常用的网络"><a href="#比较常用的网络" class="headerlink" title="比较常用的网络"></a>比较常用的网络</h1><p>UNet<br>Deeplabv3<br>Deeplabv3+<br>PSPNet<br>KNet<br>Segformer<br>FastSCNN</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ISAT</title>
    <link href="http://example.com/2023/09/05/Course/ML/ISAT/"/>
    <id>http://example.com/2023/09/05/Course/ML/ISAT/</id>
    <published>2023-09-05T02:28:23.000Z</published>
    <updated>2023-12-10T14:31:44.953Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ISAT python=3.10 -y</span><br><span class="line">conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">conda install -c conda-forge pycocotools</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/yatengLG/ISAT_with_segment_anything">ISAT_with_segment_anything</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Part17 包管理工具</title>
    <link href="http://example.com/2023/07/23/Course/BridsKitchen/Part17-Package-Management-Tools/"/>
    <id>http://example.com/2023/07/23/Course/BridsKitchen/Part17-Package-Management-Tools/</id>
    <published>2023-07-23T13:33:32.000Z</published>
    <updated>2023-07-30T15:10:52.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dpkg-Debian-package"><a href="#dpkg-Debian-package" class="headerlink" title="dpkg(Debian package)"></a>dpkg(Debian package)</h2><p>是一个常用于管理 Debian 系统上的软件包的工具</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i baidunetdisk_4.17.7_amd64.deb    <span class="comment"># 安装指定的软件包文件</span></span><br><span class="line">dpkg -r baidunetdisk    <span class="comment"># 仅移除软件包，保留配置文件</span></span><br><span class="line">dpkg --purge baidunetdisk    <span class="comment"># 移除软件包及其配置文件</span></span><br><span class="line">dpkg -l  <span class="comment"># 列出所有已安装的软件包</span></span><br></pre></td></tr></table></figure><h3 id="不常用指令"><a href="#不常用指令" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dpkg -s baidunetdisk  <span class="comment"># 显示指定软件包的详细信息</span></span><br><span class="line">dpkg -L baidunetdisk    <span class="comment"># 列出软件包安装的文件</span></span><br><span class="line">dpkg -S baidunetdisk   <span class="comment"># 查找拥有指定文件的软件包</span></span><br><span class="line">dpkg -p baidunetdisk    <span class="comment"># 显示已安装软件包的详细信息，包括依赖关系</span></span><br><span class="line">dpkg -c baidunetdisk_4.17.7_amd64.deb   <span class="comment"># 列出软件包文件中包含的文件</span></span><br><span class="line">dpkg -I baidunetdisk_4.17.7_amd64.deb   <span class="comment"># 显示软件包文件的详细信息，包括依赖关系</span></span><br><span class="line">dpkg --get-selections &gt; <span class="built_in">test</span>    <span class="comment"># 将已安装的软件包选择保存到文件</span></span><br><span class="line">dpkg --set-selections &lt; <span class="built_in">test</span>    <span class="comment"># 从文件中恢复软件包选择</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合"><a href="#常用指令组合" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i code_1.80.1-1689183569_amd64.deb <span class="comment"># 安装指定的软件包文件</span></span><br><span class="line">dpkg -l <span class="string">&quot;baidu*&quot;</span>  <span class="comment"># 列出指定软件包的信息,可以使用正则表达式</span></span><br><span class="line">dpkg -r baidunetdisk    <span class="comment"># 仅移除软件包，保留配置文件</span></span><br></pre></td></tr></table></figure><h2 id="apt-Debian-package"><a href="#apt-Debian-package" class="headerlink" title="apt(Debian package)"></a>apt(Debian package)</h2><p>Advanced Package Tool</p><h2 id="apt和apt-get的区别"><a href="#apt和apt-get的区别" class="headerlink" title="apt和apt-get的区别"></a>apt和apt-get的区别</h2><p>apt 和 apt-get 都是用于在 Debian 及其派生发行版（如 Ubuntu）上管理软件包的命令行工具。它们有很多相似之处，但也存在一些区别</p><h3 id="1-常用指令"><a href="#1-常用指令" class="headerlink" title="1.常用指令"></a>1.常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update <span class="comment"># 更新软件包列表,更新本地包缓存</span></span><br><span class="line"><span class="comment"># E: Unable to locate package ros-melodic-cotomap-msgs 找不到本地包的详细信息时候可以更新一下本地包缓存</span></span><br><span class="line">sudo apt list --upgradable <span class="comment"># 查看可以升级的软件包</span></span><br><span class="line"></span><br><span class="line">sudo apt upgrade <span class="comment"># 升级软件包</span></span><br><span class="line">sudo apt install vim <span class="comment"># 安装软件包</span></span><br></pre></td></tr></table></figure><h4 id="2-删除安装包"><a href="#2-删除安装包" class="headerlink" title="2.删除安装包"></a>2.删除安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove vim <span class="comment"># 卸载软件包，仅删除安装包</span></span><br><span class="line">sudo apt remove <span class="string">&quot;nvidia*&quot;</span> <span class="comment"># 同时移除以为nvidia开头的安装包</span></span><br><span class="line">sudo apt purge <span class="string">&quot;nvidia*&quot;</span>  <span class="comment"># 卸载软件包，同时删除配置文件</span></span><br><span class="line"><span class="comment"># 老的写法</span></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;nvidia*&quot;</span> <span class="comment"># 卸载软件包，同时删除配置文件</span></span><br></pre></td></tr></table></figure><h3 id="3-查看软件包的安装来源"><a href="#3-查看软件包的安装来源" class="headerlink" title="3. 查看软件包的安装来源"></a>3. 查看软件包的安装来源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会显示每个版本的软件包名称、软件源的名称、版本号、优先级等信息。</span></span><br><span class="line">apt-cache madison nvidia-cuda-toolkit  <span class="comment"># 显示这些软件包所属的软件源</span></span><br><span class="line">apt-cache policy nvidia-cuda-toolkit <span class="comment"># 列出软件的所有来源，更加详细一些</span></span><br><span class="line">apt-cache showpkg nvidia-cuda-toolkit  <span class="comment"># 列出软件的所有来源，包括软件包的依赖关系、提供的功能以及逆向依赖关系等</span></span><br><span class="line">apt-get install -s  nvidia-cuda-toolkit <span class="comment"># 模拟安装软件</span></span><br><span class="line"><span class="comment"># 列出软件所有版本，并查看是否已经安装</span></span><br><span class="line">apt-get install apt-show-versions <span class="comment"># 需要安装这个软件</span></span><br><span class="line">apt-show-versions -a nvidia-cuda-toolkit <span class="comment"># 列出软件所有版本</span></span><br></pre></td></tr></table></figure><h3 id="4-其他指令"><a href="#4-其他指令" class="headerlink" title="4. 其他指令"></a>4. 其他指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apt autoremove <span class="comment"># 清理不再需要的软件包</span></span><br><span class="line">apt search vim <span class="comment"># 搜索软件包</span></span><br><span class="line">apt show vim <span class="comment"># 显示软件包信息</span></span><br><span class="line"></span><br><span class="line">apt list --upgradable <span class="comment"># 列出可升级的软件包</span></span><br><span class="line">apt list --installed <span class="comment"># 列出所有已安装的软件包</span></span><br><span class="line">apt depends &lt;package-name&gt; <span class="comment"># 列出软件包的依赖关系</span></span><br><span class="line">apt rdepends &lt;package-name&gt; <span class="comment"># 列出软件包的反向依赖关系</span></span><br><span class="line">apt show &lt;source-name&gt; <span class="comment"># 显示APT仓库源的配置信息</span></span><br><span class="line">apt-add-repository &lt;repository&gt; <span class="comment"># 添加/移除 APT 仓库源</span></span><br><span class="line">apt remove-repository &lt;repository&gt;</span><br><span class="line">apt update &amp;&amp; apt upgrade <span class="comment"># 更新软件包索引并升级系统</span></span><br><span class="line">apt --fix-broken install <span class="comment"># 修复软件包依赖关系问题</span></span><br><span class="line">apt-cache search &lt;search-term&gt; <span class="comment"># 全局搜索软件包</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dpkg-Debian-package&quot;&gt;&lt;a href=&quot;#dpkg-Debian-package&quot; class=&quot;headerlink&quot; title=&quot;dpkg(Debian package)&quot;&gt;&lt;/a&gt;dpkg(Debian package)&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="鸟哥的Linux私房菜" scheme="http://example.com/tags/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>Part16 进程管理</title>
    <link href="http://example.com/2023/07/23/Course/BridsKitchen/Part16-Process-Management/"/>
    <id>http://example.com/2023/07/23/Course/BridsKitchen/Part16-Process-Management/</id>
    <published>2023-07-23T12:54:00.000Z</published>
    <updated>2023-07-23T13:29:28.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看系统情况"><a href="#查看系统情况" class="headerlink" title="查看系统情况"></a>查看系统情况</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="comment"># 显示当前用户的进程状态</span></span><br><span class="line"></span><br><span class="line">ps -e <span class="comment"># 显示系统中所有进程的简要信息</span></span><br><span class="line">ps -f <span class="comment"># 显示进程的完整格式输出，包括进程状态、PID、PPID、CPU使用率、内存使用等信息</span></span><br><span class="line"></span><br><span class="line">ps -a <span class="comment"># 显示当前终端下所有用户的进程，包括其他用户的进程。这个选项等同于ps -e</span></span><br><span class="line">ps -u <span class="comment"># 显示指定用户的进程信息。可以通过用户名或用户ID来指定用户</span></span><br><span class="line">ps -x <span class="comment"># 它用于显示当前用户在终端下运行的所有进程，包括没有控制终端的进</span></span><br></pre></td></tr></table></figure><h3 id="不常用指令"><a href="#不常用指令" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ps -l <span class="comment"># 显示进程的长格式输出，包括进程状态、PID、PPID、CPU使用率等信息</span></span><br><span class="line">ps -t <span class="comment"># 显示指定终端或伪终端上的进程</span></span><br><span class="line">ps -p <span class="comment"># 显示指定进程ID的进程信息</span></span><br><span class="line">ps -C <span class="comment"># 显示指定命令名的进程信息</span></span><br><span class="line">ps -o <span class="comment"># 自定义输出格式，可以选择要显示的列</span></span><br><span class="line">ps -H <span class="comment"># 显示进程的层次结构</span></span><br><span class="line">ps -S <span class="comment"># 显示进程的信号信息</span></span><br><span class="line">ps -G <span class="comment"># 显示指定进程组ID的进程信息</span></span><br><span class="line">ps -N <span class="comment"># 显示与指定进程ID不匹配的进程信息</span></span><br><span class="line">ps -u <span class="comment"># 显示指定用户的进程信息</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合"><a href="#常用指令组合" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef <span class="comment"># 显示系统中所有进程的详细信息</span></span><br><span class="line">ps -aux <span class="comment"># 显示当前用户以及其他用户的进程详细信息</span></span><br></pre></td></tr></table></figure><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>显示系统的内存使用情况，查看交换分区的情况</p><h3 id="不常用指令-1"><a href="#不常用指令-1" class="headerlink" title="不常用指令"></a>不常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free -b <span class="comment"># 以字节为单位显示内存使用情况</span></span><br><span class="line"></span><br><span class="line">free -k <span class="comment"># 以K字节为单位显示内存使用情况</span></span><br><span class="line">free -m <span class="comment"># 以M字节为单位显示内存使用情况</span></span><br><span class="line">free -g <span class="comment"># 以G字节为单位显示内存使用情况</span></span><br></pre></td></tr></table></figure><h3 id="常用指令组合-1"><a href="#常用指令组合-1" class="headerlink" title="常用指令组合"></a>常用指令组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">free -h <span class="comment"># 以人类可读的方式显示内存大小，以K、M、G为单位，更易读</span></span><br><span class="line">free -hs 1 <span class="comment"># 每秒显示一次</span></span><br><span class="line">free -t <span class="comment"># 显示内存总和</span></span><br><span class="line">free -V <span class="comment"># 显示free命令的版本信息</span></span><br></pre></td></tr></table></figure><h1 id="查看时间"><a href="#查看时间" class="headerlink" title="查看时间"></a>查看时间</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><h3 id="常用指令-1"><a href="#常用指令-1" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="comment"># 显示当前系统日期和时间</span></span><br><span class="line"><span class="built_in">date</span> <span class="string">&quot;2021-01-01 12:12:00&quot;</span> <span class="comment"># 设置系统时间为指定的时间,格式为&quot;YYYY-MM-DD HH:MM:SS&quot;</span></span><br><span class="line"><span class="built_in">date</span> +%Y-%m-%d %H:%M:%S <span class="comment"># 指定格式显示当前时间</span></span><br></pre></td></tr></table></figure><h2 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h2><p>查看时区，管理系统时间和日期的命令</p><h3 id="常用指令-2"><a href="#常用指令-2" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="comment"># 等于 timedatectl status</span></span><br><span class="line">timedatectl status <span class="comment"># 显示当前系统的时间和日期设置，以及时区信息</span></span><br><span class="line">timedatectl list-timezones <span class="comment"># 列出所有可用的时区选项</span></span><br></pre></td></tr></table></figure><h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><h2 id="通过lscpu命令"><a href="#通过lscpu命令" class="headerlink" title="通过lscpu命令"></a>通过lscpu命令</h2><p>lscpu命令是一种提取有关CPU体系结构信息的常用方法。此命令从sysfs的&#x2F;pro &#x2F;cpuinfo文件中提取硬件信息。该信息包括处理器数量，CPU操作模式，套接字，内核，线程，型号名称和虚拟化信息等。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看系统情况&quot;&gt;&lt;a href=&quot;#查看系统情况&quot; class=&quot;headerlink&quot; title=&quot;查看系统情况&quot;&gt;&lt;/a&gt;查看系统情况&lt;/h1&gt;&lt;h2 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;headerlink&quot; title=&quot;ps&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="鸟哥的Linux私房菜" scheme="http://example.com/tags/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C/"/>
    
  </entry>
  
  <entry>
    <title>ROS教程</title>
    <link href="http://example.com/2023/07/18/Tutorial/TutROS/"/>
    <id>http://example.com/2023/07/18/Tutorial/TutROS/</id>
    <published>2023-07-18T09:19:28.000Z</published>
    <updated>2023-07-23T14:40:42.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己用的指令"><a href="#自己用的指令" class="headerlink" title="自己用的指令"></a>自己用的指令</h1><p>录制包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ../devel/setup.bash</span><br><span class="line">roscore</span><br><span class="line">roslauch realsense2_camera rs_camera.launch</span><br><span class="line">rosbag record -O test.bag /camera/imu /camera/color/image_raw /camera/aligned_depth_to_color/image_raw</span><br></pre></td></tr></table></figure><p>台式机播放包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line">roscore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo RGBD-Inertial Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo d455 Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml（RGBD-YOLO）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/datasets/d455</span><br><span class="line"><span class="comment"># rosbag reindex test.bag # 笔记本录制移植到台式可能需要这样，否则直接播放提示op缺失</span></span><br><span class="line">rosbag play --clock --pause test.bag</span><br></pre></td></tr></table></figure><p>笔记本播放包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop/</span><br><span class="line">rosrun ORB_SLAM3_dense_yolo RGBD-Inertial Vocabulary/ORBvoc.txt Examples/RGB-D-Inertial/d455-211.yaml </span><br><span class="line"><span class="comment"># YOLO处理时间和闭环检测结果在此处呈现</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/datasets/d455</span><br><span class="line">rosbag play --clock --pause test.bag </span><br><span class="line"><span class="comment"># 等第二个终端输出日志结束，点击地图的Stop停止，终端出现保存点云文件后，在终端中Ctrl+C结束</span></span><br><span class="line"><span class="comment"># 点云文件在代码中已命名关联了，最好不要改，生成文件就叫VSLAMRGBD.pcd，放在~/catkin_ws/src/ORB_SLAM3_dense_loop/下</span></span><br><span class="line"><span class="comment"># 后面点云转八叉树还要用到该点云，所以可以在转化完之后，再把点云重命名为别的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/ORB_SLAM3_dense_loop/</span><br><span class="line">pcl_viewer VSLAMRGBD.pcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/publish_pointcloud</span><br><span class="line">roslaunch publish_pointcloud demo.launch</span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="roscore"><a href="#roscore" class="headerlink" title="roscore"></a>roscore</h2><p>这个命令用于启动ROS的核心功能，包括ROS主节点（master）和参数服务器（parameter server）。在运行其他ROS命令之前，需要先运行roscore。</p><h2 id="rostopic"><a href="#rostopic" class="headerlink" title="rostopic"></a>rostopic</h2><ul><li>这个命令用于查看和发布ROS系统中的话题信息。可以使用rostopic命令来列出当前可用的话题、查看话题的数据类型、发布消息到话题等。<br>rostopic list<br>rostopic list | grep &lt;&gt;<br>rostopic type &lt;&gt;<br>rostopic info &lt;&gt;<br>rostopic hz &lt;&gt;</li></ul><h2 id="rosrun"><a href="#rosrun" class="headerlink" title="rosrun"></a>rosrun</h2><p>这个命令用于在ROS软件包中运行指定的节点程序。通过指定软件包名称和节点名称，可以运行相应的ROS节点。</p><h3 id="调试rosrun"><a href="#调试rosrun" class="headerlink" title="调试rosrun"></a>调试rosrun</h3><launch>    <arg name = "launch_prefix" default="" />    <param name = "use_sim_time" default="" />    <node pkg="message_filter_example" type="complex_node" name="message_filter_example" output="screen" launch-prefix="xterm -e gdb -ex run --args"/></launch><!-- <launch-prefix= "xterm -e gdb --args"> --><launch>  <!-- 设置ORB_SLAM3_dense_yolo节点的参数 -->  <arg name="vocabulary_file" default="Vocabulary/ORBvoc.txt"/>  <arg name="config_file" default="Examples/RGB-D-Inertial/d455-211.yaml"/>  <!-- 启动ORB_SLAM3_dense_yolo节点 -->  <node pkg="ORB_SLAM3_dense_yolo" type="RGBD-Inertial" name="ORB_SLAM3_dense_yolo_node">    <param name="vocabulary_file" value="$(arg vocabulary_file)"/>    <param name="config_file" value="$(arg config_file)"/>  </node></launch><h2 id="rosnode"><a href="#rosnode" class="headerlink" title="rosnode"></a>rosnode</h2><ul><li>这个命令用于查看和管理ROS系统中的节点。可以使用rosnode命令来列出当前运行的节点、查看节点的详细信息、关闭节点等。<br>rosnode list<br>rosnode machine</li></ul><h2 id="rospack"><a href="#rospack" class="headerlink" title="rospack"></a>rospack</h2><ul><li>这个命令用于获取关于ROS软件包的信息。可以使用rospack命令来查找软件包的路径、依赖关系、导出的内容等。<br>rospack list</li></ul><h2 id="roscd"><a href="#roscd" class="headerlink" title="roscd"></a>roscd</h2><ul><li>这个命令用于快速切换到ROS软件包的目录。通过指定软件包的名称，可以进入该软件包的目录，方便用户进行包的相关操作。<br>rospack list<br>roscd urdf</li></ul><h2 id="roscd-1"><a href="#roscd-1" class="headerlink" title="roscd"></a>roscd</h2><ul><li>这个命令用于记录、播放和操作ROS系统中的数据包（rosbag文件）。可以使用rosbag命令来记录特定话题的数据、回放数据包、提取数据包中的消息等。</li></ul><h2 id="rosbag"><a href="#rosbag" class="headerlink" title="rosbag"></a>rosbag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rosbag</span><br><span class="line">rosbag info &lt;&gt; <span class="comment"># 包含的话题、消息数量、持续时间等</span></span><br><span class="line">rosbag record -O &lt;bag name&gt;  <span class="comment"># 用于记录ROS系统中的数据</span></span><br><span class="line">rosbag record -O test.bag /camera/imu /camera/color/image_raw /camera/aligned_depth_to_color/image_raw</span><br><span class="line"></span><br><span class="line">rosbag play --clock --pause test.bag</span><br><span class="line">--clock: 使用rosbag文件中的时间戳信息来模拟真实时间</span><br><span class="line">--pause: 这个选项告诉rosbag play在开始播放时暂停，而不是立即开始播放。</span><br><span class="line">rosbag play -a file1.bag file2.bag <span class="comment"># 用于同时播放多个rosbag文件</span></span><br><span class="line">rosbag play -l test.bag <span class="comment"># 播放之前记录的rosbag文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rosbag reindex <span class="comment"># 命令重新生成索引文件</span></span><br><span class="line">rosbag merge file1.bag file2.bag -o merged.bag <span class="comment"># 用于合并多个rosbag文件</span></span><br></pre></td></tr></table></figure><p>rosbag decompress: 用于解压rosbag文件。如果rosbag文件被压缩，可以使用该命令将其解压缩。示例命令：rosbag decompress test.bag。</p><p>rosbag filter: 用于过滤rosbag文件中的消息。可以根据自定义的条件对消息进行过滤，并将过滤后的消息保存到新的rosbag文件中。示例命令：rosbag filter input.bag output.bag “topic &#x3D;&#x3D; ‘&#x2F;topic1’”。</p><h1 id="launch教程"><a href="#launch教程" class="headerlink" title="launch教程"></a>launch教程</h1><launch>    <node .../>       <param .../>    <rosparam .../>    <include .../>    <remap .../>    <arg .../>    <group>  </group></launch><node pkg="package_name" type="executable_node" name="node_name" args="$()" respawn="true" output="sceen"><p>pkg：节点所在功能包的名称package_name；<br>type：节点类型是可执行文件(节点)的名称executable_node；<br>name：节点运行时的名称node_name；<br>args：传递命令行设置的参数；<br>respawn：是否自动重启，true表示如果节点未启动或异常关闭，则自动重启；false则表示不自动重启，默认值为false；<br>output：是否将节点信息输出到屏幕，如果不设置该属性，则节点信息会被写入到日志文件，并不会显示到屏幕上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自己用的指令&quot;&gt;&lt;a href=&quot;#自己用的指令&quot; class=&quot;headerlink&quot; title=&quot;自己用的指令&quot;&gt;&lt;/a&gt;自己用的指令&lt;/h1&gt;&lt;p&gt;录制包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ORB_SLAM</title>
    <link href="http://example.com/2023/07/15/EnvConfige/InstORBSLAM/"/>
    <id>http://example.com/2023/07/15/EnvConfige/InstORBSLAM/</id>
    <published>2023-07-15T06:23:09.000Z</published>
    <updated>2023-07-30T14:55:28.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装系统完成"><a href="#安装系统完成" class="headerlink" title="安装系统完成"></a>安装系统完成</h1><h1 id="小鱼一键安装ros"><a href="#小鱼一键安装ros" class="headerlink" title="小鱼一键安装ros"></a>小鱼一键安装ros</h1><p>装好系统，直接使用小鱼一键安装，开机就直接安装<br>会帮助换源<br>同时装好了opencv，Eigen3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros  </span><br></pre></td></tr></table></figure><p>ros-melodic<br>1<br>1<br>2<br>1<br>1<br>重启一下系统</p><p>查看一下opencv和eigen是否安装成功<br>sudo apt list –installed | grep opencv<br>sudo dpkg -l | grep eigen</p><h2 id="安装小工具"><a href="#安装小工具" class="headerlink" title="安装小工具"></a>安装小工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim openssh-server openssh-client net-tools git -y</span><br><span class="line">sed -i <span class="string">&quot;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># sudo vi /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># PermitRootLogin yes </span></span><br><span class="line">/etc/init.d/ssh restart</span><br><span class="line"><span class="comment"># ssh yzx@127.0.0.1</span></span><br></pre></td></tr></table></figure><h2 id="一键安装ORB-SLAM3"><a href="#一键安装ORB-SLAM3" class="headerlink" title="一键安装ORB-SLAM3"></a>一键安装ORB-SLAM3</h2><p>24GB &#x3D; 24576MB<br>28GB &#x3D; 28672MB</p><h1 id="安装D455驱动"><a href="#安装D455驱动" class="headerlink" title="安装D455驱动"></a>安装D455驱动</h1><p>sudo apt-get install libudev-dev pkg-config libgtk-3-dev libusb-1.0-0-dev libglfw3-dev libssl-dev -y<br>sudo apt-get install terminator -y # 安装多窗口终端</p><p>mkdir build &amp;&amp; cd build<br>cmake ..&#x2F; -DBUILD_EXAMPLES&#x3D;true<br>make -j 4 # 需要保证git clone https是通的<br>sudo make install</p><p>librealsene&#x2F;Cmake&#x2F;external_libcurl.cmake<br>GIT_REPOSITORY “<a href="https://github.com/curl/curl.git&quot;">https://github.com/curl/curl.git&quot;</a><br>GIT_REPOSITORY “<a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:curl&#x2F;curl.git” # 需要配置一下git拉取</p><p>（1）连接相机<br>（2）测试相机（方法1）<br>   cd ~&#x2F;librealsense-2.50.0&#x2F;build&#x2F;examples&#x2F;capture<br>   .&#x2F;rs-capture<br>      &#x2F;&#x2F;出现相机拍摄窗口和IMU窗口且终端显示相机参数即为安装成功<br>（3）测试相机（方法2）<br>   cd &#x2F;home&#x2F;qinyibo&#x2F;librealsense-2.50.0&#x2F;build&#x2F;tools&#x2F;realsense-viewer<br>   sudo .&#x2F;realsense-viewer<br>      &#x2F;&#x2F;相机运行软件中出现出现相机拍摄窗口和IMU窗口并且可以设置模式与参数即为成功<br>      &#x2F;&#x2F;右上角出现Dismiss错误时，可以重新插拔，但即使不出现错误，其Motion Module打开时依旧报错，但貌似不影响使用，暂时不管<br>         Severity:Error<br>         Description:Motion Module failure</p><p>while true; do free -h | tail ; sleep 1; done<br>while true; do rostopic list;echo “————-“  ; sleep 1; done</p><p>rostopic list | tail</p><h2 id="跑bag包测试"><a href="#跑bag包测试" class="headerlink" title="跑bag包测试"></a>跑bag包测试</h2><ol><li>roscore</li></ol><p>cd $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM3&#x2F;build&#x2F;<br>2. source $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM3&#x2F;build&#x2F;devel&#x2F;setup.bash</p><p>source $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_pigg&#x2F;Examples_old&#x2F;ROS&#x2F;ORB_SLAM3_dense_yolo&#x2F;build&#x2F;devel&#x2F;setup.bash</p><p>cd $HOME&#x2F;orb_slam&#x2F;ORB_SLAM3_detailed_comments&#x2F;</p><ol><li><p>rosrun ORB_SLAM3 Mono Vocabulary&#x2F;ORBvoc.txt Examples_old&#x2F;Monocular-Inertial&#x2F;EuRoC.yaml<br>&#x2F;&#x2F;运行ORB-SLAM3,并在ORB_SLAM3下产生运行结果（关键帧轨迹文件）<br>&#x2F;&#x2F;如果运行完记录包，出现跟踪局部地图失败提示，好像是因为运行快没有提取到特征点，目前解决方案是重新运行跑一次。<br>&#x2F;&#x2F;跑完记录包，本运行终端不会停止运行，暂时只能Ctrl+C结束，会有qt报错和核心转储报错，暂时无法解决。</p></li><li><p>在ROS记录包目录下打开终端3，运行记录包<br>rosbag play –pause MH_01_easy.bag &#x2F;cam0&#x2F;image_raw:&#x3D;&#x2F;camera&#x2F;image_raw &#x2F;imu0:&#x3D;&#x2F;imu<br>&#x2F;&#x2F;选择下载的Euroc数据集的ROS记录包<br>&#x2F;&#x2F;设置发布的话题名称，要与ORB-SLAM3订阅的话题一样<br>&#x2F;&#x2F;pause代表用space可以控制开始和暂停跑包</p></li></ol><h2 id="双系统的问题"><a href="#双系统的问题" class="headerlink" title="双系统的问题"></a>双系统的问题</h2><ol><li>没有网卡<ol><li>AX211 160MHZ</li></ol></li><li>没有显卡驱动</li><li>没有输入法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vi /etc/apt/sources.list</span><br><span class="line">sudo apt-get update <span class="comment"># 更新软件包列表,从软件源中获取最新的软件包信息，并将其存储在本地的软件包列表中。</span></span><br><span class="line">sudo apt-get upgrade <span class="comment"># 升级已安装的软件包的命令，它会检查本地软件包列表中的软件包是否有更新的版本，如果有的话就会将其升级到最新版本。</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>ps aux 命令会显示所有用户的所有进程，并且以用户为基础显示进程的详细信息。<br>sudo dpkg -i XXX(你下载的安装包名).deb</p><p>sudo apt list –installed | grep opencv<br>sudo dpkg -l | grep eigen</p><p>apt list # 列出所有已安装的软件包。<br>apt list –installed # 列出所有已安装的软件包。<br>apt list –upgradable # 列出可升级的软件包</p><p>tar -zxvf FileName.tar.gz               # 解压<br>tar -zcvf FileName.tar.gz DirName       # 将DirName和其下所有文件（夹）压缩</p><p>tar -zcvf orb_slam.tar.gz orb_slam</p><p>sudo apt install libglew-dev</p><h2 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h2><p>Pangolin<br>opencv<br>Eigen3</p><h1 id="安装clash-linux"><a href="#安装clash-linux" class="headerlink" title="安装clash linux"></a>安装clash linux</h1><h1 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h1><p>打开软件安装，更新，永远停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os-specific listings first</span></span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/osx-homebrew.yaml osx</span><br><span class="line"></span><br><span class="line"><span class="comment"># generic</span></span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/base.yaml</span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/python.yaml</span><br><span class="line">yaml file:///home/yzx/rosdistro/rosdep/ruby.yaml</span><br><span class="line">gbpdistro file:///home/yzx/rosdistro/releases/fuerte.yaml fuerte</span><br><span class="line"><span class="comment"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span></span><br></pre></td></tr></table></figure><p>FUERTE_GBPDISTRO_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;‘ <br>    ‘releases&#x2F;fuerte.yaml’</p><p>REP3_TARGETS_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;releases&#x2F;targets.yaml’</p><p>DEFAULT_INDEX_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;yzx&#x2F;rosdistro&#x2F;index-v4.yaml’</p><p>.&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;mono_inertial_euroc .&#x2F;Vocabulary&#x2F;ORBvoc.txt .&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;EuRoC.yaml &#x2F;home&#x2F;yzx&#x2F;MH01 .&#x2F;Examples&#x2F;Monocular-Inertial&#x2F;EuRoC_TimeStamps&#x2F;MH01.txt dataset-MH01_monoi</p><h1 id="主要头文件所在位置"><a href="#主要头文件所在位置" class="headerlink" title="主要头文件所在位置"></a>主要头文件所在位置</h1><p>&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;include<br>&#x2F;usr&#x2F;include&#x2F;pcl-1.8&#x2F;</p><p>“${workspaceFolder}&#x2F;<strong>“,<br>“&#x2F;usr&#x2F;include&#x2F;</strong>“,<br>“&#x2F;opt&#x2F;ros&#x2F;melodic&#x2F;include&#x2F;**”</p><h2 id="第一个libtorch例子"><a href="#第一个libtorch例子" class="headerlink" title="第一个libtorch例子"></a>第一个libtorch例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;torch/torch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  torch::Tensor tensor = torch::<span class="built_in">eye</span>(<span class="number">3</span>);</span><br><span class="line">  std::cout &lt;&lt; tensor &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.0</span> FATAL_ERROR)</span><br><span class="line"><span class="built_in">project</span>(dcgan)</span><br><span class="line"></span><br><span class="line"><span class="built_in">find_package</span>(Torch REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_executable</span>(dcgan dcgan.cpp)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(dcgan <span class="string">&quot;$&#123;TORCH_LIBRARIES&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">set_property</span>(TARGET dcgan PROPERTY CXX_STANDARD <span class="number">14</span>)</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/142014944">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a></p><p><a href="https://opclash.com/fenxiang/302.html">https://opclash.com/fenxiang/302.html</a></p><p><a href="https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97">https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97</a></p><p><a href="https://blog.csdn.net/m0_58402697/article/details/122298129">https://blog.csdn.net/m0_58402697/article/details/122298129</a><br><a href="https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html">https://www.intel.com/content/www/us/en/support/articles/000005511/wireless.html</a></p><p><a href="https://pytorch.org/cppdocs/installing.html">libtorch总教程</a><br><a href="https://pytorch.org/tutorials/advanced/cpp_frontend.html">libtorch简单的介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装系统完成&quot;&gt;&lt;a href=&quot;#安装系统完成&quot; class=&quot;headerlink&quot; title=&quot;安装系统完成&quot;&gt;&lt;/a&gt;安装系统完成&lt;/h1&gt;&lt;h1 id=&quot;小鱼一键安装ros&quot;&gt;&lt;a href=&quot;#小鱼一键安装ros&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Origin2022</title>
    <link href="http://example.com/2023/06/07/Tutorial/TutOrigin2022/"/>
    <id>http://example.com/2023/06/07/Tutorial/TutOrigin2022/</id>
    <published>2023-06-07T09:19:28.000Z</published>
    <updated>2023-12-10T14:29:44.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整图片的方法"><a href="#调整图片的方法" class="headerlink" title="调整图片的方法"></a>调整图片的方法</h1><ol><li>坐标轴范围，坐标轴字体，网格显示，点的间隔，坐标轴轴线粗细</li><li>子图坐标轴，子图像大小<ol><li>30 8</li><li>38 44</li></ol></li><li>线条颜色，线条粗细，线条类型</li><li>修改图层像素</li><li>高级导出</li></ol><p>Best Path<br>Iterations</p><h1 id="柱状图颜色"><a href="#柱状图颜色" class="headerlink" title="柱状图颜色"></a>柱状图颜色</h1><p>#FDC897<br>253,200,151<br>#9DD79D<br>157,215,157<br>#C2B2D6</p><h1 id="转化为折线图颜色"><a href="#转化为折线图颜色" class="headerlink" title="转化为折线图颜色"></a>转化为折线图颜色</h1><p>#FA8111<br>#46AC46<br>#9579B8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;调整图片的方法&quot;&gt;&lt;a href=&quot;#调整图片的方法&quot; class=&quot;headerlink&quot; title=&quot;调整图片的方法&quot;&gt;&lt;/a&gt;调整图片的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;坐标轴范围，坐标轴字体，网格显示，点的间隔，坐标轴轴线粗细&lt;/li&gt;
&lt;li&gt;子图坐标轴</summary>
      
    
    
    
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>prompt</title>
    <link href="http://example.com/2023/04/20/Others/PromptEnglish/"/>
    <id>http://example.com/2023/04/20/Others/PromptEnglish/</id>
    <published>2023-04-20T12:22:27.000Z</published>
    <updated>2023-12-10T14:31:05.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>I will ask you questions, even though my English grammar is poor. Please answer my questions in the following way:</p><ol><li>Modify the grammar of my questions if they are incorrect.You can modify it from Correcting subject-verb agreement errors、Using the correct verb tense、Placing modifiers correctly、Using proper punctuation</li><li>Answer my questions to the best of your ability.<br>my question is:<br>In integrate GA and ACO,I use GA initial solutions ,but my ACO can’t get initial solutions,it use Pheromone generation path,how can i improve it?</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/wikieden/Awesome-ChatGPT-Prompts-CN">https://github.com/wikieden/Awesome-ChatGPT-Prompts-CN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;p&gt;I will ask you questions, even though my English grammar is poor. Please a</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>app总结</title>
    <link href="http://example.com/2023/04/16/Others/App/"/>
    <id>http://example.com/2023/04/16/Others/App/</id>
    <published>2023-04-16T07:46:00.000Z</published>
    <updated>2023-12-10T14:30:55.981Z</updated>
    
    <content type="html"><![CDATA[<p>对于前端开发知识的一些总结</p><p>大前端——泛GUI交互<br>    HTML<br>    CSS<br>    javascript<br>    TypeScript<br>    nodejs<br>    原生app开发<br>        开发adroid ios<br>        facebook<br>            React native</p><pre><code>    google        dart        flutterwebapp开发    Vue    React混合开发HybirdAPP    微信公众号    小程序    Electron        H5页面嵌入到桌面段应用</code></pre><p>ES6<br>React<br>Promise<br>html5<br>Css3<br>Axios<br>Jquery<br>Vue Router<br>Node.js<br>AJAX</p><p>webpack、rollup、vite</p><h1 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h1><ol><li>Android Studio<ol><li>JAVA</li><li>Kotlin</li></ol></li></ol><h1 id="跨端开发"><a href="#跨端开发" class="headerlink" title="跨端开发"></a>跨端开发</h1><ol><li>uniapp<ol><li>HBuildX</li></ol></li><li>Flutter<ol><li>dart </li><li>Google 公司开发的一款跨平台的 UI 框架</li></ol></li><li>Taro <ol><li>京东</li></ol></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://flutter.cn/">Flutter官网</a><br><a href="https://www.dcloud.io/">uni-app官网</a><br><a href="https://developer.android.google.cn/?hl=zh-cn">Android Studio</a><br><a href="https://blog.csdn.net/SherlockStark/article/details/129298768?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8=">Android Studio 2022.1.1版本 保姆级安装教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于前端开发知识的一些总结&lt;/p&gt;
&lt;p&gt;大前端——泛GUI交互&lt;br&gt;    HTML&lt;br&gt;    CSS&lt;br&gt;    javascript&lt;br&gt;    TypeScript&lt;br&gt;    nodejs&lt;br&gt;    原生app开发&lt;br&gt;        开发adr</summary>
      
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg</title>
    <link href="http://example.com/2023/04/14/Project/FFmpeg/"/>
    <id>http://example.com/2023/04/14/Project/FFmpeg/</id>
    <published>2023-04-14T14:29:24.000Z</published>
    <updated>2023-07-06T12:52:06.591Z</updated>
    
    <content type="html"><![CDATA[<p>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264</p><p>fmpeg-master-latest-win64-gpl-shared.zip</p><p>avcodec.lib;avdevice.lib;avfilter.lib;avformat.lib;avutil.lib;swresample.lib;swscale.lib;postproc.lib</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MSBuild属性宏:</span><br><span class="line">- $<span class="comment">(OutDir)</span>：输出目录，用于存放生成的可执行文件或库文件。</span><br><span class="line">- $<span class="comment">(ProjectName)</span>：项目名称，通常与项目文件名相同。</span><br><span class="line">- $<span class="comment">(Configuration)</span>：当前项目配置，例如Debug或Release。</span><br><span class="line">- $<span class="comment">(Platform)</span>：当前项目平台，例如Wi<span class="symbol">n32</span>或x<span class="number">64</span>。</span><br><span class="line">- $<span class="comment">(SolutionDir)</span>：解决方案目录，包含解决方案文件所在的路径。</span><br><span class="line">- $<span class="comment">(ProjectDir)</span>：项目目录，包含项目文件所在的路径。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$<span class="comment">(SolutionDir)</span></span><br><span class="line">$<span class="comment">(SolutionExt)</span></span><br><span class="line">$<span class="comment">(SolutionFileName)</span></span><br><span class="line">$<span class="comment">(SolutionName)</span></span><br><span class="line">$<span class="comment">(SolutionPath)</span></span><br></pre></td></tr></table></figure><p>FFmpeg一共包含8个库：<br><strong>avcodec：编解码（最重要的库）。</strong><br><strong>avformat：封装格式处理。</strong><br>avfilter：滤镜特效处理。<br>avdevice：各种设备的输入输出。<br><strong>avutil：工具库（大部分库都需要这个库的支持）。</strong><br>postproc：后加工。<br>swresample：音频采样数据格式转换。<br><strong>swscale：视频像素数据格式转换。</strong><br>其中加粗的库为本课程涉及到的库。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ffmpeg.org/">ffmpeg官网</a></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><a href="https://blog.csdn.net/TracelessLe/article/details/107362505">Ubuntu上安装ffmpeg</a><br><a href="https://blog.csdn.net/TracelessLe/article/details/107522845">Ubuntu下x264库编译安装</a><br><a href="https://blog.csdn.net/qq_44054791/article/details/127861823">编译ffmpeg错误：ERROR: x264 not found using pkg-config</a><br><a href="https://www.lixian.fun/4237.html">编译安装libx264库遇到Found no assembler Minimum version is nasm-</a><br><a href="https://www.nasm.us/">nasm官网</a><br><a href="https://www.nasm.us/pub/nasm/releasebuilds/">nasm下载链接</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">ffmpeg windows下载地址</a><br><a href="https://blog.csdn.net/ustc_sse_shenzhang/article/details/102546753">FFmpeg三种版本（static、shared、dev）和实际操作举例</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.&amp;#x2F;configure –prefix&amp;#x3D;&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;ffmpeg –enable-shared –disable-static –disable-doc  –enable-gpl –enable-libx264&lt;/</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>google test</title>
    <link href="http://example.com/2023/04/14/Project/GoogleTest/"/>
    <id>http://example.com/2023/04/14/Project/GoogleTest/</id>
    <published>2023-04-14T11:40:49.000Z</published>
    <updated>2023-07-06T12:52:03.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装教程"><a href="#1-安装教程" class="headerlink" title="1.安装教程"></a>1.安装教程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:google/googletest.git</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">make -j all</span><br><span class="line">find . -name &quot;*.a&quot; # 查看静态链接库是否生成</span><br><span class="line">make insatll</span><br><span class="line">ls -l /user/local/ # 查看是否安装过去了</span><br></pre></td></tr></table></figure><h1 id="2-demo测试"><a href="#2-demo测试" class="headerlink" title="2. demo测试"></a>2. demo测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd googletests/samples</span><br><span class="line">g++ ../src/gtest_main.cc sample1.cc sample1_unittest.cc -o sample1 -lgtest -lgmock -lpthread -std=c++14 # 一定要使用C++11以上，C++14或者C++17才能编译通过</span><br></pre></td></tr></table></figure><p>样例分析：<br>gtest_main.cc: 测试主程序的入口<br>sample1.cc：等待测试的源码<br>sample1_unittest.cc: 测试用例</p><h1 id="3-写一个自己的测试用例"><a href="#3-写一个自己的测试用例" class="headerlink" title="3.写一个自己的测试用例"></a>3.写一个自己的测试用例</h1><p>1.有一个包含GTEST_API_的主函数，引入testing::InitGoogleTest<br>2.包含头文件gtest&#x2F;gtest.h<br>3.使用TEST宏定义，第一个参数是test suite的名字，第二个参数是test case的名字，写自己的测试函数<br>4.在测试函数中使用EXPECT_EQ,EXPECT_NE,EXPECT_LT,EXPECT_LE,EXPECT_GT,EXPECT_GE<br>5.在主函数中调用RUN_ALL_TESTS()，返回值是0表示成功，非0表示失败<br>6.编译，链接gtest库，运行</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://google.github.io/googletest/">官方文档</a><br><a href="https://github.com/google/googletest">github仓库</a><br><a href="https://blog.csdn.net/wdcyf15/article/details/108855960">Google Test(GTEST)使用入门（1）- 下载编译安装执行</a><br><a href="https://blog.csdn.net/qq_34525916/article/details/113752768">Ubuntu 16.04安装gtest遇坑，成功安装及使用记录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装教程&quot;&gt;&lt;a href=&quot;#1-安装教程&quot; class=&quot;headerlink&quot; title=&quot;1.安装教程&quot;&gt;&lt;/a&gt;1.安装教程&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>EIseg环境安装</title>
    <link href="http://example.com/2023/03/23/EnvConfige/InstEIseg/"/>
    <id>http://example.com/2023/03/23/EnvConfige/InstEIseg/</id>
    <published>2023-03-23T06:00:50.000Z</published>
    <updated>2023-12-10T14:31:23.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装python"><a href="#1-安装python" class="headerlink" title="1. 安装python"></a>1. 安装python</h1><p>勾选安装环境变量</p><h1 id="2-安装anaconda"><a href="#2-安装anaconda" class="headerlink" title="2. 安装anaconda"></a>2. 安装anaconda</h1><ol><li><p>不要勾选安装环境变量</p></li><li><p>安装后增加环境变量<br>E:\Anaconda<br>E:\Anaconda\Scripts<br>E:\Anaconda\Library\mingw-w64\bin<br>E:\Anaconda\Library\usr\bin<br>E:\Anaconda\Library\bin</p></li></ol><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><ol><li><p>anaconda换源</p><ol><li>先打开第一次anaconda，会创建.condarc</li><li>在C:\Users{username} 文件夹下面修改.condarc</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><ol start="3"><li><p>conda clean -i</p></li><li><p>检测是否换源成功</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="comment"># 如果pytorch安装成功即可导入</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available()) <span class="comment"># 查看CUDA是否可用</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.device_count()) <span class="comment"># 查看可用的CUDA数量</span></span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda) <span class="comment"># 查看CUDA的版本号</span></span><br></pre></td></tr></table></figure><h1 id="3-安装EIseg"><a href="#3-安装EIseg" class="headerlink" title="3. 安装EIseg"></a>3. 安装EIseg</h1><ol><li>创建自己的环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境所用的python版本需要在后面指定，如果不指定默认Anaconda自带python版本</span></span><br><span class="line"><span class="comment"># doccano 是环境名称，可根据自己命名区分不同自己的环境</span></span><br><span class="line">conda create -n eiseg_env python=3.10</span><br><span class="line"><span class="comment"># 激活自己的环境</span></span><br><span class="line">conda activate ant</span><br></pre></td></tr></table></figure><ol start="2"><li><p>切换到新创建的环境中，打开open Terminal</p></li><li><p>安装PaddlePaddle，是依赖环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装EIseg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install eiseg -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></li><li><p>启动<br>直接在命令行中输入eiseg</p></li></ol><h1 id="配置EIseg"><a href="#配置EIseg" class="headerlink" title="配置EIseg"></a>配置EIseg</h1><ol><li>只保存彩色图片</li><li>编辑快捷键<ol><li>前后移动</li><li>自动保存</li><li>删除所有多边形</li></ol></li><li>保存路径不能有中文</li></ol><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><ol><li>正负样本点</li><li>转化为矩形，拖动</li><li>删除矩形</li></ol><h1 id="标注时候需要注意"><a href="#标注时候需要注意" class="headerlink" title="标注时候需要注意"></a>标注时候需要注意</h1><h1 id="每次打开操作"><a href="#每次打开操作" class="headerlink" title="每次打开操作"></a>每次打开操作</h1><ol><li>选择保存类型，只保留伪彩色，coco格式</li><li>加载模型</li><li>打开文件夹</li><li>载入标签</li><li>标注</li><li>空格，转化为矩形</li><li>下一张</li></ol><h1 id="安装LabelImg"><a href="#安装LabelImg" class="headerlink" title="安装LabelImg"></a>安装LabelImg</h1><p>conda create -n labelimg python&#x3D;3.10 -y<br>pip install labelimg -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><h1 id="anaconda常用指令"><a href="#anaconda常用指令" class="headerlink" title="anaconda常用指令"></a>anaconda常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda config --show <span class="comment"># 查看conda的配置，确认channels</span></span><br><span class="line">conda config --show-sources <span class="comment"># 仅查看所有镜像</span></span><br><span class="line">conda config --get channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda config --show channels <span class="comment"># 查看已经添加的channels</span></span><br><span class="line">conda list <span class="comment"># 当前安装的包列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未查看</span></span><br><span class="line">conda update -n base conda</span><br><span class="line">conda install --<span class="built_in">yes</span> --file requirements.txt</span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>conda install –use-local pytorch-0.4.0-py35_cuda8.0.61_cudnn7.1.2_1.tar.bz2<br>conda remove -n 环境名字 –all</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[Anaconda超详细安装教程（Windows环境下）]<a href="https://blog.csdn.net/fan18317517352/article/details/123035625">https://blog.csdn.net/fan18317517352/article/details/123035625</a> <br/><br>[新手教程一：Anaconda新建开发环境]<a href="https://blog.csdn.net/qq_42573052/article/details/113770662">https://blog.csdn.net/qq_42573052/article/details/113770662</a> <br/><br><a href="https://blog.csdn.net/jasneik/article/details/114227716">anaconda 换清华镜像源 windows</a> <br/><br><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a> <br/><br><a href="https://blog.csdn.net/qq_43382635/article/details/127124980">Anaconda之导出&#x2F;导出配置好的虚拟环境</a> <br/><br><a href="https://blog.csdn.net/qq_37541097/article/details/120154543">EISeg工具对应博文</a> <br/><br><a href="https://github.com/PaddlePaddle/PaddleSeg/blob/release/2.7/README_CN.md">EIseg官方安装说明</a> <br/><br><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/index_cn.html">飞桨安装参考文档</a> <br/></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装python&quot;&gt;&lt;a href=&quot;#1-安装python&quot; class=&quot;headerlink&quot; title=&quot;1. 安装python&quot;&gt;&lt;/a&gt;1. 安装python&lt;/h1&gt;&lt;p&gt;勾选安装环境变量&lt;/p&gt;
&lt;h1 id=&quot;2-安装anaconda&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>minio 环境配置</title>
    <link href="http://example.com/2023/01/19/EnvConfige/InstMinio/"/>
    <id>http://example.com/2023/01/19/EnvConfige/InstMinio/</id>
    <published>2023-01-19T10:40:28.000Z</published>
    <updated>2023-04-20T04:16:12.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1)按指令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable&quot;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce -y</span><br></pre></td></tr></table></figure><p>2)查看是否安装成功<br>docker version</p><h1 id="安装minio"><a href="#安装minio" class="headerlink" title="安装minio"></a>安装minio</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 9000:9000 -p 9001:9001 --name minio \</span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=minio&quot; \</span><br><span class="line">-e &quot;MINIO_SECRET_KEY=minio123&quot; \</span><br><span class="line">-v /home/admin/minio/data:/data \</span><br><span class="line">-v /home/admin/minio/config:/root/.minio \</span><br><span class="line">minio/minio server /data \</span><br><span class="line">--console-address &quot;:9000&quot; --address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p>MINIO_ACCESS_KEY账号<br>MINIO_SECRET_KEY密码</p><p><a href="http://39.106.72.165:9000/">http://39.106.72.165:9000</a><br>本地：<br><a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cloud.tencent.com/developer/article/2057224">https://cloud.tencent.com/developer/article/2057224</a><br><a href="https://www.minio.org.cn/download.shtml#/linux">https://www.minio.org.cn/download.shtml#/linux</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h1&gt;&lt;p&gt;1)按指令安装&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu通用教程</title>
    <link href="http://example.com/2023/01/15/EnvConfige/ubuntu20/"/>
    <id>http://example.com/2023/01/15/EnvConfige/ubuntu20/</id>
    <published>2023-01-15T13:40:01.000Z</published>
    <updated>2023-07-16T04:22:09.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装VMware中出现的问题"><a href="#装VMware中出现的问题" class="headerlink" title="装VMware中出现的问题"></a>装VMware中出现的问题</h1><p>本地环境，win11+Vmware14<br>先安装了VMware14，安装过程没有问题，导入虚拟机，启动以后，电脑直接蓝屏，开机还是这个现象</p><p>网上搜索发现是没有启动虚拟工具</p><h1 id="安装ubuntu后需要做的"><a href="#安装ubuntu后需要做的" class="headerlink" title="安装ubuntu后需要做的"></a>安装ubuntu后需要做的</h1><ol><li>换源</li><li>更换时区</li><li>安装vim</li><li>安装ipconfig</li><li>安装ssh</li><li>配置历史记录<ol><li>echo ‘HISTTIMEFORMAT&#x3D;”%F %T “‘ &gt;&gt; ~&#x2F;.bashrc</li><li>source ~&#x2F;.bashrc</li></ol></li><li>配置静态ip – 不需要？</li><li>安装git</li></ol><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加阿里源</span></span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">#添加清华源</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span></span><br></pre></td></tr></table></figure><h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><ol><li>准备工作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install sudo</span><br><span class="line">apt-get install vim -y</span><br><span class="line">passwd <span class="comment"># 修改密码</span></span><br></pre></td></tr></table></figure></li><li>安装openssh<br>sudo apt-get install openssh-server openssh-client -y</li><li>修改ssh配置文件<br>sudo vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>PermitRootLogin yes<br>（默认为#PermitRootLogin prohibit-password）前面的#号要放开</li><li>启动服务<br>&#x2F;etc&#x2F;init.d&#x2F;ssh restart</li><li>连接测试<br>ssh user@[ip] -p [端口]<br>ssh <a href="mailto:&#x75;&#115;&#x65;&#x72;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#48;&#x2e;&#51;">&#x75;&#115;&#x65;&#x72;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#48;&#x2e;&#51;</a> -p 22</li><li>vscode配置<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  HostName <span class="number">192.168</span>.<span class="number">0.3</span></span><br><span class="line">  <span class="keyword">User</span> <span class="title">username</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a><br>wget <a href="https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz">https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz</a></p><p>tar -C &#x2F;usr&#x2F;local -xzf go1.19.5.linux-amd64.tar.gz</p><p>vim &#x2F;etc&#x2F;profile<br>source &#x2F;etc&#x2F;profile<br>export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go<br>#export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin<br>export PATH&#x3D;$PATH:$GOROOT&#x2F;bin<br>export GOPATH&#x3D;&#x2F;yzx<br>export GOBIN&#x3D;$GOPATH&#x2F;bin<br>export GOPROXY&#x3D;<a href="https://goproxy.cn/,direct">https://goproxy.cn/,direct</a></p><p><a href="https://goproxy.io/zh/">https://goproxy.io/zh/</a><br><a href="https://goproxy.cn/">https://goproxy.cn/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init [工程名字]</span><br><span class="line">go mod tidy  # 刷新mod</span><br><span class="line">go mod vender</span><br><span class="line">go get [跟着整个github目录]</span><br></pre></td></tr></table></figure><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>下错版本<br>go1.19.5.linux-arm64.tar.gz<br>报错:<br>bash: &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&#x2F;go: cannot execute binary file: Exec format error</p><p>VScode无法调试go<br>安装dlv</p><p>cgo: C compiler “gcc” not found: exec: “gcc”: executable file not found in $PATH (exit status 2)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/142014944">Ubuntu20.04软件源更换 - 知乎 (zhihu.com)</a><br><a href="https://blog.csdn.net/liangcsdn111/article/details/115405223">https://blog.csdn.net/liangcsdn111/article/details/115405223</a><br><a href="https://www.jianshu.com/p/2802d71ab9e9">https://www.jianshu.com/p/2802d71ab9e9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装VMware中出现的问题&quot;&gt;&lt;a href=&quot;#装VMware中出现的问题&quot; class=&quot;headerlink&quot; title=&quot;装VMware中出现的问题&quot;&gt;&lt;/a&gt;装VMware中出现的问题&lt;/h1&gt;&lt;p&gt;本地环境，win11+Vmware14&lt;br&gt;先安装</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>VS2017 使用教程</title>
    <link href="http://example.com/2023/01/02/Project/GtooPlayer/VS20XXProblem/"/>
    <id>http://example.com/2023/01/02/Project/GtooPlayer/VS20XXProblem/</id>
    <published>2023-01-02T12:56:46.000Z</published>
    <updated>2023-12-10T14:18:30.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Qt相关"><a href="#Qt相关" class="headerlink" title="Qt相关"></a>Qt相关</h2><ol><li>无法打开源文件，找不到Qt的头文件<br>vs2017 E1696无法打开 源 文件 “QtWidgets&#x2F;QMainWindow”</li></ol><p></p><h1 id="VS2017问题相关"><a href="#VS2017问题相关" class="headerlink" title="VS2017问题相关"></a>VS2017问题相关</h1><ol><li>printf没有输出<br>链接器-&gt;系统-&gt;窗口 (&#x2F;SUBSYSTEM:WINDOWS)</li></ol><p>添加参数的工程–&gt;属性–&gt;配置属性–&gt;调试-&gt;命令参数<br>各参数间用空格分离</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(ProjectDir)\include</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(ProjectDir)\lib</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(ProjectDir) 表示 xxx.vcxproj所在的目录</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(ProjectName) 代表具体的project 名称,</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(SolutionDir)</span></span><br></pre></td></tr></table></figure><p>avcodec.lib<br>avformat.lib<br>avutil.lib<br>avdevice.lib<br>avfilter.lib<br>postproc.lib<br>swresample.lib<br>swscale.lib</p><h1 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h1><h2 id="显示空白符号"><a href="#显示空白符号" class="headerlink" title="显示空白符号"></a>显示空白符号</h2><p>【选项】—&gt;【文本编辑器】—–&gt;【显示】—–&gt;【查看空白】</p><h2 id="将tab替换成四个空格"><a href="#将tab替换成四个空格" class="headerlink" title="将tab替换成四个空格"></a>将tab替换成四个空格</h2><p>Tools&gt;Options&gt;Text Editor&gt;All Languages&gt;Tabs&gt;</p><h1 id="配置工程为C-14或者17"><a href="#配置工程为C-14或者17" class="headerlink" title="配置工程为C++14或者17"></a>配置工程为C++14或者17</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/zt_xcyk/article/details/78006223">VS2015设置DLL和LIB的输出目录_zt_xcyk的博客-CSDN博客_lib的输出目录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2 id=&quot;Qt相关&quot;&gt;&lt;a href=&quot;#Qt相关&quot; class=&quot;headerlink&quot; title=&quot;Qt相关&quot;&gt;&lt;/a&gt;Qt相关&lt;/h</summary>
      
    
    
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Qt5教程</title>
    <link href="http://example.com/2022/12/31/Course/CourseQt5/"/>
    <id>http://example.com/2022/12/31/Course/CourseQt5/</id>
    <published>2022-12-31T05:34:44.000Z</published>
    <updated>2023-12-08T08:52:50.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt需要学习的知识点"><a href="#Qt需要学习的知识点" class="headerlink" title="Qt需要学习的知识点"></a>Qt需要学习的知识点</h1><p>QML<br>Qt Quick<br>Qpython</p><h1 id="Qt相关不了解的"><a href="#Qt相关不了解的" class="headerlink" title="Qt相关不了解的"></a>Qt相关不了解的</h1><p>QRegExp<br>QButtonGroup<br>QFactoryInterface<br>QStandardItemModel<br>Qt::WA_inputmethodenabled</p><p>QDomElement<br>QDomDocument<br>QDomNode</p><p>#include &lt;QtXml&#x2F;qtxmlglobal.h&gt;</p><p>安装过滤器</p><p>Q_DECL_EXPORT<br>Q_DECL_IMPORT<br>Q_PROPERTY</p><p>qt的继承关系</p><h1 id="C-中不了解的"><a href="#C-中不了解的" class="headerlink" title="C++中不了解的"></a>C++中不了解的</h1><p>stdcall,cdecl,fastcall,<br>thiscall, naked call</p><p>afx_msg</p><p>afxwin.h<br>windows.h<br>ODBC类</p><p>stdafx.h</p><p>继承自己单例的数组<br>奇异递归模板模式CRTP</p><p>dynamic_cast&lt;&gt;()</p><h1 id="其他需要了解的知识"><a href="#其他需要了解的知识" class="headerlink" title="其他需要了解的知识"></a>其他需要了解的知识</h1><p>Microsoft XNA<br>WPF<br>xaml<br>MFC<br>electron<br>Win32 SDK<br>STL,WTL<br>LCU客户端<br>CEF架构<br>WinForms<br>C++ builder<br>GTK+<br>libcef<br>Unity<br>桌面应用程序<br>桌面的客户端软件<br>Hive</p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><p>minicsv</p><h1 id="Qt文档学习"><a href="#Qt文档学习" class="headerlink" title="Qt文档学习"></a>Qt文档学习</h1><h2 id="关键词汇"><a href="#关键词汇" class="headerlink" title="关键词汇"></a>关键词汇</h2><p>signals and slots<br>Qt Object Model<br>object trees</p><h1 id="关键章节"><a href="#关键章节" class="headerlink" title="关键章节"></a>关键章节</h1><p>Qt Widgets </p><p>Qt GUI<br>Qt Core </p><p>C++ Classes<br>Animation Classes<br>Threading Classes<br>Container Classes<br>Plugin Classes<br>Implicitly Shared Classes<br>State Machine Classes<br>Input&#x2F;Output Classes<br>Event Classes </p><p>Qt Help<br>Qt OpenGL<br>Qt Test<br>qmake Manual </p><h1 id="常见宏定义"><a href="#常见宏定义" class="headerlink" title="常见宏定义"></a>常见宏定义</h1><p>Q_NULLPTR<br>QT_CONFIG</p><p>Q_OBJECT</p><p>Q_PROPERTY</p><p>Q_SLOTS<br>Q_SIGNALS</p><p>#ifdef Q_COMPILER_EXPLICIT_OVERRIDES</p><h1 id="define-Q-DECL-OVERRIDE-override"><a href="#define-Q-DECL-OVERRIDE-override" class="headerlink" title="define Q_DECL_OVERRIDE override"></a>define Q_DECL_OVERRIDE override</h1><h1 id="define-Q-DECL-FINAL-final"><a href="#define-Q-DECL-FINAL-final" class="headerlink" title="define Q_DECL_FINAL final"></a>define Q_DECL_FINAL final</h1><p>#else</p><p>Q_DISABLE_COPY</p><p>&#x2F;*<br>   Some classes do not permit copies to be made of an object. These<br>   classes contains a private copy constructor and assignment<br>   operator to disable copying (the compiler gives an error message).<br>*&#x2F;<br>#define Q_DISABLE_COPY(Class) <br>    Class(const Class &amp;) Q_DECL_EQ_DELETE;<br>    Class &amp;operator&#x3D;(const Class &amp;) Q_DECL_EQ_DELETE;</p><p>Q_DECL_EQ_DELETE</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>QTest<br>QMediaPlayer<br>需要在工程上右键-&gt;属性-&gt;Qt Project Setting-&gt;Qt Modules-&gt;select Modules<br>#include <QMediaPlayer></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">VideoDecode::open</span><span class="params">(<span class="type">const</span> QString &amp;url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="built_in">isNull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    AVDictionary* dict = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;rtsp_transport&quot;</span>, <span class="string">&quot;tcp&quot;</span>, <span class="number">0</span>);      <span class="comment">// 设置rtsp流使用tcp打开，如果打开失败错误信息为【Error number -135 occurred】可以切换（UDP、tcp、udp_multicast、http），比如vlc推流就需要使用udp打开</span></span><br><span class="line">    <span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;max_delay&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="number">0</span>);             <span class="comment">// 设置最大复用或解复用延迟（以微秒为单位）。当通过【UDP】 接收数据时，解复用器尝试重新排序接收到的数据包（因为它们可能无序到达，或者数据包可能完全丢失）。这可以通过将最大解复用延迟设置为零（通过max_delayAVFormatContext 字段）来禁用。</span></span><br><span class="line">    <span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;timeout&quot;</span>, <span class="string">&quot;1000000&quot;</span>, <span class="number">0</span>);         <span class="comment">// 以微秒为单位设置套接字 TCP I/O 超时，如果等待时间过短，也可能会还没连接就返回了。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开输入流并返回解封装上下文</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;m_formatContext,          <span class="comment">// 返回解封装上下文</span></span><br><span class="line">        url.<span class="built_in">toStdString</span>().<span class="built_in">data</span>(),  <span class="comment">// 打开视频地址</span></span><br><span class="line">        <span class="literal">nullptr</span>,                   <span class="comment">// 如果非null，此参数强制使用特定的输入格式。自动选择解封装器（文件格式）</span></span><br><span class="line">        &amp;dict);                    <span class="comment">// 参数设置</span></span><br><span class="line"><span class="comment">// 释放参数字典</span></span><br><span class="line">    <span class="keyword">if</span> (dict)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_dict_free</span>(&amp;dict);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打开视频失败</span></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">showError</span>(ret);</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取媒体文件的数据包以获取流信息。</span></span><br><span class="line">    ret = <span class="built_in">avformat_find_stream_info</span>(m_formatContext, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">showError</span>(ret);</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    qint64 totalTime = m_formatContext-&gt;duration / (AV_TIME_BASE / <span class="number">1000</span>);<span class="comment">// 计算视频总时长（毫秒）</span></span><br><span class="line">    mVideoFileInfo-&gt;mTotalTimeStamp = m_formatContext-&gt;duration;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_LOG</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">QString</span>(<span class="string">&quot;视频总时长：%1 ms，[%2]&quot;</span>).<span class="built_in">arg</span>(totalTime).</span><br><span class="line">        <span class="built_in">arg</span>(QTime::<span class="built_in">fromMSecsSinceStartOfDay</span>(<span class="built_in">int</span>(totalTime)).<span class="built_in">toString</span>(<span class="string">&quot;HH:mm:ss zzz&quot;</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过AVMediaType枚举查询视频流ID（也可以通过遍历查找），最后一个参数无用</span></span><br><span class="line">    m_videoIndex = <span class="built_in">av_find_best_stream</span>(m_formatContext, AVMEDIA_TYPE_VIDEO, <span class="number">-1</span>, <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_videoIndex &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">showError</span>(m_videoIndex);</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVStream* videoStream = m_formatContext-&gt;streams[m_videoIndex];  <span class="comment">// 通过查询到的索引获取视频流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取视频图像分辨率（AVStream中的AVCodecContext在新版本中弃用，改为使用AVCodecParameters）</span></span><br><span class="line">    QSize mSize;</span><br><span class="line">    mSize.<span class="built_in">setWidth</span>(videoStream-&gt;codecpar-&gt;width);</span><br><span class="line">    mSize.<span class="built_in">setHeight</span>(videoStream-&gt;codecpar-&gt;height);</span><br><span class="line">    qreal  mFrameRate;</span><br><span class="line">    mFrameRate = <span class="built_in">rationalToDouble</span>(&amp;videoStream-&gt;avg_frame_rate);  <span class="comment">// 视频帧率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过解码器ID获取视频解码器（新版本返回值必须使用const）</span></span><br><span class="line">    <span class="type">const</span> AVCodec* codec = <span class="built_in">avcodec_find_decoder</span>(videoStream-&gt;codecpar-&gt;codec_id);</span><br><span class="line">    <span class="type">int64_t</span> mTotalFrames;</span><br><span class="line">    mTotalFrames = videoStream-&gt;nb_frames;</span><br><span class="line"></span><br><span class="line">    mVideoFileInfo-&gt;mSize = mSize;</span><br><span class="line">    mVideoFileInfo-&gt;mFrameRate = mFrameRate;</span><br><span class="line">    mVideoFileInfo-&gt;mTotalFrames = mTotalFrames;</span><br><span class="line">    mVideoFileInfo-&gt;mCodecName = <span class="built_in">QString</span>(codec-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_LOG</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">QString</span>(<span class="string">&quot;分辨率：[w:%1,h:%2] 帧率：%3  总帧数：%4  解码器：%5&quot;</span>)</span><br><span class="line">        .<span class="built_in">arg</span>(mSize.<span class="built_in">width</span>()).<span class="built_in">arg</span>(mSize.<span class="built_in">height</span>()).<span class="built_in">arg</span>(mFrameRate).<span class="built_in">arg</span>(mTotalFrames).<span class="built_in">arg</span>(codec-&gt;name);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配AVCodecContext并将其字段设置为默认值。</span></span><br><span class="line">    m_codecContext = <span class="built_in">avcodec_alloc_context3</span>(codec);</span><br><span class="line">    <span class="keyword">if</span> (!m_codecContext)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_LOG</span></span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;创建视频解码器上下文失败！&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用视频流的codecpar为解码器上下文赋值</span></span><br><span class="line">    ret = <span class="built_in">avcodec_parameters_to_context</span>(m_codecContext, videoStream-&gt;codecpar);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">showError</span>(ret);</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_codecContext-&gt;flags2 |= AV_CODEC_FLAG2_FAST;    <span class="comment">// 允许不符合规范的加速技巧。</span></span><br><span class="line">    m_codecContext-&gt;thread_count = <span class="number">8</span>;                 <span class="comment">// 使用8线程解码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化解码器上下文，如果之前avcodec_alloc_context3传入了解码器，这里设置NULL就可以</span></span><br><span class="line">    ret = <span class="built_in">avcodec_open2</span>(m_codecContext, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">showError</span>(ret);</span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配AVPacket并将其字段设置为默认值。</span></span><br><span class="line">    m_packet = <span class="built_in">av_packet_alloc</span>();</span><br><span class="line">    <span class="keyword">if</span> (!m_packet)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_LOG</span></span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;av_packet_alloc() Error！&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分配AVFrame并将其字段设置为默认值。</span></span><br><span class="line">    m_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">    <span class="keyword">if</span> (!m_frame)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_LOG</span></span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;av_frame_alloc() Error！&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="built_in">free</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配图像空间</span></span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">av_image_get_buffer_size</span>(AV_PIX_FMT_RGBA, mSize.<span class="built_in">width</span>(), mSize.<span class="built_in">height</span>(), <span class="number">4</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 【注意：】这里可以多分配一些，否则如果只是安装size分配，大部分视频图像数据拷贝没有问题，</span></span><br><span class="line"><span class="comment">     *         但是少部分视频图像在使用sws_scale()拷贝时会超出数组长度，在使用使用msvc debug模式时delete[] m_buffer会报错（HEAP CORRUPTION DETECTED: after Normal block(#32215) at 0x000001AC442830370.CRT delected that the application wrote to memory after end of heap buffer）</span></span><br><span class="line"><span class="comment">     *         特别是这个视频流http://vfx.mtime.cn/Video/2019/02/04/mp4/190204084208765161.mp4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    m_buffer = <span class="keyword">new</span> uchar[size + <span class="number">1000</span>];    <span class="comment">// 这里多分配1000个字节就基本不会出现拷贝超出的情况了，反正不缺这点内存</span></span><br><span class="line"><span class="comment">//    m_image = new QImage(m_buffer, m_size.width(), m_size.height(), QImage::Format_RGBA8888);  // 这种方式分配内存大部分情况下也可以，但是因为存在拷贝超出数组的情况，delete时也会报错</span></span><br><span class="line">    m_end = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用中文回答，上面函数的含义是什么，帮我解释一下，还有视频解码的总体流程是什么样的？这个open中主要做了什么操作？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt需要学习的知识点&quot;&gt;&lt;a href=&quot;#Qt需要学习的知识点&quot; class=&quot;headerlink&quot; title=&quot;Qt需要学习的知识点&quot;&gt;&lt;/a&gt;Qt需要学习的知识点&lt;/h1&gt;&lt;p&gt;QML&lt;br&gt;Qt Quick&lt;br&gt;Qpython&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Windows核心编程</title>
    <link href="http://example.com/2022/12/31/Course/CourseWin32/"/>
    <id>http://example.com/2022/12/31/Course/CourseWin32/</id>
    <published>2022-12-31T05:31:31.000Z</published>
    <updated>2023-03-16T11:54:56.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="win32编程"><a href="#win32编程" class="headerlink" title="win32编程"></a>win32编程</h1><h1 id="1-windows应用程序分类"><a href="#1-windows应用程序分类" class="headerlink" title="1.windows应用程序分类"></a>1.windows应用程序分类</h1><h1 id="2-开发工具和库"><a href="#2-开发工具和库" class="headerlink" title="2.开发工具和库"></a>2.开发工具和库</h1><h1 id="3-第一个windows程序"><a href="#3-第一个windows程序" class="headerlink" title="3.第一个windows程序"></a>3.第一个windows程序</h1><h1 id="4-字符和编码"><a href="#4-字符和编码" class="headerlink" title="4.字符和编码"></a>4.字符和编码</h1><h2 id="1-编码历史背景"><a href="#1-编码历史背景" class="headerlink" title="1)编码历史背景"></a>1)编码历史背景</h2><h3 id="ASC"><a href="#ASC" class="headerlink" title="ASC"></a>ASC</h3><p>7位<br>128个</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>8位<br>256个</p><h3 id="DSCS"><a href="#DSCS" class="headerlink" title="DSCS"></a>DSCS</h3><p>单双字节混合编码</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>万国码<br>12-13万个</p><h2 id="2-2DBCS和UNICODE码"><a href="#2-2DBCS和UNICODE码" class="headerlink" title="2)2DBCS和UNICODE码"></a>2)2DBCS和UNICODE码</h2><p>DBCS单双字节混合编码，没有统一标准</p><p>linux<br>UTF-8<br>windows<br>UTF-16<br>无论什么字符都是两个字节</p><h2 id="3-宽字节字符"><a href="#3-宽字节字符" class="headerlink" title="3)宽字节字符"></a>3)宽字节字符</h2><p>wchar_t每个字符占2个字节</p><h2 id="4-TCHAR"><a href="#4-TCHAR" class="headerlink" title="4)TCHAR"></a>4)TCHAR</h2><h2 id="5-打印UNICODE字符"><a href="#5-打印UNICODE字符" class="headerlink" title="5)打印UNICODE字符"></a>5)打印UNICODE字符</h2><h1 id="win32"><a href="#win32" class="headerlink" title="win32"></a>win32</h1><p>句柄<br>能找到本进程占据的内存，但不是指针</p><p>MSDN</p><p>布局管理器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;win32编程&quot;&gt;&lt;a href=&quot;#win32编程&quot; class=&quot;headerlink&quot; title=&quot;win32编程&quot;&gt;&lt;/a&gt;win32编程&lt;/h1&gt;&lt;h1 id=&quot;1-windows应用程序分类&quot;&gt;&lt;a href=&quot;#1-windows应用程序分类&quot; c</summary>
      
    
    
    
    
    <category term="课程" scheme="http://example.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
</feed>
